
USB_OTG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e85c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0800e9ec  0800e9ec  0000f9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f340  0800f340  0001107c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f340  0800f340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f348  0800f348  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f348  0800f348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f34c  0800f34c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800f350  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001107c  2**0
                  CONTENTS
 10 .bss          00002f98  20000080  20000080  00011080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003018  20003018  00011080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015399  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dbf  00000000  00000000  00026445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4a  00000000  00000000  0002b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f15  00000000  00000000  0002bc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c869  00000000  00000000  00050b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70a3  00000000  00000000  0006d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013445b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000416c  00000000  00000000  001344a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e9d4 	.word	0x0800e9d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800e9d4 	.word	0x0800e9d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96a 	b.w	8000b98 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	460c      	mov	r4, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14e      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008e8:	4694      	mov	ip, r2
 80008ea:	458c      	cmp	ip, r1
 80008ec:	4686      	mov	lr, r0
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	d962      	bls.n	80009ba <__udivmoddi4+0xde>
 80008f4:	b14a      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f6:	f1c2 0320 	rsb	r3, r2, #32
 80008fa:	4091      	lsls	r1, r2
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	fa0c fc02 	lsl.w	ip, ip, r2
 8000904:	4319      	orrs	r1, r3
 8000906:	fa00 fe02 	lsl.w	lr, r0, r2
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f f68c 	uxth.w	r6, ip
 8000912:	fbb1 f4f7 	udiv	r4, r1, r7
 8000916:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091a:	fb07 1114 	mls	r1, r7, r4, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb04 f106 	mul.w	r1, r4, r6
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000932:	f080 8112 	bcs.w	8000b5a <__udivmoddi4+0x27e>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 810f 	bls.w	8000b5a <__udivmoddi4+0x27e>
 800093c:	3c02      	subs	r4, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a59      	subs	r1, r3, r1
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb1 f0f7 	udiv	r0, r1, r7
 800094a:	fb07 1110 	mls	r1, r7, r0, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f606 	mul.w	r6, r0, r6
 8000956:	429e      	cmp	r6, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x94>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000962:	f080 80fc 	bcs.w	8000b5e <__udivmoddi4+0x282>
 8000966:	429e      	cmp	r6, r3
 8000968:	f240 80f9 	bls.w	8000b5e <__udivmoddi4+0x282>
 800096c:	4463      	add	r3, ip
 800096e:	3802      	subs	r0, #2
 8000970:	1b9b      	subs	r3, r3, r6
 8000972:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000976:	2100      	movs	r1, #0
 8000978:	b11d      	cbz	r5, 8000982 <__udivmoddi4+0xa6>
 800097a:	40d3      	lsrs	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e9c5 3200 	strd	r3, r2, [r5]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d905      	bls.n	8000996 <__udivmoddi4+0xba>
 800098a:	b10d      	cbz	r5, 8000990 <__udivmoddi4+0xb4>
 800098c:	e9c5 0100 	strd	r0, r1, [r5]
 8000990:	2100      	movs	r1, #0
 8000992:	4608      	mov	r0, r1
 8000994:	e7f5      	b.n	8000982 <__udivmoddi4+0xa6>
 8000996:	fab3 f183 	clz	r1, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d146      	bne.n	8000a2c <__udivmoddi4+0x150>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xcc>
 80009a2:	4290      	cmp	r0, r2
 80009a4:	f0c0 80f0 	bcc.w	8000b88 <__udivmoddi4+0x2ac>
 80009a8:	1a86      	subs	r6, r0, r2
 80009aa:	eb64 0303 	sbc.w	r3, r4, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0e6      	beq.n	8000982 <__udivmoddi4+0xa6>
 80009b4:	e9c5 6300 	strd	r6, r3, [r5]
 80009b8:	e7e3      	b.n	8000982 <__udivmoddi4+0xa6>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	f040 8090 	bne.w	8000ae0 <__udivmoddi4+0x204>
 80009c0:	eba1 040c 	sub.w	r4, r1, ip
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	2101      	movs	r1, #1
 80009ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb08 4416 	mls	r4, r8, r6, r4
 80009da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009de:	fb07 f006 	mul.w	r0, r7, r6
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x11c>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x11a>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	f200 80cd 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009f6:	4626      	mov	r6, r4
 80009f8:	1a1c      	subs	r4, r3, r0
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a02:	fb08 4410 	mls	r4, r8, r0, r4
 8000a06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0a:	fb00 f707 	mul.w	r7, r0, r7
 8000a0e:	429f      	cmp	r7, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x148>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x146>
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	f200 80b0 	bhi.w	8000b82 <__udivmoddi4+0x2a6>
 8000a22:	4620      	mov	r0, r4
 8000a24:	1bdb      	subs	r3, r3, r7
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	e7a5      	b.n	8000978 <__udivmoddi4+0x9c>
 8000a2c:	f1c1 0620 	rsb	r6, r1, #32
 8000a30:	408b      	lsls	r3, r1
 8000a32:	fa22 f706 	lsr.w	r7, r2, r6
 8000a36:	431f      	orrs	r7, r3
 8000a38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a40:	ea43 030c 	orr.w	r3, r3, ip
 8000a44:	40f4      	lsrs	r4, r6
 8000a46:	fa00 f801 	lsl.w	r8, r0, r1
 8000a4a:	0c38      	lsrs	r0, r7, #16
 8000a4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a50:	fbb4 fef0 	udiv	lr, r4, r0
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fb00 441e 	mls	r4, r0, lr, r4
 8000a5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a60:	fb0e f90c 	mul.w	r9, lr, ip
 8000a64:	45a1      	cmp	r9, r4
 8000a66:	fa02 f201 	lsl.w	r2, r2, r1
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x1a6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	f080 8084 	bcs.w	8000b7e <__udivmoddi4+0x2a2>
 8000a76:	45a1      	cmp	r9, r4
 8000a78:	f240 8081 	bls.w	8000b7e <__udivmoddi4+0x2a2>
 8000a7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	eba4 0409 	sub.w	r4, r4, r9
 8000a86:	fa1f f983 	uxth.w	r9, r3
 8000a8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x1d2>
 8000a9e:	193c      	adds	r4, r7, r4
 8000aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aa4:	d267      	bcs.n	8000b76 <__udivmoddi4+0x29a>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0x29a>
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	443c      	add	r4, r7
 8000aae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ab2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ab6:	eba4 040c 	sub.w	r4, r4, ip
 8000aba:	429c      	cmp	r4, r3
 8000abc:	46ce      	mov	lr, r9
 8000abe:	469c      	mov	ip, r3
 8000ac0:	d351      	bcc.n	8000b66 <__udivmoddi4+0x28a>
 8000ac2:	d04e      	beq.n	8000b62 <__udivmoddi4+0x286>
 8000ac4:	b155      	cbz	r5, 8000adc <__udivmoddi4+0x200>
 8000ac6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ace:	fa04 f606 	lsl.w	r6, r4, r6
 8000ad2:	40cb      	lsrs	r3, r1
 8000ad4:	431e      	orrs	r6, r3
 8000ad6:	40cc      	lsrs	r4, r1
 8000ad8:	e9c5 6400 	strd	r6, r4, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	e750      	b.n	8000982 <__udivmoddi4+0xa6>
 8000ae0:	f1c2 0320 	rsb	r3, r2, #32
 8000ae4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	fa24 f303 	lsr.w	r3, r4, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3110 	mls	r1, r8, r0, r3
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f107 	mul.w	r1, r0, r7
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x24c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b1e:	d22c      	bcs.n	8000b7a <__udivmoddi4+0x29e>
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d92a      	bls.n	8000b7a <__udivmoddi4+0x29e>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b30:	fb08 3311 	mls	r3, r8, r1, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb01 f307 	mul.w	r3, r1, r7
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x276>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b48:	d213      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d911      	bls.n	8000b72 <__udivmoddi4+0x296>
 8000b4e:	3902      	subs	r1, #2
 8000b50:	4464      	add	r4, ip
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	e739      	b.n	80009ce <__udivmoddi4+0xf2>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	e6f0      	b.n	8000940 <__udivmoddi4+0x64>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e706      	b.n	8000970 <__udivmoddi4+0x94>
 8000b62:	45c8      	cmp	r8, r9
 8000b64:	d2ae      	bcs.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7a8      	b.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b72:	4631      	mov	r1, r6
 8000b74:	e7ed      	b.n	8000b52 <__udivmoddi4+0x276>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e799      	b.n	8000aae <__udivmoddi4+0x1d2>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e7d4      	b.n	8000b28 <__udivmoddi4+0x24c>
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1a6>
 8000b82:	4463      	add	r3, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	e74d      	b.n	8000a24 <__udivmoddi4+0x148>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e70f      	b.n	80009b0 <__udivmoddi4+0xd4>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	e730      	b.n	80009f8 <__udivmoddi4+0x11c>
 8000b96:	bf00      	nop

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <Mount_USB>:
uint32_t total, free_space;



void Mount_USB (void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4905      	ldr	r1, [pc, #20]	@ (8000bb8 <Mount_USB+0x1c>)
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <Mount_USB+0x20>)
 8000ba6:	f008 fdb3 	bl	8009710 <f_mount>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <Mount_USB+0x24>)
 8000bb0:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
//	else Send_Uart("USB mounted successfully...\n");
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001e4 	.word	0x200001e4
 8000bbc:	200001e8 	.word	0x200001e8
 8000bc0:	200001c0 	.word	0x200001c0

08000bc4 <Unmount_USB>:

void Unmount_USB (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4905      	ldr	r1, [pc, #20]	@ (8000be0 <Unmount_USB+0x1c>)
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f008 fd9f 	bl	8009710 <f_mount>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <Unmount_USB+0x20>)
 8000bd8:	701a      	strb	r2, [r3, #0]
//	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
//	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001e4 	.word	0x200001e4
 8000be4:	200001c0 	.word	0x200001c0

08000be8 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09a      	sub	sp, #104	@ 0x68
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f00d fa3f 	bl	800e074 <malloc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	667b      	str	r3, [r7, #100]	@ 0x64
    sprintf (path, "%s",pat);
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4941      	ldr	r1, [pc, #260]	@ (8000d04 <Scan_USB+0x11c>)
 8000bfe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c00:	f00d faf6 	bl	800e1f0 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f009 fbb4 	bl	800a378 <f_opendir>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b3c      	ldr	r3, [pc, #240]	@ (8000d08 <Scan_USB+0x120>)
 8000c16:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c18:	4b3b      	ldr	r3, [pc, #236]	@ (8000d08 <Scan_USB+0x120>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d168      	bne.n	8000cf2 <Scan_USB+0x10a>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4939      	ldr	r1, [pc, #228]	@ (8000d0c <Scan_USB+0x124>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f009 fc75 	bl	800a516 <f_readdir>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <Scan_USB+0x120>)
 8000c32:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000c34:	4b34      	ldr	r3, [pc, #208]	@ (8000d08 <Scan_USB+0x120>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d155      	bne.n	8000ce8 <Scan_USB+0x100>
 8000c3c:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <Scan_USB+0x124>)
 8000c3e:	7e9b      	ldrb	r3, [r3, #26]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d051      	beq.n	8000ce8 <Scan_USB+0x100>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000c44:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <Scan_USB+0x124>)
 8000c46:	7b1b      	ldrb	r3, [r3, #12]
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d037      	beq.n	8000cc0 <Scan_USB+0xd8>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000c50:	492f      	ldr	r1, [pc, #188]	@ (8000d10 <Scan_USB+0x128>)
 8000c52:	4830      	ldr	r0, [pc, #192]	@ (8000d14 <Scan_USB+0x12c>)
 8000c54:	f7ff fabc 	bl	80001d0 <strcmp>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d03f      	beq.n	8000cde <Scan_USB+0xf6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000c5e:	492c      	ldr	r1, [pc, #176]	@ (8000d10 <Scan_USB+0x128>)
 8000c60:	482d      	ldr	r0, [pc, #180]	@ (8000d18 <Scan_USB+0x130>)
 8000c62:	f7ff fab5 	bl	80001d0 <strcmp>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d03a      	beq.n	8000ce2 <Scan_USB+0xfa>
            	char *buf = malloc(30*sizeof(char));
 8000c6c:	201e      	movs	r0, #30
 8000c6e:	f00d fa01 	bl	800e074 <malloc>
 8000c72:	4603      	mov	r3, r0
 8000c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000c76:	4a26      	ldr	r2, [pc, #152]	@ (8000d10 <Scan_USB+0x128>)
 8000c78:	4928      	ldr	r1, [pc, #160]	@ (8000d1c <Scan_USB+0x134>)
 8000c7a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000c7c:	f00d fab8 	bl	800e1f0 <siprintf>
//            	Send_Uart(buf);
            	free(buf);
 8000c80:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000c82:	f00d f9ff 	bl	800e084 <free>
                i = strlen(path);
 8000c86:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c88:	f7ff faac 	bl	80001e4 <strlen>
 8000c8c:	65b8      	str	r0, [r7, #88]	@ 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000c8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c92:	4413      	add	r3, r2
 8000c94:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <Scan_USB+0x128>)
 8000c96:	4922      	ldr	r1, [pc, #136]	@ (8000d20 <Scan_USB+0x138>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00d faa9 	bl	800e1f0 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000c9e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000ca0:	f7ff ffa2 	bl	8000be8 <Scan_USB>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <Scan_USB+0x120>)
 8000caa:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000cac:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <Scan_USB+0x120>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d118      	bne.n	8000ce6 <Scan_USB+0xfe>
                path[i] = 0;
 8000cb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cb8:	4413      	add	r3, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e7af      	b.n	8000c20 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000cc0:	201e      	movs	r0, #30
 8000cc2:	f00d f9d7 	bl	800e074 <malloc>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	663b      	str	r3, [r7, #96]	@ 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <Scan_USB+0x128>)
 8000ccc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000cce:	4915      	ldr	r1, [pc, #84]	@ (8000d24 <Scan_USB+0x13c>)
 8000cd0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000cd2:	f00d fa8d 	bl	800e1f0 <siprintf>
//               Send_Uart(buf);
               free(buf);
 8000cd6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000cd8:	f00d f9d4 	bl	800e084 <free>
 8000cdc:	e7a0      	b.n	8000c20 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cde:	bf00      	nop
 8000ce0:	e79e      	b.n	8000c20 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000ce2:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000ce4:	e79c      	b.n	8000c20 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000ce6:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f009 fbec 	bl	800a4ca <f_closedir>
    }
    free(path);
 8000cf2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000cf4:	f00d f9c6 	bl	800e084 <free>
    return fresult;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <Scan_USB+0x120>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3768      	adds	r7, #104	@ 0x68
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	0800e9ec 	.word	0x0800e9ec
 8000d08:	200001c0 	.word	0x200001c0
 8000d0c:	200000a0 	.word	0x200000a0
 8000d10:	200000ba 	.word	0x200000ba
 8000d14:	0800e9f0 	.word	0x0800e9f0
 8000d18:	0800e9fc 	.word	0x0800e9fc
 8000d1c:	0800ea18 	.word	0x0800ea18
 8000d20:	0800ea24 	.word	0x0800ea24
 8000d24:	0800ea28 	.word	0x0800ea28

08000d28 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000d32:	494c      	ldr	r1, [pc, #304]	@ (8000e64 <Write_File+0x13c>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f009 fc2b 	bl	800a590 <f_stat>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e68 <Write_File+0x140>)
 8000d40:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000d42:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <Write_File+0x140>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00f      	beq.n	8000d6a <Write_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8000d4a:	2064      	movs	r0, #100	@ 0x64
 8000d4c:	f00d f992 	bl	800e074 <malloc>
 8000d50:	4603      	mov	r3, r0
 8000d52:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4945      	ldr	r1, [pc, #276]	@ (8000e6c <Write_File+0x144>)
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f00d fa49 	bl	800e1f0 <siprintf>
//		Send_Uart (buf);
	    free(buf);
 8000d5e:	68b8      	ldr	r0, [r7, #8]
 8000d60:	f00d f990 	bl	800e084 <free>
	    return fresult;
 8000d64:	4b40      	ldr	r3, [pc, #256]	@ (8000e68 <Write_File+0x140>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	e078      	b.n	8000e5c <Write_File+0x134>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4840      	ldr	r0, [pc, #256]	@ (8000e70 <Write_File+0x148>)
 8000d70:	f008 fd14 	bl	800979c <f_open>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b3b      	ldr	r3, [pc, #236]	@ (8000e68 <Write_File+0x140>)
 8000d7a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <Write_File+0x140>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d012      	beq.n	8000daa <Write_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000d84:	2064      	movs	r0, #100	@ 0x64
 8000d86:	f00d f975 	bl	800e074 <malloc>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000d8e:	4b36      	ldr	r3, [pc, #216]	@ (8000e68 <Write_File+0x140>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4937      	ldr	r1, [pc, #220]	@ (8000e74 <Write_File+0x14c>)
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f00d fa29 	bl	800e1f0 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f00d f970 	bl	800e084 <free>
	        return fresult;
 8000da4:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <Write_File+0x140>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	e058      	b.n	8000e5c <Write_File+0x134>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000daa:	2064      	movs	r0, #100	@ 0x64
 8000dac:	f00d f962 	bl	800e074 <malloc>
 8000db0:	4603      	mov	r3, r0
 8000db2:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	4930      	ldr	r1, [pc, #192]	@ (8000e78 <Write_File+0x150>)
 8000db8:	69f8      	ldr	r0, [r7, #28]
 8000dba:	f00d fa19 	bl	800e1f0 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 8000dbe:	69f8      	ldr	r0, [r7, #28]
 8000dc0:	f00d f960 	bl	800e084 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f7ff fa0d 	bl	80001e4 <strlen>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e7c <Write_File+0x154>)
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	4827      	ldr	r0, [pc, #156]	@ (8000e70 <Write_File+0x148>)
 8000dd2:	f008 ffb2 	bl	8009d3a <f_write>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <Write_File+0x140>)
 8000ddc:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000dde:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <Write_File+0x140>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00f      	beq.n	8000e06 <Write_File+0xde>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000de6:	2064      	movs	r0, #100	@ 0x64
 8000de8:	f00d f944 	bl	800e074 <malloc>
 8000dec:	4603      	mov	r3, r0
 8000dee:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <Write_File+0x140>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4921      	ldr	r1, [pc, #132]	@ (8000e80 <Write_File+0x158>)
 8000dfa:	69b8      	ldr	r0, [r7, #24]
 8000dfc:	f00d f9f8 	bl	800e1f0 <siprintf>
//	    		Send_Uart(buf);
	    		free(buf);
 8000e00:	69b8      	ldr	r0, [r7, #24]
 8000e02:	f00d f93f 	bl	800e084 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000e06:	481a      	ldr	r0, [pc, #104]	@ (8000e70 <Write_File+0x148>)
 8000e08:	f009 fa8c 	bl	800a324 <f_close>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <Write_File+0x140>)
 8000e12:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <Write_File+0x140>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d010      	beq.n	8000e3e <Write_File+0x116>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000e1c:	2064      	movs	r0, #100	@ 0x64
 8000e1e:	f00d f929 	bl	800e074 <malloc>
 8000e22:	4603      	mov	r3, r0
 8000e24:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <Write_File+0x140>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4915      	ldr	r1, [pc, #84]	@ (8000e84 <Write_File+0x15c>)
 8000e30:	6938      	ldr	r0, [r7, #16]
 8000e32:	f00d f9dd 	bl	800e1f0 <siprintf>
//	    		Send_Uart(buf);
	    		free(buf);
 8000e36:	6938      	ldr	r0, [r7, #16]
 8000e38:	f00d f924 	bl	800e084 <free>
 8000e3c:	e00c      	b.n	8000e58 <Write_File+0x130>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000e3e:	2064      	movs	r0, #100	@ 0x64
 8000e40:	f00d f918 	bl	800e074 <malloc>
 8000e44:	4603      	mov	r3, r0
 8000e46:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	490f      	ldr	r1, [pc, #60]	@ (8000e88 <Write_File+0x160>)
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f00d f9cf 	bl	800e1f0 <siprintf>
//	    		Send_Uart(buf);
	    		free(buf);
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f00d f916 	bl	800e084 <free>
	    	}
	    }
	    return fresult;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <Write_File+0x140>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000a0 	.word	0x200000a0
 8000e68:	200001c0 	.word	0x200001c0
 8000e6c:	0800ea3c 	.word	0x0800ea3c
 8000e70:	20001228 	.word	0x20001228
 8000e74:	0800ea5c 	.word	0x0800ea5c
 8000e78:	0800ea84 	.word	0x0800ea84
 8000e7c:	200001c4 	.word	0x200001c4
 8000e80:	0800eab0 	.word	0x0800eab0
 8000e84:	0800eae4 	.word	0x0800eae4
 8000e88:	0800eb1c 	.word	0x0800eb1c

08000e8c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000e94:	493b      	ldr	r1, [pc, #236]	@ (8000f84 <Create_File+0xf8>)
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f009 fb7a 	bl	800a590 <f_stat>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b39      	ldr	r3, [pc, #228]	@ (8000f88 <Create_File+0xfc>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000ea4:	4b38      	ldr	r3, [pc, #224]	@ (8000f88 <Create_File+0xfc>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8000eac:	2064      	movs	r0, #100	@ 0x64
 8000eae:	f00d f8e1 	bl	800e074 <malloc>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4934      	ldr	r1, [pc, #208]	@ (8000f8c <Create_File+0x100>)
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f00d f998 	bl	800e1f0 <siprintf>
//		Send_Uart(buf);
		free(buf);
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f00d f8df 	bl	800e084 <free>
	    return fresult;
 8000ec6:	4b30      	ldr	r3, [pc, #192]	@ (8000f88 <Create_File+0xfc>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	e057      	b.n	8000f7c <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000ecc:	220b      	movs	r2, #11
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	482f      	ldr	r0, [pc, #188]	@ (8000f90 <Create_File+0x104>)
 8000ed2:	f008 fc63 	bl	800979c <f_open>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <Create_File+0xfc>)
 8000edc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <Create_File+0xfc>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d012      	beq.n	8000f0c <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 8000ee6:	2064      	movs	r0, #100	@ 0x64
 8000ee8:	f00d f8c4 	bl	800e074 <malloc>
 8000eec:	4603      	mov	r3, r0
 8000eee:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <Create_File+0xfc>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4926      	ldr	r1, [pc, #152]	@ (8000f94 <Create_File+0x108>)
 8000efa:	6938      	ldr	r0, [r7, #16]
 8000efc:	f00d f978 	bl	800e1f0 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8000f00:	6938      	ldr	r0, [r7, #16]
 8000f02:	f00d f8bf 	bl	800e084 <free>
		    return fresult;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <Create_File+0xfc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	e037      	b.n	8000f7c <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000f0c:	2064      	movs	r0, #100	@ 0x64
 8000f0e:	f00d f8b1 	bl	800e074 <malloc>
 8000f12:	4603      	mov	r3, r0
 8000f14:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	491f      	ldr	r1, [pc, #124]	@ (8000f98 <Create_File+0x10c>)
 8000f1a:	69f8      	ldr	r0, [r7, #28]
 8000f1c:	f00d f968 	bl	800e1f0 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8000f20:	69f8      	ldr	r0, [r7, #28]
 8000f22:	f00d f8af 	bl	800e084 <free>
		}

		fresult = f_close(&USBHFile);
 8000f26:	481a      	ldr	r0, [pc, #104]	@ (8000f90 <Create_File+0x104>)
 8000f28:	f009 f9fc 	bl	800a324 <f_close>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <Create_File+0xfc>)
 8000f32:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <Create_File+0xfc>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d010      	beq.n	8000f5e <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8000f3c:	2064      	movs	r0, #100	@ 0x64
 8000f3e:	f00d f899 	bl	800e074 <malloc>
 8000f42:	4603      	mov	r3, r0
 8000f44:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <Create_File+0xfc>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4913      	ldr	r1, [pc, #76]	@ (8000f9c <Create_File+0x110>)
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00d f94d 	bl	800e1f0 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f00d f894 	bl	800e084 <free>
 8000f5c:	e00c      	b.n	8000f78 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000f5e:	2064      	movs	r0, #100	@ 0x64
 8000f60:	f00d f888 	bl	800e074 <malloc>
 8000f64:	4603      	mov	r3, r0
 8000f66:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	490d      	ldr	r1, [pc, #52]	@ (8000fa0 <Create_File+0x114>)
 8000f6c:	69b8      	ldr	r0, [r7, #24]
 8000f6e:	f00d f93f 	bl	800e1f0 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8000f72:	69b8      	ldr	r0, [r7, #24]
 8000f74:	f00d f886 	bl	800e084 <free>
		}
	}
    return fresult;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <Create_File+0xfc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000a0 	.word	0x200000a0
 8000f88:	200001c0 	.word	0x200001c0
 8000f8c:	0800ec10 	.word	0x0800ec10
 8000f90:	20001228 	.word	0x20001228
 8000f94:	0800ec48 	.word	0x0800ec48
 8000f98:	0800ec70 	.word	0x0800ec70
 8000f9c:	0800ecb0 	.word	0x0800ecb0
 8000fa0:	0800ebf0 	.word	0x0800ebf0

08000fa4 <Check_USB_Details>:
    }
    return fresult;
}

void Check_USB_Details (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8000faa:	4a2d      	ldr	r2, [pc, #180]	@ (8001060 <Check_USB_Details+0xbc>)
 8000fac:	492d      	ldr	r1, [pc, #180]	@ (8001064 <Check_USB_Details+0xc0>)
 8000fae:	482e      	ldr	r0, [pc, #184]	@ (8001068 <Check_USB_Details+0xc4>)
 8000fb0:	f009 fb27 	bl	800a602 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <Check_USB_Details+0xbc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	4a28      	ldr	r2, [pc, #160]	@ (8001060 <Check_USB_Details+0xbc>)
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	8952      	ldrh	r2, [r2, #10]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fbd6 	bl	8000778 <__aeabi_ui2d>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <Check_USB_Details+0xc8>)
 8000fd2:	f7ff f965 	bl	80002a0 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fc45 	bl	800086c <__aeabi_d2uiz>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a22      	ldr	r2, [pc, #136]	@ (8001070 <Check_USB_Details+0xcc>)
 8000fe6:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8000fe8:	201e      	movs	r0, #30
 8000fea:	f00d f843 	bl	800e074 <malloc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <Check_USB_Details+0xcc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	491e      	ldr	r1, [pc, #120]	@ (8001074 <Check_USB_Details+0xd0>)
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f00d f8f8 	bl	800e1f0 <siprintf>
//    Send_Uart(buf);
    free(buf);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f00d f83f 	bl	800e084 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001006:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <Check_USB_Details+0xbc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	895b      	ldrh	r3, [r3, #10]
 800100c:	461a      	mov	r2, r3
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <Check_USB_Details+0xc0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fbae 	bl	8000778 <__aeabi_ui2d>
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <Check_USB_Details+0xc8>)
 8001022:	f7ff f93d 	bl	80002a0 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fc1d 	bl	800086c <__aeabi_d2uiz>
 8001032:	4603      	mov	r3, r0
 8001034:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <Check_USB_Details+0xd4>)
 8001036:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001038:	201e      	movs	r0, #30
 800103a:	f00d f81b 	bl	800e074 <malloc>
 800103e:	4603      	mov	r3, r0
 8001040:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <Check_USB_Details+0xd4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <Check_USB_Details+0xd8>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f00d f8d0 	bl	800e1f0 <siprintf>
//    Send_Uart(buf);
    free(buf);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f00d f817 	bl	800e084 <free>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001c8 	.word	0x200001c8
 8001064:	200001cc 	.word	0x200001cc
 8001068:	0800ede4 	.word	0x0800ede4
 800106c:	3fe00000 	.word	0x3fe00000
 8001070:	200001d0 	.word	0x200001d0
 8001074:	0800ede8 	.word	0x0800ede8
 8001078:	200001d4 	.word	0x200001d4
 800107c:	0800ee00 	.word	0x0800ee00

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 f9c2 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f82c 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 f894 	bl	80011b8 <MX_GPIO_Init>
  MX_FATFS_Init();
 8001090:	f004 fc06 	bl	80058a0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001094:	f00c fc9c 	bl	800d9d0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2101      	movs	r1, #1
 800109c:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <main+0x54>)
 800109e:	f000 fcf9 	bl	8001a94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <main+0x54>)
 80010a8:	f000 fcf4 	bl	8001a94 <HAL_GPIO_WritePin>
	Mount_USB();
 80010ac:	f7ff fd76 	bl	8000b9c <Mount_USB>

	Check_USB_Details();
 80010b0:	f7ff ff78 	bl	8000fa4 <Check_USB_Details>

	Scan_USB("/");
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <main+0x58>)
 80010b6:	f7ff fd97 	bl	8000be8 <Scan_USB>

	Create_File("/AHMET.txt");
 80010ba:	4808      	ldr	r0, [pc, #32]	@ (80010dc <main+0x5c>)
 80010bc:	f7ff fee6 	bl	8000e8c <Create_File>
	Write_File("/AHMET.txt", "HelloWorld31313131!");
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <main+0x60>)
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <main+0x5c>)
 80010c4:	f7ff fe30 	bl	8000d28 <Write_File>
	Unmount_USB();
 80010c8:	f7ff fd7c 	bl	8000bc4 <Unmount_USB>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010cc:	f00c fca6 	bl	800da1c <MX_USB_HOST_Process>
 80010d0:	e7fc      	b.n	80010cc <main+0x4c>
 80010d2:	bf00      	nop
 80010d4:	40020800 	.word	0x40020800
 80010d8:	0800ee18 	.word	0x0800ee18
 80010dc:	0800ee1c 	.word	0x0800ee1c
 80010e0:	0800ee28 	.word	0x0800ee28

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	@ 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	@ 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00d f89c 	bl	800e230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <SystemClock_Config+0xcc>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <SystemClock_Config+0xcc>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <SystemClock_Config+0xd0>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <SystemClock_Config+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001158:	23a8      	movs	r3, #168	@ 0xa8
 800115a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001160:	2307      	movs	r3, #7
 8001162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fdc7 	bl	8003cfc <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001174:	f000 f870 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001178:	230f      	movs	r3, #15
 800117a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117c:	2302      	movs	r3, #2
 800117e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001184:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001188:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2105      	movs	r1, #5
 8001196:	4618      	mov	r0, r3
 8001198:	f003 f828 	bl	80041ec <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011a2:	f000 f859 	bl	8001258 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	@ 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_GPIO_Init+0x98>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <MX_GPIO_Init+0x98>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_GPIO_Init+0x98>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_GPIO_Init+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <MX_GPIO_Init+0x98>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_GPIO_Init+0x98>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_GPIO_Init+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a10      	ldr	r2, [pc, #64]	@ (8001250 <MX_GPIO_Init+0x98>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_GPIO_Init+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2101      	movs	r1, #1
 8001226:	480b      	ldr	r0, [pc, #44]	@ (8001254 <MX_GPIO_Init+0x9c>)
 8001228:	f000 fc34 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122c:	2301      	movs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_GPIO_Init+0x9c>)
 8001244:	f000 fa8a 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <NMI_Handler+0x4>

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <UsageFault_Handler+0x4>

080012dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f8d1 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <OTG_FS_IRQHandler+0x10>)
 800131a:	f000 feb5 	bl	8002088 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20002af0 	.word	0x20002af0

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	@ (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f00c ff82 	bl	800e260 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20020000 	.word	0x20020000
 8001388:	00000400 	.word	0x00000400
 800138c:	200001d8 	.word	0x200001d8
 8001390:	20003018 	.word	0x20003018

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013bc:	f7ff ffea 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f00c ff41 	bl	800e26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff fe49 	bl	8001080 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013fc:	0800f350 	.word	0x0800f350
  ldr r2, =_sbss
 8001400:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001404:	20003018 	.word	0x20003018

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <HAL_Init+0x40>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800141a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_Init+0x40>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_Init+0x40>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f94f 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	200f      	movs	r0, #15
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff ff10 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f967 	bl	8001742 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f92f 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	200001dc 	.word	0x200001dc

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200001dc 	.word	0x200001dc

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	@ (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	@ (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff3e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff31 	bl	800159c <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e16b      	b.n	8001a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 815a 	bne.w	8001a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d005      	beq.n	80017ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d130      	bne.n	8001810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b03      	cmp	r3, #3
 800181a:	d017      	beq.n	800184c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80b4 	beq.w	8001a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b60      	ldr	r3, [pc, #384]	@ (8001a68 <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001a68 <HAL_GPIO_Init+0x30c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a68 <HAL_GPIO_Init+0x30c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a5b      	ldr	r2, [pc, #364]	@ (8001a6c <HAL_GPIO_Init+0x310>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a52      	ldr	r2, [pc, #328]	@ (8001a70 <HAL_GPIO_Init+0x314>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0x226>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a51      	ldr	r2, [pc, #324]	@ (8001a74 <HAL_GPIO_Init+0x318>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x222>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a50      	ldr	r2, [pc, #320]	@ (8001a78 <HAL_GPIO_Init+0x31c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x21e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a7c <HAL_GPIO_Init+0x320>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4e      	ldr	r2, [pc, #312]	@ (8001a80 <HAL_GPIO_Init+0x324>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a84 <HAL_GPIO_Init+0x328>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x212>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4c      	ldr	r2, [pc, #304]	@ (8001a88 <HAL_GPIO_Init+0x32c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a8c <HAL_GPIO_Init+0x330>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x20a>
 8001962:	2307      	movs	r3, #7
 8001964:	e00e      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001966:	2308      	movs	r3, #8
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196a:	2306      	movs	r3, #6
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001982:	2300      	movs	r3, #0
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001994:	4935      	ldr	r1, [pc, #212]	@ (8001a6c <HAL_GPIO_Init+0x310>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a32      	ldr	r2, [pc, #200]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a44:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	f67f ae90 	bls.w	8001778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40021400 	.word	0x40021400
 8001a88:	40021800 	.word	0x40021800
 8001a8c:	40021c00 	.word	0x40021c00
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af02      	add	r7, sp, #8
 8001acc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e059      	b.n	8001b8c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f00b ffde 	bl	800dab4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b06:	d102      	bne.n	8001b0e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fdcb 	bl	80046ae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7c1a      	ldrb	r2, [r3, #16]
 8001b20:	f88d 2000 	strb.w	r2, [sp]
 8001b24:	3304      	adds	r3, #4
 8001b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b28:	f002 fd4c 	bl	80045c4 <USB_CoreInit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e026      	b.n	8001b8c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 fdc3 	bl	80046d0 <USB_SetCurrentMode>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e017      	b.n	8001b8c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7c1a      	ldrb	r2, [r3, #16]
 8001b64:	f88d 2000 	strb.w	r2, [sp]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	f002 ff66 	bl	8004a3c <USB_HostInit>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e004      	b.n	8001b8c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b08b      	sub	sp, #44	@ 0x2c
 8001b98:	af04      	add	r7, sp, #16
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70bb      	strb	r3, [r7, #2]
 8001baa:	4613      	mov	r3, r2
 8001bac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001bae:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001bb0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_HCD_HC_Init+0x2c>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e09d      	b.n	8001cfc <HAL_HCD_HC_Init+0x168>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3319      	adds	r3, #25
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3314      	adds	r3, #20
 8001bec:	787a      	ldrb	r2, [r7, #1]
 8001bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3315      	adds	r3, #21
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3326      	adds	r3, #38	@ 0x26
 8001c14:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001c18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c22:	b2d8      	uxtb	r0, r3
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3316      	adds	r3, #22
 8001c32:	4602      	mov	r2, r0
 8001c34:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fbc8 	bl	80023d0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da0a      	bge.n	8001c5e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	3317      	adds	r3, #23
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e009      	b.n	8001c72 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3317      	adds	r3, #23
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 f844 	bl	8004d04 <USB_GetHostSpeed>
 8001c7c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10b      	bne.n	8001c9e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_HCD_HC_Init+0x10a>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c98:	d901      	bls.n	8001c9e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c9a:	23bc      	movs	r3, #188	@ 0xbc
 8001c9c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3318      	adds	r3, #24
 8001cae:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	b298      	uxth	r0, r3
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3328      	adds	r3, #40	@ 0x28
 8001cc8:	4602      	mov	r2, r0
 8001cca:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	787c      	ldrb	r4, [r7, #1]
 8001cd6:	78ba      	ldrb	r2, [r7, #2]
 8001cd8:	78f9      	ldrb	r1, [r7, #3]
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4623      	mov	r3, r4
 8001cea:	f003 f833 	bl	8004d54 <USB_HC_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}

08001d04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_HCD_HC_Halt+0x1e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00f      	b.n	8001d42 <HAL_HCD_HC_Halt+0x3e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fbc5 	bl	80054c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	70fb      	strb	r3, [r7, #3]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70bb      	strb	r3, [r7, #2]
 8001d62:	4613      	mov	r3, r2
 8001d64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3317      	adds	r3, #23
 8001d76:	78ba      	ldrb	r2, [r7, #2]
 8001d78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3326      	adds	r3, #38	@ 0x26
 8001d8a:	787a      	ldrb	r2, [r7, #1]
 8001d8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d8e:	7c3b      	ldrb	r3, [r7, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	332a      	adds	r3, #42	@ 0x2a
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3319      	adds	r3, #25
 8001db8:	7f3a      	ldrb	r2, [r7, #28]
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e009      	b.n	8001dd2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	332a      	adds	r3, #42	@ 0x2a
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dd2:	787b      	ldrb	r3, [r7, #1]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	f200 8102 	bhi.w	8001fde <HAL_HCD_HC_SubmitRequest+0x292>
 8001dda:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001fc9 	.word	0x08001fc9
 8001de8:	08001eb5 	.word	0x08001eb5
 8001dec:	08001f3f 	.word	0x08001f3f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001df0:	7c3b      	ldrb	r3, [r7, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 80f5 	bne.w	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12d      	bne.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001dfe:	8b3b      	ldrh	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333d      	adds	r3, #61	@ 0x3d
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	333d      	adds	r3, #61	@ 0x3d
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	332a      	adds	r3, #42	@ 0x2a
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001e42:	e0ce      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	332a      	adds	r3, #42	@ 0x2a
 8001e54:	2202      	movs	r2, #2
 8001e56:	701a      	strb	r2, [r3, #0]
      break;
 8001e58:	e0c3      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	331a      	adds	r3, #26
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 80b8 	bne.w	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	333c      	adds	r3, #60	@ 0x3c
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	332a      	adds	r3, #42	@ 0x2a
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
      break;
 8001e9c:	e0a1      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	332a      	adds	r3, #42	@ 0x2a
 8001eae:	2202      	movs	r2, #2
 8001eb0:	701a      	strb	r2, [r3, #0]
      break;
 8001eb2:	e096      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001eb4:	78bb      	ldrb	r3, [r7, #2]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d120      	bne.n	8001efc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	333d      	adds	r3, #61	@ 0x3d
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	332a      	adds	r3, #42	@ 0x2a
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ee4:	e07e      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	332a      	adds	r3, #42	@ 0x2a
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
      break;
 8001efa:	e073      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	333c      	adds	r3, #60	@ 0x3c
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	332a      	adds	r3, #42	@ 0x2a
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
      break;
 8001f26:	e05d      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	332a      	adds	r3, #42	@ 0x2a
 8001f38:	2202      	movs	r2, #2
 8001f3a:	701a      	strb	r2, [r3, #0]
      break;
 8001f3c:	e052      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f3e:	78bb      	ldrb	r3, [r7, #2]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d120      	bne.n	8001f86 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	333d      	adds	r3, #61	@ 0x3d
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	332a      	adds	r3, #42	@ 0x2a
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f6e:	e039      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	332a      	adds	r3, #42	@ 0x2a
 8001f80:	2202      	movs	r2, #2
 8001f82:	701a      	strb	r2, [r3, #0]
      break;
 8001f84:	e02e      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333c      	adds	r3, #60	@ 0x3c
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	332a      	adds	r3, #42	@ 0x2a
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
      break;
 8001fb0:	e018      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	332a      	adds	r3, #42	@ 0x2a
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
      break;
 8001fc6:	e00d      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	332a      	adds	r3, #42	@ 0x2a
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
      break;
 8001fdc:	e002      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001fe2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	332c      	adds	r3, #44	@ 0x2c
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	8b39      	ldrh	r1, [r7, #24]
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4403      	add	r3, r0
 8002008:	3334      	adds	r3, #52	@ 0x34
 800200a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	334c      	adds	r3, #76	@ 0x4c
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3338      	adds	r3, #56	@ 0x38
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3315      	adds	r3, #21
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	334d      	adds	r3, #77	@ 0x4d
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4613      	mov	r3, r2
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3310      	adds	r3, #16
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	1d19      	adds	r1, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	799b      	ldrb	r3, [r3, #6]
 8002076:	461a      	mov	r2, r3
 8002078:	f002 ff98 	bl	8004fac <USB_HC_StartXfer>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop

08002088 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fc8c 	bl	80049bc <USB_GetMode>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 80fb 	bne.w	80022a2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fc4f 	bl	8004954 <USB_ReadInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80f1 	beq.w	80022a0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fc46 	bl	8004954 <USB_ReadInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020d2:	d104      	bne.n	80020de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 fc36 	bl	8004954 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020f2:	d104      	bne.n	80020fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f002 fc26 	bl	8004954 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800210e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002112:	d104      	bne.n	800211e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800211c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fc16 	bl	8004954 <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d103      	bne.n	800213a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fc08 	bl	8004954 <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800214a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800214e:	d120      	bne.n	8002192 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002158:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d113      	bne.n	8002192 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800216a:	2110      	movs	r1, #16
 800216c:	6938      	ldr	r0, [r7, #16]
 800216e:	f002 fafb 	bl	8004768 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002172:	6938      	ldr	r0, [r7, #16]
 8002174:	f002 fb2a 	bl	80047cc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7a5b      	ldrb	r3, [r3, #9]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d105      	bne.n	800218c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fd1c 	bl	8004bc4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f00b fd0f 	bl	800dbb0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fbdc 	bl	8004954 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a6:	d102      	bne.n	80021ae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f001 fd33 	bl	8003c14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fbce 	bl	8004954 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d106      	bne.n	80021d0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f00b fcd8 	bl	800db78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fbbd 	bl	8004954 <USB_ReadInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021e4:	d139      	bne.n	800225a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f958 	bl	80054a0 <USB_HC_ReadInterrupt>
 80021f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e025      	b.n	8002244 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d018      	beq.n	800223e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800221e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002222:	d106      	bne.n	8002232 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f905 	bl	800243a <HCD_HC_IN_IRQHandler>
 8002230:	e005      	b.n	800223e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 ff67 	bl	800310c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	795b      	ldrb	r3, [r3, #5]
 8002248:	461a      	mov	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4293      	cmp	r3, r2
 800224e:	d3d3      	bcc.n	80021f8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 fb78 	bl	8004954 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b10      	cmp	r3, #16
 800226c:	d101      	bne.n	8002272 <HAL_HCD_IRQHandler+0x1ea>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_HCD_IRQHandler+0x1ec>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d014      	beq.n	80022a2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 fbe4 	bl	8003a56 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0210 	orr.w	r2, r2, #16
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e000      	b.n	80022a2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80022a0:	bf00      	nop
    }
  }
}
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_HCD_Start+0x16>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e013      	b.n	80022e6 <HAL_HCD_Start+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fce0 	bl	8004c92 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 f9d8 	bl	800468c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_HCD_Stop+0x16>
 8002300:	2302      	movs	r3, #2
 8002302:	e00d      	b.n	8002320 <HAL_HCD_Stop+0x32>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fa33 	bl	800577c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fc82 	bl	8004c3e <USB_ResetPort>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	@ 0x4c
 8002360:	781b      	ldrb	r3, [r3, #0]
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3338      	adds	r3, #56	@ 0x38
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fcc4 	bl	8004d32 <USB_GetCurrentFrame>
 80023aa:	4603      	mov	r3, r0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fc9f 	bl	8004d04 <USB_GetHostSpeed>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	331a      	adds	r3, #26
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	331b      	adds	r3, #27
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3325      	adds	r3, #37	@ 0x25
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3324      	adds	r3, #36	@ 0x24
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fa8e 	bl	800497a <USB_ReadChInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11a      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	2304      	movs	r3, #4
 8002478:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	334d      	adds	r3, #77	@ 0x4d
 800248a:	2207      	movs	r2, #7
 800248c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f003 f813 	bl	80054c2 <USB_HC_Halt>
 800249c:	e09e      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fa67 	bl	800497a <USB_ReadChInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b6:	d11b      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	@ 0x4d
 80024dc:	2208      	movs	r2, #8
 80024de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 ffea 	bl	80054c2 <USB_HC_Halt>
 80024ee:	e075      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fa3e 	bl	800497a <USB_ReadChInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b08      	cmp	r3, #8
 8002506:	d11a      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2308      	movs	r3, #8
 8002518:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334d      	adds	r3, #77	@ 0x4d
 800252a:	2206      	movs	r2, #6
 800252c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f002 ffc3 	bl	80054c2 <USB_HC_Halt>
 800253c:	e04e      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fa17 	bl	800497a <USB_ReadChInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002556:	d11b      	bne.n	8002590 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800256a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	@ 0x4d
 800257c:	2209      	movs	r2, #9
 800257e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f002 ff9a 	bl	80054c2 <USB_HC_Halt>
 800258e:	e025      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f002 f9ee 	bl	800497a <USB_ReadChInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a4:	2b80      	cmp	r3, #128	@ 0x80
 80025a6:	d119      	bne.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	334d      	adds	r3, #77	@ 0x4d
 80025ca:	2207      	movs	r2, #7
 80025cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 ff73 	bl	80054c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 f9c8 	bl	800497a <USB_ReadChInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f4:	d112      	bne.n	800261c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 ff5f 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002616:	6093      	str	r3, [r2, #8]
 8002618:	f000 bd75 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f002 f9a8 	bl	800497a <USB_ReadChInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8128 	bne.w	8002886 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	2320      	movs	r3, #32
 8002646:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	331b      	adds	r3, #27
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d119      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	331b      	adds	r3, #27
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	440a      	add	r2, r1
 8002688:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800268c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002690:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	799b      	ldrb	r3, [r3, #6]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01b      	beq.n	80026d2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3330      	adds	r3, #48	@ 0x30
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	1ac9      	subs	r1, r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4403      	add	r3, r0
 80026ce:	3338      	adds	r3, #56	@ 0x38
 80026d0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	334d      	adds	r3, #77	@ 0x4d
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3344      	adds	r3, #68	@ 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2301      	movs	r3, #1
 800270a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3326      	adds	r3, #38	@ 0x26
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3326      	adds	r3, #38	@ 0x26
 8002732:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002734:	2b02      	cmp	r3, #2
 8002736:	d110      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f002 febe 	bl	80054c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	2310      	movs	r3, #16
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	e03d      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3326      	adds	r3, #38	@ 0x26
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d00a      	beq.n	8002786 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3326      	adds	r3, #38	@ 0x26
 8002780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002782:	2b01      	cmp	r3, #1
 8002784:	d127      	bne.n	80027d6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	0151      	lsls	r1, r2, #5
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	440a      	add	r2, r1
 800279c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80027a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334c      	adds	r3, #76	@ 0x4c
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	334c      	adds	r3, #76	@ 0x4c
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f00b f9fb 	bl	800dbcc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	799b      	ldrb	r3, [r3, #6]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d13b      	bne.n	8002856 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3338      	adds	r3, #56	@ 0x38
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4403      	add	r3, r0
 80027fe:	3328      	adds	r3, #40	@ 0x28
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	440b      	add	r3, r1
 8002804:	1e59      	subs	r1, r3, #1
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4403      	add	r3, r0
 8002814:	3328      	adds	r3, #40	@ 0x28
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8470 	beq.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	333c      	adds	r3, #60	@ 0x3c
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	f083 0301 	eor.w	r3, r3, #1
 800283e:	b2d8      	uxtb	r0, r3
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	333c      	adds	r3, #60	@ 0x3c
 800284e:	4602      	mov	r2, r0
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	f000 bc58 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	333c      	adds	r3, #60	@ 0x3c
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2d8      	uxtb	r0, r3
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	333c      	adds	r3, #60	@ 0x3c
 800287e:	4602      	mov	r2, r0
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	f000 bc40 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f002 f873 	bl	800497a <USB_ReadChInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d131      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	2320      	movs	r3, #32
 80028ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	331a      	adds	r3, #26
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	f040 841f 	bne.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	331b      	adds	r3, #27
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	@ 0x4d
 80028ec:	2203      	movs	r2, #3
 80028ee:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fde2 	bl	80054c2 <USB_HC_Halt>
 80028fe:	f000 bc02 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f002 f835 	bl	800497a <USB_ReadChInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 8305 	bne.w	8002f26 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2302      	movs	r3, #2
 800292c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	334d      	adds	r3, #77	@ 0x4d
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d114      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334d      	adds	r3, #77	@ 0x4d
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334c      	adds	r3, #76	@ 0x4c
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e2cc      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334d      	adds	r3, #77	@ 0x4d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d114      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	334d      	adds	r3, #77	@ 0x4d
 8002994:	2202      	movs	r2, #2
 8002996:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	334c      	adds	r3, #76	@ 0x4c
 80029a8:	2205      	movs	r2, #5
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e2ac      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	334d      	adds	r3, #77	@ 0x4d
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b07      	cmp	r3, #7
 80029c2:	d00b      	beq.n	80029dc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	@ 0x4d
 80029d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	f040 80a6 	bne.w	8002b28 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	@ 0x4d
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3344      	adds	r3, #68	@ 0x44
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4403      	add	r3, r0
 8002a10:	3344      	adds	r3, #68	@ 0x44
 8002a12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3344      	adds	r3, #68	@ 0x44
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d943      	bls.n	8002ab2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3344      	adds	r3, #68	@ 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	331a      	adds	r3, #26
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d123      	bne.n	8002a9c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	331b      	adds	r3, #27
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	331c      	adds	r3, #28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	@ 0x4c
 8002aac:	2204      	movs	r2, #4
 8002aae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ab0:	e229      	b.n	8002f06 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334c      	adds	r3, #76	@ 0x4c
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3326      	adds	r3, #38	@ 0x26
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3326      	adds	r3, #38	@ 0x26
 8002aec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	f040 8209 	bne.w	8002f06 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b26:	e1ee      	b.n	8002f06 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	@ 0x4d
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	f040 80c8 	bne.w	8002cd0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	334d      	adds	r3, #77	@ 0x4d
 8002b50:	2202      	movs	r2, #2
 8002b52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	331b      	adds	r3, #27
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 81ce 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3326      	adds	r3, #38	@ 0x26
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d16b      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3348      	adds	r3, #72	@ 0x48
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c59      	adds	r1, r3, #1
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3348      	adds	r3, #72	@ 0x48
 8002ba4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3348      	adds	r3, #72	@ 0x48
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d943      	bls.n	8002c44 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3348      	adds	r3, #72	@ 0x48
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	331b      	adds	r3, #27
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3344      	adds	r3, #68	@ 0x44
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d809      	bhi.n	8002c0e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331c      	adds	r3, #28
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	334c      	adds	r3, #76	@ 0x4c
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e014      	b.n	8002c6e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334c      	adds	r3, #76	@ 0x4c
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e009      	b.n	8002c6e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	334c      	adds	r3, #76	@ 0x4c
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3326      	adds	r3, #38	@ 0x26
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3326      	adds	r3, #38	@ 0x26
 8002c94:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	f040 8136 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cb2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e11b      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	@ 0x4d
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	f040 8081 	bne.w	8002dea <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	@ 0x4d
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	331b      	adds	r3, #27
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	f040 80fa 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	334c      	adds	r3, #76	@ 0x4c
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	0151      	lsls	r1, r2, #5
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d46:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d66:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d82:	f023 0320 	bic.w	r3, r3, #32
 8002d86:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3326      	adds	r3, #38	@ 0x26
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3326      	adds	r3, #38	@ 0x26
 8002dae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	f040 80a9 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dcc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dd4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e08e      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	334d      	adds	r3, #77	@ 0x4d
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d143      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334d      	adds	r3, #77	@ 0x4d
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334c      	adds	r3, #76	@ 0x4c
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3326      	adds	r3, #38	@ 0x26
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3326      	adds	r3, #38	@ 0x26
 8002e4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d159      	bne.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e03f      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334d      	adds	r3, #77	@ 0x4d
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d126      	bne.n	8002eec <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	334d      	adds	r3, #77	@ 0x4d
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	@ 0x44
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c59      	adds	r1, r3, #1
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	3344      	adds	r3, #68	@ 0x44
 8002ed4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	334c      	adds	r3, #76	@ 0x4c
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e00d      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334d      	adds	r3, #77	@ 0x4d
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	f000 8100 	beq.w	8003104 <HCD_HC_IN_IRQHandler+0xcca>
 8002f04:	e000      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f06:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334c      	adds	r3, #76	@ 0x4c
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f00a fe54 	bl	800dbcc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f24:	e0ef      	b.n	8003106 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fd23 	bl	800497a <USB_ReadChInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b40      	cmp	r3, #64	@ 0x40
 8002f3c:	d12f      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2340      	movs	r3, #64	@ 0x40
 8002f4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2205      	movs	r2, #5
 8002f62:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	331a      	adds	r3, #26
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3344      	adds	r3, #68	@ 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 fa93 	bl	80054c2 <USB_HC_Halt>
 8002f9c:	e0b3      	b.n	8003106 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fce7 	bl	800497a <USB_ReadChInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	f040 80a7 	bne.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3326      	adds	r3, #38	@ 0x26
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d11b      	bne.n	8003006 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3344      	adds	r3, #68	@ 0x44
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334d      	adds	r3, #77	@ 0x4d
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fa5f 	bl	80054c2 <USB_HC_Halt>
 8003004:	e03f      	b.n	8003086 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3326      	adds	r3, #38	@ 0x26
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3326      	adds	r3, #38	@ 0x26
 800302c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800302e:	2b02      	cmp	r3, #2
 8003030:	d129      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3344      	adds	r3, #68	@ 0x44
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	799b      	ldrb	r3, [r3, #6]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HCD_HC_IN_IRQHandler+0xc2a>
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	331b      	adds	r3, #27
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d110      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	334d      	adds	r3, #77	@ 0x4d
 8003074:	2204      	movs	r2, #4
 8003076:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f002 fa1e 	bl	80054c2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	331b      	adds	r3, #27
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d129      	bne.n	80030f0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	331b      	adds	r3, #27
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	0151      	lsls	r1, r2, #5
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	440a      	add	r2, r1
 80030c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ce:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e000      	b.n	8003106 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003104:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fc25 	bl	800497a <USB_ReadChInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d11b      	bne.n	8003172 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003146:	461a      	mov	r2, r3
 8003148:	2304      	movs	r3, #4
 800314a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	334d      	adds	r3, #77	@ 0x4d
 800315c:	2207      	movs	r2, #7
 800315e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f002 f9aa 	bl	80054c2 <USB_HC_Halt>
 800316e:	f000 bc6f 	b.w	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fbfd 	bl	800497a <USB_ReadChInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b20      	cmp	r3, #32
 8003188:	f040 8082 	bne.w	8003290 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003198:	461a      	mov	r2, r3
 800319a:	2320      	movs	r3, #32
 800319c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3319      	adds	r3, #25
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d124      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3319      	adds	r3, #25
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334c      	adds	r3, #76	@ 0x4c
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334d      	adds	r3, #77	@ 0x4d
 80031ec:	2203      	movs	r2, #3
 80031ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 f962 	bl	80054c2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	331a      	adds	r3, #26
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 841d 	bne.w	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	331b      	adds	r3, #27
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 8411 	bne.w	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3326      	adds	r3, #38	@ 0x26
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d009      	beq.n	8003258 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	331b      	adds	r3, #27
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f002 f924 	bl	80054c2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	@ 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e3df      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fb6e 	bl	800497a <USB_ReadChInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a8:	d111      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 f8fb 	bl	80054c2 <USB_HC_Halt>
 80032cc:	e3c0      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fb4f 	bl	800497a <USB_ReadChInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d168      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3344      	adds	r3, #68	@ 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fb39 	bl	800497a <USB_ReadChInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d112      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3319      	adds	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	2340      	movs	r3, #64	@ 0x40
 8003336:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	331b      	adds	r3, #27
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d019      	beq.n	8003382 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	331b      	adds	r3, #27
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	0151      	lsls	r1, r2, #5
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	440a      	add	r2, r1
 8003378:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800337c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003380:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2301      	movs	r3, #1
 8003392:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334d      	adds	r3, #77	@ 0x4d
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 f886 	bl	80054c2 <USB_HC_Halt>
 80033b6:	e34b      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 fada 	bl	800497a <USB_ReadChInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d139      	bne.n	8003444 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	2205      	movs	r2, #5
 80033e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	331a      	adds	r3, #26
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3319      	adds	r3, #25
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3344      	adds	r3, #68	@ 0x44
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f002 f849 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2340      	movs	r3, #64	@ 0x40
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	e305      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fa94 	bl	800497a <USB_ReadChInterrupts>
 8003452:	4603      	mov	r3, r0
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d11a      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	2308      	movs	r3, #8
 800346c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	334d      	adds	r3, #77	@ 0x4d
 800347e:	2206      	movs	r2, #6
 8003480:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f002 f819 	bl	80054c2 <USB_HC_Halt>
 8003490:	e2de      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fa6d 	bl	800497a <USB_ReadChInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d144      	bne.n	8003534 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	@ 0x44
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334d      	adds	r3, #77	@ 0x4d
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3319      	adds	r3, #25
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d114      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3318      	adds	r3, #24
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3319      	adds	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f001 ffd1 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352c:	461a      	mov	r2, r3
 800352e:	2310      	movs	r3, #16
 8003530:	6093      	str	r3, [r2, #8]
 8003532:	e28d      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fa1c 	bl	800497a <USB_ReadChInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b80      	cmp	r3, #128	@ 0x80
 800354a:	d169      	bne.n	8003620 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	799b      	ldrb	r3, [r3, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	334d      	adds	r3, #77	@ 0x4d
 8003564:	2207      	movs	r2, #7
 8003566:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f001 ffa6 	bl	80054c2 <USB_HC_Halt>
 8003576:	e049      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3344      	adds	r3, #68	@ 0x44
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4403      	add	r3, r0
 8003598:	3344      	adds	r3, #68	@ 0x44
 800359a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3344      	adds	r3, #68	@ 0x44
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d922      	bls.n	80035f8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3344      	adds	r3, #68	@ 0x44
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334c      	adds	r3, #76	@ 0x4c
 80035d6:	2204      	movs	r2, #4
 80035d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334c      	adds	r3, #76	@ 0x4c
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f00a faeb 	bl	800dbcc <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f6:	e009      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	334c      	adds	r3, #76	@ 0x4c
 8003608:	2202      	movs	r2, #2
 800360a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2380      	movs	r3, #128	@ 0x80
 800361c:	6093      	str	r3, [r2, #8]
 800361e:	e217      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f001 f9a6 	bl	800497a <USB_ReadChInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003638:	d11b      	bne.n	8003672 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334d      	adds	r3, #77	@ 0x4d
 800364a:	2209      	movs	r2, #9
 800364c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f001 ff33 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800366e:	6093      	str	r3, [r2, #8]
 8003670:	e1ee      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f97d 	bl	800497a <USB_ReadChInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	f040 81df 	bne.w	8003a4a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2302      	movs	r3, #2
 800369c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	334d      	adds	r3, #77	@ 0x4d
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 8093 	bne.w	80037dc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	@ 0x4d
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334c      	adds	r3, #76	@ 0x4c
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3326      	adds	r3, #38	@ 0x26
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d00b      	beq.n	800370c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3326      	adds	r3, #38	@ 0x26
 8003704:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	f040 8190 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	799b      	ldrb	r3, [r3, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	333d      	adds	r3, #61	@ 0x3d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2d8      	uxtb	r0, r3
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	333d      	adds	r3, #61	@ 0x3d
 800373c:	4602      	mov	r2, r0
 800373e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	799b      	ldrb	r3, [r3, #6]
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 8171 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3334      	adds	r3, #52	@ 0x34
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8165 	beq.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3334      	adds	r3, #52	@ 0x34
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4403      	add	r3, r0
 8003782:	3328      	adds	r3, #40	@ 0x28
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	440b      	add	r3, r1
 8003788:	1e59      	subs	r1, r3, #1
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4403      	add	r3, r0
 8003798:	3328      	adds	r3, #40	@ 0x28
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 813f 	beq.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	333d      	adds	r3, #61	@ 0x3d
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2d8      	uxtb	r0, r3
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	333d      	adds	r3, #61	@ 0x3d
 80037d6:	4602      	mov	r2, r0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e127      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	@ 0x4d
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d120      	bne.n	8003834 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334d      	adds	r3, #77	@ 0x4d
 8003802:	2202      	movs	r2, #2
 8003804:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	331b      	adds	r3, #27
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 8107 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	334c      	adds	r3, #76	@ 0x4c
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e0fb      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	334d      	adds	r3, #77	@ 0x4d
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d13a      	bne.n	80038c0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	334d      	adds	r3, #77	@ 0x4d
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	334c      	adds	r3, #76	@ 0x4c
 800386e:	2202      	movs	r2, #2
 8003870:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	331b      	adds	r3, #27
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 80d1 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	331b      	adds	r3, #27
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038bc:	6053      	str	r3, [r2, #4]
 80038be:	e0b5      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334d      	adds	r3, #77	@ 0x4d
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d114      	bne.n	8003900 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334d      	adds	r3, #77	@ 0x4d
 80038e6:	2202      	movs	r2, #2
 80038e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	334c      	adds	r3, #76	@ 0x4c
 80038fa:	2202      	movs	r2, #2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e095      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	334d      	adds	r3, #77	@ 0x4d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d114      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	334d      	adds	r3, #77	@ 0x4d
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	334c      	adds	r3, #76	@ 0x4c
 800393a:	2205      	movs	r2, #5
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e075      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	334d      	adds	r3, #77	@ 0x4d
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b07      	cmp	r3, #7
 8003954:	d00a      	beq.n	800396c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	334d      	adds	r3, #77	@ 0x4d
 8003966:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003968:	2b09      	cmp	r3, #9
 800396a:	d170      	bne.n	8003a4e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	334d      	adds	r3, #77	@ 0x4d
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3344      	adds	r3, #68	@ 0x44
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4403      	add	r3, r0
 80039a0:	3344      	adds	r3, #68	@ 0x44
 80039a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3344      	adds	r3, #68	@ 0x44
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d914      	bls.n	80039e4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3344      	adds	r3, #68	@ 0x44
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	334c      	adds	r3, #76	@ 0x4c
 80039de:	2204      	movs	r2, #4
 80039e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039e2:	e022      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	334c      	adds	r3, #76	@ 0x4c
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a0e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a16:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a2a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334c      	adds	r3, #76	@ 0x4c
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f00a f8c2 	bl	800dbcc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a48:	e002      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	@ 0x28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	0c5b      	lsrs	r3, r3, #17
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d004      	beq.n	8003a9c <HCD_RXQLVL_IRQHandler+0x46>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	f000 80b6 	beq.w	8003c06 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a9a:	e0b7      	b.n	8003c0c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80b3 	beq.w	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	332c      	adds	r3, #44	@ 0x2c
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a7 	beq.w	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3338      	adds	r3, #56	@ 0x38
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	18d1      	adds	r1, r2, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	3334      	adds	r3, #52	@ 0x34
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	f200 8083 	bhi.w	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	332c      	adds	r3, #44	@ 0x2c
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	b292      	uxth	r2, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	f000 fecd 	bl	80048a4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	332c      	adds	r3, #44	@ 0x2c
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	18d1      	adds	r1, r2, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	332c      	adds	r3, #44	@ 0x2c
 8003b30:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3338      	adds	r3, #56	@ 0x38
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	18d1      	adds	r1, r2, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4403      	add	r3, r0
 8003b56:	3338      	adds	r3, #56	@ 0x38
 8003b58:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	0cdb      	lsrs	r3, r3, #19
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3328      	adds	r3, #40	@ 0x28
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d13f      	bne.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03c      	beq.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ba6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	333c      	adds	r3, #60	@ 0x3c
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f083 0301 	eor.w	r3, r3, #1
 8003bd8:	b2d8      	uxtb	r0, r3
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	333c      	adds	r3, #60	@ 0x3c
 8003bea:	4602      	mov	r2, r0
 8003bec:	701a      	strb	r2, [r3, #0]
      break;
 8003bee:	e00c      	b.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334c      	adds	r3, #76	@ 0x4c
 8003c00:	2204      	movs	r2, #4
 8003c02:	701a      	strb	r2, [r3, #0]
      break;
 8003c04:	e001      	b.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003c0a:	bf00      	nop
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3728      	adds	r7, #40	@ 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003c40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d10b      	bne.n	8003c64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f009 ff9c 	bl	800db94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f043 0302 	orr.w	r3, r3, #2
 8003c62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d132      	bne.n	8003cd4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d126      	bne.n	8003cce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7a5b      	ldrb	r3, [r3, #9]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d113      	bne.n	8003cb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c92:	d106      	bne.n	8003ca2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff92 	bl	8004bc4 <USB_InitFSLSPClkSel>
 8003ca0:	e011      	b.n	8003cc6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 ff8b 	bl	8004bc4 <USB_InitFSLSPClkSel>
 8003cae:	e00a      	b.n	8003cc6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	79db      	ldrb	r3, [r3, #7]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003cc4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f009 ff8e 	bl	800dbe8 <HAL_HCD_PortEnabled_Callback>
 8003ccc:	e002      	b.n	8003cd4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f009 ff98 	bl	800dc04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d103      	bne.n	8003ce6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f043 0320 	orr.w	r3, r3, #32
 8003ce4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e267      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d075      	beq.n	8003e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1a:	4b88      	ldr	r3, [pc, #544]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d26:	4b85      	ldr	r3, [pc, #532]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d112      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b82      	ldr	r3, [pc, #520]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	4b7e      	ldr	r3, [pc, #504]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05b      	beq.n	8003e04 <HAL_RCC_OscConfig+0x108>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d157      	bne.n	8003e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e242      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x74>
 8003d62:	4b76      	ldr	r3, [pc, #472]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x98>
 8003d7a:	4b70      	ldr	r3, [pc, #448]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6f      	ldr	r2, [pc, #444]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6d      	ldr	r3, [pc, #436]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d94:	4b69      	ldr	r3, [pc, #420]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a68      	ldr	r2, [pc, #416]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b66      	ldr	r3, [pc, #408]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a65      	ldr	r2, [pc, #404]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fd fb90 	bl	80014d8 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fb8c 	bl	80014d8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e207      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b5b      	ldr	r3, [pc, #364]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xc0>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fb7c 	bl	80014d8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fb78 	bl	80014d8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1f3      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b51      	ldr	r3, [pc, #324]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0xe8>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e12:	4b4a      	ldr	r3, [pc, #296]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b44      	ldr	r3, [pc, #272]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b41      	ldr	r3, [pc, #260]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x152>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1c7      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4937      	ldr	r1, [pc, #220]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e03a      	b.n	8003eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b34      	ldr	r3, [pc, #208]	@ (8003f40 <HAL_RCC_OscConfig+0x244>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd fb31 	bl	80014d8 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fd fb2d 	bl	80014d8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1a8      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b28      	ldr	r3, [pc, #160]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4925      	ldr	r1, [pc, #148]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
 8003eac:	e015      	b.n	8003eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <HAL_RCC_OscConfig+0x244>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fb10 	bl	80014d8 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fb0c 	bl	80014d8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e187      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d036      	beq.n	8003f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b15      	ldr	r3, [pc, #84]	@ (8003f44 <HAL_RCC_OscConfig+0x248>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd faf0 	bl	80014d8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fd faec 	bl	80014d8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e167      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x200>
 8003f1a:	e01b      	b.n	8003f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1c:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_RCC_OscConfig+0x248>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fd fad9 	bl	80014d8 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	e00e      	b.n	8003f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fd fad5 	bl	80014d8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d907      	bls.n	8003f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e150      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	42470000 	.word	0x42470000
 8003f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b88      	ldr	r3, [pc, #544]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ea      	bne.n	8003f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8097 	beq.w	8004090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b81      	ldr	r3, [pc, #516]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b7d      	ldr	r3, [pc, #500]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f82:	4b7a      	ldr	r3, [pc, #488]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b77      	ldr	r3, [pc, #476]	@ (8004170 <HAL_RCC_OscConfig+0x474>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b74      	ldr	r3, [pc, #464]	@ (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a73      	ldr	r2, [pc, #460]	@ (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fd fa95 	bl	80014d8 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fd fa91 	bl	80014d8 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e10c      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2ea>
 8003fd8:	4b64      	ldr	r3, [pc, #400]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a63      	ldr	r2, [pc, #396]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe4:	e01c      	b.n	8004020 <HAL_RCC_OscConfig+0x324>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x30c>
 8003fee:	4b5f      	ldr	r3, [pc, #380]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	@ 0x70
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0x324>
 8004008:	4b58      	ldr	r3, [pc, #352]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a57      	ldr	r2, [pc, #348]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
 8004014:	4b55      	ldr	r3, [pc, #340]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a54      	ldr	r2, [pc, #336]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fd fa56 	bl	80014d8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fd fa52 	bl	80014d8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0cb      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	4b49      	ldr	r3, [pc, #292]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <HAL_RCC_OscConfig+0x334>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fd fa40 	bl	80014d8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd fa3c 	bl	80014d8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0b5      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004072:	4b3e      	ldr	r3, [pc, #248]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ee      	bne.n	800405c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b39      	ldr	r3, [pc, #228]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	4a38      	ldr	r2, [pc, #224]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800408e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a1 	beq.w	80041dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800409a:	4b34      	ldr	r3, [pc, #208]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d05c      	beq.n	8004160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d141      	bne.n	8004132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_RCC_OscConfig+0x478>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fa10 	bl	80014d8 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd fa0c 	bl	80014d8 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e087      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	4b27      	ldr	r3, [pc, #156]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	019b      	lsls	r3, r3, #6
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	491b      	ldr	r1, [pc, #108]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_RCC_OscConfig+0x478>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7fd f9e5 	bl	80014d8 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004112:	f7fd f9e1 	bl	80014d8 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e05c      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x416>
 8004130:	e054      	b.n	80041dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_RCC_OscConfig+0x478>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd f9ce 	bl	80014d8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd f9ca 	bl	80014d8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e045      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCC_OscConfig+0x470>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x444>
 800415e:	e03d      	b.n	80041dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e038      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
 800416c:	40023800 	.word	0x40023800
 8004170:	40007000 	.word	0x40007000
 8004174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x4ec>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d028      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d121      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d11a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d111      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800

080041ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0cc      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b68      	ldr	r3, [pc, #416]	@ (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d90c      	bls.n	8004228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b65      	ldr	r3, [pc, #404]	@ (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b63      	ldr	r3, [pc, #396]	@ (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b8      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004240:	4b59      	ldr	r3, [pc, #356]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a58      	ldr	r2, [pc, #352]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800424a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004258:	4b53      	ldr	r3, [pc, #332]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a52      	ldr	r2, [pc, #328]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b50      	ldr	r3, [pc, #320]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	494d      	ldr	r1, [pc, #308]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d044      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e07f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b3f      	ldr	r3, [pc, #252]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3b      	ldr	r3, [pc, #236]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e067      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b37      	ldr	r3, [pc, #220]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4934      	ldr	r1, [pc, #208]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fd f8fc 	bl	80014d8 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fd f8f8 	bl	80014d8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e04f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2b      	ldr	r3, [pc, #172]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b25      	ldr	r3, [pc, #148]	@ (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d20c      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b22      	ldr	r3, [pc, #136]	@ (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e032      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004340:	4b19      	ldr	r3, [pc, #100]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4916      	ldr	r1, [pc, #88]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435e:	4b12      	ldr	r3, [pc, #72]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	490e      	ldr	r1, [pc, #56]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004372:	f000 f821 	bl	80043b8 <HAL_RCC_GetSysClockFreq>
 8004376:	4602      	mov	r2, r0
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	490a      	ldr	r1, [pc, #40]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	5ccb      	ldrb	r3, [r1, r3]
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	4a09      	ldr	r2, [pc, #36]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800438e:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fd f85c 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023c00 	.word	0x40023c00
 80043a8:	40023800 	.word	0x40023800
 80043ac:	0800eeac 	.word	0x0800eeac
 80043b0:	20000000 	.word	0x20000000
 80043b4:	20000004 	.word	0x20000004

080043b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b094      	sub	sp, #80	@ 0x50
 80043be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c4:	2300      	movs	r3, #0
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c8:	2300      	movs	r3, #0
 80043ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d0:	4b79      	ldr	r3, [pc, #484]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d00d      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x40>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	f200 80e1 	bhi.w	80045a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x34>
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ea:	e0db      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b73      	ldr	r3, [pc, #460]	@ (80045bc <HAL_RCC_GetSysClockFreq+0x204>)
 80043ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043f0:	e0db      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f2:	4b73      	ldr	r3, [pc, #460]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043f6:	e0d8      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f8:	4b6f      	ldr	r3, [pc, #444]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004400:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004402:	4b6d      	ldr	r3, [pc, #436]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d063      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	2200      	movs	r2, #0
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004418:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	633b      	str	r3, [r7, #48]	@ 0x30
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
 8004426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800442a:	4622      	mov	r2, r4
 800442c:	462b      	mov	r3, r5
 800442e:	f04f 0000 	mov.w	r0, #0
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	0159      	lsls	r1, r3, #5
 8004438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800443c:	0150      	lsls	r0, r2, #5
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4621      	mov	r1, r4
 8004444:	1a51      	subs	r1, r2, r1
 8004446:	6139      	str	r1, [r7, #16]
 8004448:	4629      	mov	r1, r5
 800444a:	eb63 0301 	sbc.w	r3, r3, r1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800445c:	4659      	mov	r1, fp
 800445e:	018b      	lsls	r3, r1, #6
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004466:	4651      	mov	r1, sl
 8004468:	018a      	lsls	r2, r1, #6
 800446a:	4651      	mov	r1, sl
 800446c:	ebb2 0801 	subs.w	r8, r2, r1
 8004470:	4659      	mov	r1, fp
 8004472:	eb63 0901 	sbc.w	r9, r3, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	4623      	mov	r3, r4
 8004490:	eb18 0303 	adds.w	r3, r8, r3
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	462b      	mov	r3, r5
 8004498:	eb49 0303 	adc.w	r3, r9, r3
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044aa:	4629      	mov	r1, r5
 80044ac:	024b      	lsls	r3, r1, #9
 80044ae:	4621      	mov	r1, r4
 80044b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044b4:	4621      	mov	r1, r4
 80044b6:	024a      	lsls	r2, r1, #9
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044be:	2200      	movs	r2, #0
 80044c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044c8:	f7fc f9f0 	bl	80008ac <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4613      	mov	r3, r2
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d4:	e058      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d6:	4b38      	ldr	r3, [pc, #224]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	099b      	lsrs	r3, r3, #6
 80044dc:	2200      	movs	r2, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	4611      	mov	r1, r2
 80044e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	0159      	lsls	r1, r3, #5
 80044fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004502:	0150      	lsls	r0, r2, #5
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4641      	mov	r1, r8
 800450a:	ebb2 0a01 	subs.w	sl, r2, r1
 800450e:	4649      	mov	r1, r9
 8004510:	eb63 0b01 	sbc.w	fp, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004528:	ebb2 040a 	subs.w	r4, r2, sl
 800452c:	eb63 050b 	sbc.w	r5, r3, fp
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	00eb      	lsls	r3, r5, #3
 800453a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453e:	00e2      	lsls	r2, r4, #3
 8004540:	4614      	mov	r4, r2
 8004542:	461d      	mov	r5, r3
 8004544:	4643      	mov	r3, r8
 8004546:	18e3      	adds	r3, r4, r3
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	464b      	mov	r3, r9
 800454c:	eb45 0303 	adc.w	r3, r5, r3
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455e:	4629      	mov	r1, r5
 8004560:	028b      	lsls	r3, r1, #10
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004568:	4621      	mov	r1, r4
 800456a:	028a      	lsls	r2, r1, #10
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004572:	2200      	movs	r2, #0
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	61fa      	str	r2, [r7, #28]
 8004578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457c:	f7fc f996 	bl	80008ac <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004588:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800459a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_RCC_GetSysClockFreq+0x204>)
 80045a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3750      	adds	r7, #80	@ 0x50
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	007a1200 	.word	0x007a1200

080045c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c4:	b084      	sub	sp, #16
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	f107 001c 	add.w	r0, r7, #28
 80045d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d123      	bne.n	8004626 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80045f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9dc 	bl	80049d8 <USB_CoreReset>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e01b      	b.n	800465e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9d0 	bl	80049d8 <USB_CoreReset>
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800463c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004648:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004650:	e005      	b.n	800465e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004656:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800465e:	7fbb      	ldrb	r3, [r7, #30]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10b      	bne.n	800467c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f043 0206 	orr.w	r2, r3, #6
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr

0800468c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d115      	bne.n	800471e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046fe:	200a      	movs	r0, #10
 8004700:	f7fc fef6 	bl	80014f0 <HAL_Delay>
      ms += 10U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	330a      	adds	r3, #10
 8004708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f956 	bl	80049bc <USB_GetMode>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d01e      	beq.n	8004754 <USB_SetCurrentMode+0x84>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2bc7      	cmp	r3, #199	@ 0xc7
 800471a:	d9f0      	bls.n	80046fe <USB_SetCurrentMode+0x2e>
 800471c:	e01a      	b.n	8004754 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d115      	bne.n	8004750 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004730:	200a      	movs	r0, #10
 8004732:	f7fc fedd 	bl	80014f0 <HAL_Delay>
      ms += 10U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	330a      	adds	r3, #10
 800473a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f93d 	bl	80049bc <USB_GetMode>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <USB_SetCurrentMode+0x84>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2bc7      	cmp	r3, #199	@ 0xc7
 800474c:	d9f0      	bls.n	8004730 <USB_SetCurrentMode+0x60>
 800474e:	e001      	b.n	8004754 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e005      	b.n	8004760 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2bc8      	cmp	r3, #200	@ 0xc8
 8004758:	d101      	bne.n	800475e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004782:	d901      	bls.n	8004788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e01b      	b.n	80047c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	daf2      	bge.n	8004776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	019b      	lsls	r3, r3, #6
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ac:	d901      	bls.n	80047b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e006      	b.n	80047c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d0f0      	beq.n	80047a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047e4:	d901      	bls.n	80047ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e018      	b.n	800481c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	daf2      	bge.n	80047d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2210      	movs	r2, #16
 80047fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004808:	d901      	bls.n	800480e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e006      	b.n	800481c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b10      	cmp	r3, #16
 8004818:	d0f0      	beq.n	80047fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	@ 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	460b      	mov	r3, r1
 8004838:	71fb      	strb	r3, [r7, #7]
 800483a:	4613      	mov	r3, r2
 800483c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004846:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d123      	bne.n	8004896 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800484e:	88bb      	ldrh	r3, [r7, #4]
 8004850:	3303      	adds	r3, #3
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e018      	b.n	800488e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	031a      	lsls	r2, r3, #12
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4413      	add	r3, r2
 8004864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004868:	461a      	mov	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3301      	adds	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d3e2      	bcc.n	800485c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3724      	adds	r7, #36	@ 0x24
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b08b      	sub	sp, #44	@ 0x2c
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	e014      	b.n	80048fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	601a      	str	r2, [r3, #0]
    pDest++;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	3301      	adds	r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	3301      	adds	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	3301      	adds	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	3301      	adds	r3, #1
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	6a3a      	ldr	r2, [r7, #32]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e6      	bcc.n	80048d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004902:	8bfb      	ldrh	r3, [r7, #30]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01e      	beq.n	8004946 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004912:	461a      	mov	r2, r3
 8004914:	f107 0310 	add.w	r3, r7, #16
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
 8004928:	b2da      	uxtb	r2, r3
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	701a      	strb	r2, [r3, #0]
      i++;
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	3301      	adds	r3, #1
 8004932:	623b      	str	r3, [r7, #32]
      pDest++;
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	3301      	adds	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800493a:	8bfb      	ldrh	r3, [r7, #30]
 800493c:	3b01      	subs	r3, #1
 800493e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004940:	8bfb      	ldrh	r3, [r7, #30]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ea      	bne.n	800491c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004948:	4618      	mov	r0, r3
 800494a:	372c      	adds	r7, #44	@ 0x2c
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800496c:	68fb      	ldr	r3, [r7, #12]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049ae:	68bb      	ldr	r3, [r7, #8]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f003 0301 	and.w	r3, r3, #1
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049f0:	d901      	bls.n	80049f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e01b      	b.n	8004a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	daf2      	bge.n	80049e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a1a:	d901      	bls.n	8004a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d0f0      	beq.n	8004a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10a      	bne.n	8004ab0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e014      	b.n	8004ada <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e009      	b.n	8004ada <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ada:	2110      	movs	r1, #16
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff fe43 	bl	8004768 <USB_FlushTxFifo>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fe6d 	bl	80047cc <USB_FlushRxFifo>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	e015      	b.n	8004b2e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b32:	461a      	mov	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d3e3      	bcc.n	8004b02 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295
 8004b46:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a18      	ldr	r2, [pc, #96]	@ (8004bac <USB_HostInit+0x170>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10b      	bne.n	8004b68 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b56:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <USB_HostInit+0x174>)
 8004b5c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a14      	ldr	r2, [pc, #80]	@ (8004bb4 <USB_HostInit+0x178>)
 8004b62:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004b66:	e009      	b.n	8004b7c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2280      	movs	r2, #128	@ 0x80
 8004b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a11      	ldr	r2, [pc, #68]	@ (8004bb8 <USB_HostInit+0x17c>)
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a11      	ldr	r2, [pc, #68]	@ (8004bbc <USB_HostInit+0x180>)
 8004b78:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f043 0210 	orr.w	r2, r3, #16
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc0 <USB_HostInit+0x184>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba8:	b004      	add	sp, #16
 8004baa:	4770      	bx	lr
 8004bac:	40040000 	.word	0x40040000
 8004bb0:	01000200 	.word	0x01000200
 8004bb4:	00e00300 	.word	0x00e00300
 8004bb8:	00600080 	.word	0x00600080
 8004bbc:	004000e0 	.word	0x004000e0
 8004bc0:	a3200008 	.word	0xa3200008

08004bc4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d107      	bne.n	8004c16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e00c      	b.n	8004c30 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d107      	bne.n	8004c2c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c22:	461a      	mov	r2, r3
 8004c24:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004c28:	6053      	str	r3, [r2, #4]
 8004c2a:	e001      	b.n	8004c30 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004c5e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c6e:	2064      	movs	r0, #100	@ 0x64
 8004c70:	f7fc fc3e 	bl	80014f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c82:	200a      	movs	r0, #10
 8004c84:	f7fc fc34 	bl	80014f0 <HAL_Delay>

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004cb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <USB_DriveVbus+0x44>
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cd4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce0:	d109      	bne.n	8004cf6 <USB_DriveVbus+0x64>
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cf4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0c5b      	lsrs	r3, r3, #17
 8004d22:	f003 0303 	and.w	r3, r3, #3
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	b29b      	uxth	r3, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	461a      	mov	r2, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	70fb      	strb	r3, [r7, #3]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70bb      	strb	r3, [r7, #2]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d82:	461a      	mov	r2, r3
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
 8004d88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d87c      	bhi.n	8004e8c <USB_HC_Init+0x138>
 8004d92:	a201      	add	r2, pc, #4	@ (adr r2, 8004d98 <USB_HC_Init+0x44>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004e4f 	.word	0x08004e4f
 8004da0:	08004da9 	.word	0x08004da9
 8004da4:	08004e11 	.word	0x08004e11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db4:	461a      	mov	r2, r3
 8004db6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004dba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004dbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	da10      	bge.n	8004de6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004de4:	e055      	b.n	8004e92 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa8 <USB_HC_Init+0x254>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d151      	bne.n	8004e92 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004e0c:	60d3      	str	r3, [r2, #12]
      break;
 8004e0e:	e040      	b.n	8004e92 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004e22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da34      	bge.n	8004e96 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e4c:	e023      	b.n	8004e96 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f240 2325 	movw	r3, #549	@ 0x225
 8004e60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da17      	bge.n	8004e9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e84:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004e88:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e8a:	e006      	b.n	8004e9a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77fb      	strb	r3, [r7, #31]
      break;
 8004e90:	e004      	b.n	8004e9c <USB_HC_Init+0x148>
      break;
 8004e92:	bf00      	nop
 8004e94:	e002      	b.n	8004e9c <USB_HC_Init+0x148>
      break;
 8004e96:	bf00      	nop
 8004e98:	e000      	b.n	8004e9c <USB_HC_Init+0x148>
      break;
 8004e9a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	2101      	movs	r1, #1
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	6939      	ldr	r1, [r7, #16]
 8004ee4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ef8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da03      	bge.n	8004f08 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e001      	b.n	8004f0c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fef9 	bl	8004d04 <USB_GetHostSpeed>
 8004f12:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d106      	bne.n	8004f2a <USB_HC_Init+0x1d6>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d003      	beq.n	8004f2a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e001      	b.n	8004f2e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f2e:	787b      	ldrb	r3, [r7, #1]
 8004f30:	059b      	lsls	r3, r3, #22
 8004f32:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f36:	78bb      	ldrb	r3, [r7, #2]
 8004f38:	02db      	lsls	r3, r3, #11
 8004f3a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f44:	049b      	lsls	r3, r3, #18
 8004f46:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004f4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f52:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004f68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f6c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d003      	beq.n	8004f7e <USB_HC_Init+0x22a>
 8004f76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10f      	bne.n	8004f9e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40040000 	.word	0x40040000

08004fac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08c      	sub	sp, #48	@ 0x30
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fc8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8005144 <USB_HC_StartXfer+0x198>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d12f      	bne.n	8005032 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d11c      	bne.n	8005012 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	7c9b      	ldrb	r3, [r3, #18]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <USB_HC_StartXfer+0x3c>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	7c9b      	ldrb	r3, [r3, #18]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d124      	bne.n	8005032 <USB_HC_StartXfer+0x86>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	799b      	ldrb	r3, [r3, #6]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d120      	bne.n	8005032 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	440a      	add	r2, r1
 8005006:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60d3      	str	r3, [r2, #12]
 8005010:	e00f      	b.n	8005032 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	791b      	ldrb	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <USB_HC_StartXfer+0x86>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d107      	bne.n	8005032 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	4619      	mov	r1, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fb6b 	bl	8005704 <USB_DoPing>
        return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e232      	b.n	8005498 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	799b      	ldrb	r3, [r3, #6]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d158      	bne.n	80050ec <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800503a:	2301      	movs	r3, #1
 800503c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	78db      	ldrb	r3, [r3, #3]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005046:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	8a92      	ldrh	r2, [r2, #20]
 800504c:	fb03 f202 	mul.w	r2, r3, r2
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61da      	str	r2, [r3, #28]
 8005054:	e07c      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	7c9b      	ldrb	r3, [r3, #18]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d130      	bne.n	80050c0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	2bbc      	cmp	r3, #188	@ 0xbc
 8005064:	d918      	bls.n	8005098 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	8a9b      	ldrh	r3, [r3, #20]
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d003      	beq.n	8005088 <USB_HC_StartXfer+0xdc>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d103      	bne.n	8005090 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2202      	movs	r2, #2
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	e05f      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2201      	movs	r2, #1
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e05b      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d007      	beq.n	80050b8 <USB_HC_StartXfer+0x10c>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d003      	beq.n	80050b8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2204      	movs	r2, #4
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	e04b      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2203      	movs	r2, #3
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	e047      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10d      	bne.n	80050e2 <USB_HC_StartXfer+0x136>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	8a92      	ldrh	r2, [r2, #20]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d907      	bls.n	80050e2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	8a92      	ldrh	r2, [r2, #20]
 80050d8:	fb03 f202 	mul.w	r2, r3, r2
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61da      	str	r2, [r3, #28]
 80050e0:	e036      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61da      	str	r2, [r3, #28]
 80050ea:	e031      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d018      	beq.n	8005126 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	8a92      	ldrh	r2, [r2, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	3b01      	subs	r3, #1
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	8a92      	ldrh	r2, [r2, #20]
 8005104:	fbb3 f3f2 	udiv	r3, r3, r2
 8005108:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800510a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800510c:	8b7b      	ldrh	r3, [r7, #26]
 800510e:	429a      	cmp	r2, r3
 8005110:	d90b      	bls.n	800512a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005116:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	8a92      	ldrh	r2, [r2, #20]
 800511c:	fb03 f202 	mul.w	r2, r3, r2
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	61da      	str	r2, [r3, #28]
 8005124:	e001      	b.n	800512a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005126:	2301      	movs	r3, #1
 8005128:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005132:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	8a92      	ldrh	r2, [r2, #20]
 8005138:	fb03 f202 	mul.w	r2, r3, r2
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	61da      	str	r2, [r3, #28]
 8005140:	e006      	b.n	8005150 <USB_HC_StartXfer+0x1a4>
 8005142:	bf00      	nop
 8005144:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005158:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800515a:	04d9      	lsls	r1, r3, #19
 800515c:	4ba3      	ldr	r3, [pc, #652]	@ (80053ec <USB_HC_StartXfer+0x440>)
 800515e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005160:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	7d9b      	ldrb	r3, [r3, #22]
 8005166:	075b      	lsls	r3, r3, #29
 8005168:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800516c:	69f9      	ldr	r1, [r7, #28]
 800516e:	0148      	lsls	r0, r1, #5
 8005170:	6a39      	ldr	r1, [r7, #32]
 8005172:	4401      	add	r1, r0
 8005174:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005178:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800517a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6999      	ldr	r1, [r3, #24]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005192:	460a      	mov	r2, r1
 8005194:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	7e7b      	ldrb	r3, [r7, #25]
 80051de:	075b      	lsls	r3, r3, #29
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	0148      	lsls	r0, r1, #5
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	4401      	add	r1, r0
 80051e8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	799b      	ldrb	r3, [r3, #6]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 80c3 	bne.w	8005380 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	7c5b      	ldrb	r3, [r3, #17]
 80051fe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005204:	4313      	orrs	r3, r2
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	440a      	add	r2, r1
 800520e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005216:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	440a      	add	r2, r1
 800522e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005232:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005236:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	79db      	ldrb	r3, [r3, #7]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d123      	bne.n	8005288 <USB_HC_StartXfer+0x2dc>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11f      	bne.n	8005288 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005266:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	6a3a      	ldr	r2, [r7, #32]
 800527c:	440a      	add	r2, r1
 800527e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005286:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	7c9b      	ldrb	r3, [r3, #18]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d003      	beq.n	8005298 <USB_HC_StartXfer+0x2ec>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	7c9b      	ldrb	r3, [r3, #18]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d117      	bne.n	80052c8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800529c:	2b01      	cmp	r3, #1
 800529e:	d113      	bne.n	80052c8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	78db      	ldrb	r3, [r3, #3]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10f      	bne.n	80052c8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	7c9b      	ldrb	r3, [r3, #18]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d162      	bne.n	8005396 <USB_HC_StartXfer+0x3ea>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d15e      	bne.n	8005396 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	3b01      	subs	r3, #1
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d858      	bhi.n	8005394 <USB_HC_StartXfer+0x3e8>
 80052e2:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <USB_HC_StartXfer+0x33c>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	0800531b 	.word	0x0800531b
 80052f0:	0800533d 	.word	0x0800533d
 80052f4:	0800535f 	.word	0x0800535f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	6a3a      	ldr	r2, [r7, #32]
 800530c:	440a      	add	r2, r1
 800530e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005316:	6053      	str	r3, [r2, #4]
          break;
 8005318:	e03d      	b.n	8005396 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	440a      	add	r2, r1
 8005330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005334:	f043 030e 	orr.w	r3, r3, #14
 8005338:	6053      	str	r3, [r2, #4]
          break;
 800533a:	e02c      	b.n	8005396 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	440a      	add	r2, r1
 8005352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800535a:	6053      	str	r3, [r2, #4]
          break;
 800535c:	e01b      	b.n	8005396 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	440a      	add	r2, r1
 8005374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005378:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800537c:	6053      	str	r3, [r2, #4]
          break;
 800537e:	e00a      	b.n	8005396 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	4413      	add	r3, r2
 8005388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800538c:	461a      	mov	r2, r3
 800538e:	2300      	movs	r3, #0
 8005390:	6053      	str	r3, [r2, #4]
 8005392:	e000      	b.n	8005396 <USB_HC_StartXfer+0x3ea>
          break;
 8005394:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ac:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e003      	b.n	80053c8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053c6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053ce:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053dc:	461a      	mov	r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e055      	b.n	8005498 <USB_HC_StartXfer+0x4ec>
 80053ec:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	78db      	ldrb	r3, [r3, #3]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d14e      	bne.n	8005496 <USB_HC_StartXfer+0x4ea>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d04a      	beq.n	8005496 <USB_HC_StartXfer+0x4ea>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	79db      	ldrb	r3, [r3, #7]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d146      	bne.n	8005496 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	7c9b      	ldrb	r3, [r3, #18]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d831      	bhi.n	8005474 <USB_HC_StartXfer+0x4c8>
 8005410:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <USB_HC_StartXfer+0x46c>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	08005429 	.word	0x08005429
 800541c:	0800544d 	.word	0x0800544d
 8005420:	08005429 	.word	0x08005429
 8005424:	0800544d 	.word	0x0800544d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	3303      	adds	r3, #3
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005432:	8afa      	ldrh	r2, [r7, #22]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	b29b      	uxth	r3, r3
 800543a:	429a      	cmp	r2, r3
 800543c:	d91c      	bls.n	8005478 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]
        }
        break;
 800544a:	e015      	b.n	8005478 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	3303      	adds	r3, #3
 8005452:	089b      	lsrs	r3, r3, #2
 8005454:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005456:	8afa      	ldrh	r2, [r7, #22]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	b29b      	uxth	r3, r3
 8005462:	429a      	cmp	r2, r3
 8005464:	d90a      	bls.n	800547c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	619a      	str	r2, [r3, #24]
        }
        break;
 8005472:	e003      	b.n	800547c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005474:	bf00      	nop
 8005476:	e002      	b.n	800547e <USB_HC_StartXfer+0x4d2>
        break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <USB_HC_StartXfer+0x4d2>
        break;
 800547c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	785a      	ldrb	r2, [r3, #1]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	b29b      	uxth	r3, r3
 800548c:	2000      	movs	r0, #0
 800548e:	9000      	str	r0, [sp, #0]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff f9c9 	bl	8004828 <USB_WritePacket>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	@ 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	b29b      	uxth	r3, r3
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b089      	sub	sp, #36	@ 0x24
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	0c9b      	lsrs	r3, r3, #18
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	0fdb      	lsrs	r3, r3, #31
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	0fdb      	lsrs	r3, r3, #31
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b20      	cmp	r3, #32
 8005526:	d10d      	bne.n	8005544 <USB_HC_Halt+0x82>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <USB_HC_Halt+0x82>
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d002      	beq.n	8005540 <USB_HC_Halt+0x7e>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d101      	bne.n	8005544 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e0d8      	b.n	80056f6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <USB_HC_Halt+0x8e>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d173      	bne.n	8005638 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	440a      	add	r2, r1
 8005566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800556a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800556e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d14a      	bne.n	8005612 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d133      	bne.n	80055f0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055a6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055c6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055d4:	d82e      	bhi.n	8005634 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ec:	d0ec      	beq.n	80055c8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055ee:	e081      	b.n	80056f4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	440a      	add	r2, r1
 8005606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800560a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800560e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005610:	e070      	b.n	80056f4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800562c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005630:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005632:	e05f      	b.n	80056f4 <USB_HC_Halt+0x232>
            break;
 8005634:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005636:	e05d      	b.n	80056f4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	440a      	add	r2, r1
 800564e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005656:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d133      	bne.n	80056d0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005686:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	440a      	add	r2, r1
 800569e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056b4:	d81d      	bhi.n	80056f2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056cc:	d0ec      	beq.n	80056a8 <USB_HC_Halt+0x1e6>
 80056ce:	e011      	b.n	80056f4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e000      	b.n	80056f4 <USB_HC_Halt+0x232>
          break;
 80056f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3724      	adds	r7, #36	@ 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005718:	2301      	movs	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	04da      	lsls	r2, r3, #19
 8005720:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <USB_DoPing+0x74>)
 8005722:	4013      	ands	r3, r2
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	440a      	add	r2, r1
 800572c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005734:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800574c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005754:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	1ff80000 	.word	0x1ff80000

0800577c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fe ff8c 	bl	80046ae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005796:	2110      	movs	r1, #16
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fe ffe5 	bl	8004768 <USB_FlushTxFifo>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff f80f 	bl	80047cc <USB_FlushRxFifo>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80057b8:	2300      	movs	r3, #0
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	e01f      	b.n	80057fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f2:	461a      	mov	r2, r3
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b0f      	cmp	r3, #15
 8005802:	d9dc      	bls.n	80057be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e034      	b.n	8005874 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005820:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005828:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005830:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583e:	461a      	mov	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005850:	d80c      	bhi.n	800586c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005864:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005868:	d0ec      	beq.n	8005844 <USB_StopHost+0xc8>
 800586a:	e000      	b.n	800586e <USB_StopHost+0xf2>
        break;
 800586c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	3301      	adds	r3, #1
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d9c7      	bls.n	800580a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005880:	461a      	mov	r2, r3
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7fe fefb 	bl	800468c <USB_EnableGlobalInt>

  return ret;
 8005896:	7ffb      	ldrb	r3, [r7, #31]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80058a4:	4904      	ldr	r1, [pc, #16]	@ (80058b8 <MX_FATFS_Init+0x18>)
 80058a6:	4805      	ldr	r0, [pc, #20]	@ (80058bc <MX_FATFS_Init+0x1c>)
 80058a8:	f004 fffe 	bl	800a8a8 <FATFS_LinkDriver>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b03      	ldr	r3, [pc, #12]	@ (80058c0 <MX_FATFS_Init+0x20>)
 80058b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058b4:	bf00      	nop
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	200001e4 	.word	0x200001e4
 80058bc:	0800eebc 	.word	0x0800eebc
 80058c0:	200001e0 	.word	0x200001e0

080058c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80058c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	4619      	mov	r1, r3
 80058fe:	4808      	ldr	r0, [pc, #32]	@ (8005920 <USBH_status+0x34>)
 8005900:	f007 f96a 	bl	800cbd8 <USBH_MSC_UnitIsReady>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <USBH_status+0x24>
  {
    res = RES_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	e001      	b.n	8005914 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20002714 	.word	0x20002714

08005924 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b094      	sub	sp, #80	@ 0x50
 8005928:	af02      	add	r7, sp, #8
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800593a:	7bf9      	ldrb	r1, [r7, #15]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4813      	ldr	r0, [pc, #76]	@ (8005994 <USBH_read+0x70>)
 8005946:	f007 f991 	bl	800cc6c <USBH_MSC_Read>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <USBH_read+0x34>
  {
    res = RES_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005956:	e017      	b.n	8005988 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005958:	f107 0210 	add.w	r2, r7, #16
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	4619      	mov	r1, r3
 8005960:	480c      	ldr	r0, [pc, #48]	@ (8005994 <USBH_read+0x70>)
 8005962:	f007 f95f 	bl	800cc24 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005966:	7f7b      	ldrb	r3, [r7, #29]
 8005968:	2b3a      	cmp	r3, #58	@ 0x3a
 800596a:	d005      	beq.n	8005978 <USBH_read+0x54>
 800596c:	2b3a      	cmp	r3, #58	@ 0x3a
 800596e:	dc07      	bgt.n	8005980 <USBH_read+0x5c>
 8005970:	2b04      	cmp	r3, #4
 8005972:	d001      	beq.n	8005978 <USBH_read+0x54>
 8005974:	2b28      	cmp	r3, #40	@ 0x28
 8005976:	d103      	bne.n	8005980 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005978:	2303      	movs	r3, #3
 800597a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800597e:	e003      	b.n	8005988 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005986:	bf00      	nop
    }
  }

  return res;
 8005988:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800598c:	4618      	mov	r0, r3
 800598e:	3748      	adds	r7, #72	@ 0x48
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20002714 	.word	0x20002714

08005998 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b094      	sub	sp, #80	@ 0x50
 800599c:	af02      	add	r7, sp, #8
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80059ae:	7bf9      	ldrb	r1, [r7, #15]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4817      	ldr	r0, [pc, #92]	@ (8005a18 <USBH_write+0x80>)
 80059ba:	f007 f9c0 	bl	800cd3e <USBH_MSC_Write>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <USBH_write+0x34>
  {
    res = RES_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80059ca:	e01f      	b.n	8005a0c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80059cc:	f107 0210 	add.w	r2, r7, #16
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4810      	ldr	r0, [pc, #64]	@ (8005a18 <USBH_write+0x80>)
 80059d6:	f007 f925 	bl	800cc24 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80059da:	7f7b      	ldrb	r3, [r7, #29]
 80059dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80059de:	d00d      	beq.n	80059fc <USBH_write+0x64>
 80059e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80059e2:	dc0f      	bgt.n	8005a04 <USBH_write+0x6c>
 80059e4:	2b28      	cmp	r3, #40	@ 0x28
 80059e6:	d009      	beq.n	80059fc <USBH_write+0x64>
 80059e8:	2b28      	cmp	r3, #40	@ 0x28
 80059ea:	dc0b      	bgt.n	8005a04 <USBH_write+0x6c>
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d005      	beq.n	80059fc <USBH_write+0x64>
 80059f0:	2b27      	cmp	r3, #39	@ 0x27
 80059f2:	d107      	bne.n	8005a04 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80059f4:	2302      	movs	r3, #2
 80059f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80059fa:	e007      	b.n	8005a0c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80059fc:	2303      	movs	r3, #3
 80059fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005a02:	e003      	b.n	8005a0c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005a0a:	bf00      	nop
    }
  }

  return res;
 8005a0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3748      	adds	r7, #72	@ 0x48
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20002714 	.word	0x20002714

08005a1c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b090      	sub	sp, #64	@ 0x40
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	603a      	str	r2, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005a32:	79bb      	ldrb	r3, [r7, #6]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d852      	bhi.n	8005ade <USBH_ioctl+0xc2>
 8005a38:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <USBH_ioctl+0x24>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a59 	.word	0x08005a59
 8005a48:	08005a83 	.word	0x08005a83
 8005a4c:	08005aaf 	.word	0x08005aaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005a56:	e045      	b.n	8005ae4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a58:	f107 0208 	add.w	r2, r7, #8
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4823      	ldr	r0, [pc, #140]	@ (8005af0 <USBH_ioctl+0xd4>)
 8005a62:	f007 f8df 	bl	800cc24 <USBH_MSC_GetLUNInfo>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005a78:	e034      	b.n	8005ae4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005a80:	e030      	b.n	8005ae4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a82:	f107 0208 	add.w	r2, r7, #8
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4819      	ldr	r0, [pc, #100]	@ (8005af0 <USBH_ioctl+0xd4>)
 8005a8c:	f007 f8ca 	bl	800cc24 <USBH_MSC_GetLUNInfo>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005a96:	8a3b      	ldrh	r3, [r7, #16]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005aa4:	e01e      	b.n	8005ae4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005aac:	e01a      	b.n	8005ae4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005aae:	f107 0208 	add.w	r2, r7, #8
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	480e      	ldr	r0, [pc, #56]	@ (8005af0 <USBH_ioctl+0xd4>)
 8005ab8:	f007 f8b4 	bl	800cc24 <USBH_MSC_GetLUNInfo>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005ac2:	8a3b      	ldrh	r3, [r7, #16]
 8005ac4:	0a5b      	lsrs	r3, r3, #9
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005ad4:	e006      	b.n	8005ae4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005adc:	e002      	b.n	8005ae4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8005ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3740      	adds	r7, #64	@ 0x40
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20002714 	.word	0x20002714

08005af4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	6039      	str	r1, [r7, #0]
 8005afe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b04:	d802      	bhi.n	8005b0c <ff_convert+0x18>
		c = chr;
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	81fb      	strh	r3, [r7, #14]
 8005b0a:	e025      	b.n	8005b58 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2bff      	cmp	r3, #255	@ 0xff
 8005b16:	d805      	bhi.n	8005b24 <ff_convert+0x30>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	3b80      	subs	r3, #128	@ 0x80
 8005b1c:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <ff_convert+0x74>)
 8005b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b22:	e000      	b.n	8005b26 <ff_convert+0x32>
 8005b24:	2300      	movs	r3, #0
 8005b26:	81fb      	strh	r3, [r7, #14]
 8005b28:	e016      	b.n	8005b58 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	81fb      	strh	r3, [r7, #14]
 8005b2e:	e009      	b.n	8005b44 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	4a0d      	ldr	r2, [pc, #52]	@ (8005b68 <ff_convert+0x74>)
 8005b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d006      	beq.n	8005b4c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005b3e:	89fb      	ldrh	r3, [r7, #14]
 8005b40:	3301      	adds	r3, #1
 8005b42:	81fb      	strh	r3, [r7, #14]
 8005b44:	89fb      	ldrh	r3, [r7, #14]
 8005b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b48:	d9f2      	bls.n	8005b30 <ff_convert+0x3c>
 8005b4a:	e000      	b.n	8005b4e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005b4c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005b4e:	89fb      	ldrh	r3, [r7, #14]
 8005b50:	3380      	adds	r3, #128	@ 0x80
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005b58:	89fb      	ldrh	r3, [r7, #14]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	0800eed0 	.word	0x0800eed0

08005b6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7c:	d201      	bcs.n	8005b82 <ff_wtoupper+0x16>
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c78 <ff_wtoupper+0x10c>)
 8005b80:	e000      	b.n	8005b84 <ff_wtoupper+0x18>
 8005b82:	4b3e      	ldr	r3, [pc, #248]	@ (8005c7c <ff_wtoupper+0x110>)
 8005b84:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	617a      	str	r2, [r7, #20]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8005b90:	8a7b      	ldrh	r3, [r7, #18]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d068      	beq.n	8005c68 <ff_wtoupper+0xfc>
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	8a7b      	ldrh	r3, [r7, #18]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d364      	bcc.n	8005c68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	617a      	str	r2, [r7, #20]
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	823b      	strh	r3, [r7, #16]
 8005ba8:	8a3b      	ldrh	r3, [r7, #16]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	81fb      	strh	r3, [r7, #14]
 8005bae:	8a3b      	ldrh	r3, [r7, #16]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	8a79      	ldrh	r1, [r7, #18]
 8005bb8:	8a3b      	ldrh	r3, [r7, #16]
 8005bba:	440b      	add	r3, r1
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	da49      	bge.n	8005c54 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005bc0:	89fb      	ldrh	r3, [r7, #14]
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d84f      	bhi.n	8005c66 <ff_wtoupper+0xfa>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <ff_wtoupper+0x60>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005c03 	.word	0x08005c03
 8005bd4:	08005c19 	.word	0x08005c19
 8005bd8:	08005c21 	.word	0x08005c21
 8005bdc:	08005c29 	.word	0x08005c29
 8005be0:	08005c31 	.word	0x08005c31
 8005be4:	08005c39 	.word	0x08005c39
 8005be8:	08005c41 	.word	0x08005c41
 8005bec:	08005c49 	.word	0x08005c49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	8a7b      	ldrh	r3, [r7, #18]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	80fb      	strh	r3, [r7, #6]
 8005c00:	e027      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	8a7b      	ldrh	r3, [r7, #18]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	80fb      	strh	r3, [r7, #6]
 8005c16:	e01c      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	3b10      	subs	r3, #16
 8005c1c:	80fb      	strh	r3, [r7, #6]
 8005c1e:	e018      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	3b20      	subs	r3, #32
 8005c24:	80fb      	strh	r3, [r7, #6]
 8005c26:	e014      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	3b30      	subs	r3, #48	@ 0x30
 8005c2c:	80fb      	strh	r3, [r7, #6]
 8005c2e:	e010      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	3b1a      	subs	r3, #26
 8005c34:	80fb      	strh	r3, [r7, #6]
 8005c36:	e00c      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	80fb      	strh	r3, [r7, #6]
 8005c3e:	e008      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	3b50      	subs	r3, #80	@ 0x50
 8005c44:	80fb      	strh	r3, [r7, #6]
 8005c46:	e004      	b.n	8005c52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8005c4e:	80fb      	strh	r3, [r7, #6]
 8005c50:	bf00      	nop
			}
			break;
 8005c52:	e008      	b.n	8005c66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005c54:	89fb      	ldrh	r3, [r7, #14]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d195      	bne.n	8005b86 <ff_wtoupper+0x1a>
 8005c5a:	8a3b      	ldrh	r3, [r7, #16]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005c64:	e78f      	b.n	8005b86 <ff_wtoupper+0x1a>
			break;
 8005c66:	bf00      	nop
	}

	return chr;
 8005c68:	88fb      	ldrh	r3, [r7, #6]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	0800efd0 	.word	0x0800efd0
 8005c7c:	0800f1c4 	.word	0x0800f1c4

08005c80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	4a08      	ldr	r2, [pc, #32]	@ (8005cb0 <disk_status+0x30>)
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	79fa      	ldrb	r2, [r7, #7]
 8005c98:	4905      	ldr	r1, [pc, #20]	@ (8005cb0 <disk_status+0x30>)
 8005c9a:	440a      	add	r2, r1
 8005c9c:	7a12      	ldrb	r2, [r2, #8]
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4798      	blx	r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20002708 	.word	0x20002708

08005cb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8005d00 <disk_initialize+0x4c>)
 8005cc6:	5cd3      	ldrb	r3, [r2, r3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d114      	bne.n	8005cf6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	4a0c      	ldr	r2, [pc, #48]	@ (8005d00 <disk_initialize+0x4c>)
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	79fa      	ldrb	r2, [r7, #7]
 8005cda:	4909      	ldr	r1, [pc, #36]	@ (8005d00 <disk_initialize+0x4c>)
 8005cdc:	440a      	add	r2, r1
 8005cde:	7a12      	ldrb	r2, [r2, #8]
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4798      	blx	r3
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	4a03      	ldr	r2, [pc, #12]	@ (8005d00 <disk_initialize+0x4c>)
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20002708 	.word	0x20002708

08005d04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <disk_read+0x3c>)
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	689c      	ldr	r4, [r3, #8]
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4a07      	ldr	r2, [pc, #28]	@ (8005d40 <disk_read+0x3c>)
 8005d24:	4413      	add	r3, r2
 8005d26:	7a18      	ldrb	r0, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	47a0      	blx	r4
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20002708 	.word	0x20002708

08005d44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	4a0a      	ldr	r2, [pc, #40]	@ (8005d80 <disk_write+0x3c>)
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68dc      	ldr	r4, [r3, #12]
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	4a07      	ldr	r2, [pc, #28]	@ (8005d80 <disk_write+0x3c>)
 8005d64:	4413      	add	r3, r2
 8005d66:	7a18      	ldrb	r0, [r3, #8]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	47a0      	blx	r4
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd90      	pop	{r4, r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20002708 	.word	0x20002708

08005d84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	603a      	str	r2, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	460b      	mov	r3, r1
 8005d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	4a09      	ldr	r2, [pc, #36]	@ (8005dbc <disk_ioctl+0x38>)
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	79fa      	ldrb	r2, [r7, #7]
 8005da2:	4906      	ldr	r1, [pc, #24]	@ (8005dbc <disk_ioctl+0x38>)
 8005da4:	440a      	add	r2, r1
 8005da6:	7a10      	ldrb	r0, [r2, #8]
 8005da8:	79b9      	ldrb	r1, [r7, #6]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4798      	blx	r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20002708 	.word	0x20002708

08005dc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005dd0:	89fb      	ldrh	r3, [r7, #14]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	b21a      	sxth	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005de2:	89fb      	ldrh	r3, [r7, #14]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3303      	adds	r3, #3
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	3202      	adds	r2, #2
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	3201      	adds	r2, #1
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8005e36:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005e3a:	b09d      	sub	sp, #116	@ 0x74
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8005e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e42:	3307      	adds	r3, #7
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2200      	movs	r2, #0
 8005e4a:	469a      	mov	sl, r3
 8005e4c:	4693      	mov	fp, r2
 8005e4e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8005e52:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005e56:	f04f 0000 	mov.w	r0, #0
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	0219      	lsls	r1, r3, #8
 8005e60:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005e64:	0210      	lsls	r0, r2, #8
 8005e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e68:	3306      	adds	r3, #6
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2200      	movs	r2, #0
 8005e70:	461c      	mov	r4, r3
 8005e72:	4615      	mov	r5, r2
 8005e74:	ea40 0804 	orr.w	r8, r0, r4
 8005e78:	ea41 0905 	orr.w	r9, r1, r5
 8005e7c:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8005e80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	0219      	lsls	r1, r3, #8
 8005e8e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005e92:	0210      	lsls	r0, r2, #8
 8005e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e96:	3305      	adds	r3, #5
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ea0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005ea2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	4303      	orrs	r3, r0
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eac:	462b      	mov	r3, r5
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8005eb6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8005eba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005ebe:	f04f 0000 	mov.w	r0, #0
 8005ec2:	f04f 0100 	mov.w	r1, #0
 8005ec6:	0219      	lsls	r1, r3, #8
 8005ec8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005ecc:	0210      	lsls	r0, r2, #8
 8005ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eda:	657a      	str	r2, [r7, #84]	@ 0x54
 8005edc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	4303      	orrs	r3, r0
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005ef0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8005ef4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	0219      	lsls	r1, r3, #8
 8005f02:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005f06:	0210      	lsls	r0, r2, #8
 8005f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2200      	movs	r2, #0
 8005f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f16:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	4303      	orrs	r3, r0
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	462b      	mov	r3, r5
 8005f22:	430b      	orrs	r3, r1
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005f2a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8005f2e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f04f 0100 	mov.w	r1, #0
 8005f3a:	0219      	lsls	r1, r3, #8
 8005f3c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005f40:	0210      	lsls	r0, r2, #8
 8005f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f44:	3302      	adds	r3, #2
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f50:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8005f54:	4623      	mov	r3, r4
 8005f56:	4303      	orrs	r3, r0
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005f64:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8005f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	020b      	lsls	r3, r1, #8
 8005f76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f7a:	0202      	lsls	r2, r0, #8
 8005f7c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005f7e:	3101      	adds	r1, #1
 8005f80:	7809      	ldrb	r1, [r1, #0]
 8005f82:	b2c9      	uxtb	r1, r1
 8005f84:	2000      	movs	r0, #0
 8005f86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f88:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005f8a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4311      	orrs	r1, r2
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	4629      	mov	r1, r5
 8005f96:	4319      	orrs	r1, r3
 8005f98:	60f9      	str	r1, [r7, #12]
 8005f9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005f9e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8005fa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	020b      	lsls	r3, r1, #8
 8005fb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fb4:	0202      	lsls	r2, r0, #8
 8005fb6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005fb8:	7809      	ldrb	r1, [r1, #0]
 8005fba:	b2c9      	uxtb	r1, r1
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8005fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4311      	orrs	r1, r2
 8005fca:	6039      	str	r1, [r7, #0]
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4319      	orrs	r1, r3
 8005fd0:	6079      	str	r1, [r7, #4]
 8005fd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005fd6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8005fda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	3774      	adds	r7, #116	@ 0x74
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005fea:	4770      	bx	lr

08005fec <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	887a      	ldrh	r2, [r7, #2]
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	0a1b      	lsrs	r3, r3, #8
 8006060:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	60fa      	str	r2, [r7, #12]
 800608c:	783a      	ldrb	r2, [r7, #0]
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	0a02      	lsrs	r2, r0, #8
 800609e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80060a2:	0a0b      	lsrs	r3, r1, #8
 80060a4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	60fa      	str	r2, [r7, #12]
 80060ae:	783a      	ldrb	r2, [r7, #0]
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	0a02      	lsrs	r2, r0, #8
 80060c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80060c4:	0a0b      	lsrs	r3, r1, #8
 80060c6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	60fa      	str	r2, [r7, #12]
 80060d0:	783a      	ldrb	r2, [r7, #0]
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	0a02      	lsrs	r2, r0, #8
 80060e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80060e6:	0a0b      	lsrs	r3, r1, #8
 80060e8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	60fa      	str	r2, [r7, #12]
 80060f2:	783a      	ldrb	r2, [r7, #0]
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	0a02      	lsrs	r2, r0, #8
 8006104:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006108:	0a0b      	lsrs	r3, r1, #8
 800610a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	60fa      	str	r2, [r7, #12]
 8006114:	783a      	ldrb	r2, [r7, #0]
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	0a02      	lsrs	r2, r0, #8
 8006126:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800612a:	0a0b      	lsrs	r3, r1, #8
 800612c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	60fa      	str	r2, [r7, #12]
 8006136:	783a      	ldrb	r2, [r7, #0]
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	0a02      	lsrs	r2, r0, #8
 8006148:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800614c:	0a0b      	lsrs	r3, r1, #8
 800614e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	60fa      	str	r2, [r7, #12]
 8006158:	783a      	ldrb	r2, [r7, #0]
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	0a02      	lsrs	r2, r0, #8
 800616a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800616e:	0a0b      	lsrs	r3, r1, #8
 8006170:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	60fa      	str	r2, [r7, #12]
 800617a:	783a      	ldrb	r2, [r7, #0]
 800617c:	701a      	strb	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	1c53      	adds	r3, r2, #1
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	6179      	str	r1, [r7, #20]
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f1      	bne.n	80061a4 <mem_cpy+0x1a>
	}
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	617a      	str	r2, [r7, #20]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	607b      	str	r3, [r7, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f3      	bne.n	80061dc <mem_set+0x10>
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006202:	b480      	push	{r7}
 8006204:	b089      	sub	sp, #36	@ 0x24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	61fa      	str	r2, [r7, #28]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	61ba      	str	r2, [r7, #24]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	1acb      	subs	r3, r1, r3
 800622e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3b01      	subs	r3, #1
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <mem_cmp+0x40>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0eb      	beq.n	800621a <mem_cmp+0x18>

	return r;
 8006242:	697b      	ldr	r3, [r7, #20]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3724      	adds	r7, #36	@ 0x24
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800625a:	e002      	b.n	8006262 <chk_chr+0x12>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3301      	adds	r3, #1
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <chk_chr+0x26>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4293      	cmp	r3, r2
 8006274:	d1f2      	bne.n	800625c <chk_chr+0xc>
	return *str;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	781b      	ldrb	r3, [r3, #0]
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e029      	b.n	80062f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800629c:	4a27      	ldr	r2, [pc, #156]	@ (800633c <chk_lock+0xb4>)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	4413      	add	r3, r2
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01d      	beq.n	80062e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062aa:	4a24      	ldr	r2, [pc, #144]	@ (800633c <chk_lock+0xb4>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	4413      	add	r3, r2
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d116      	bne.n	80062ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80062bc:	4a1f      	ldr	r2, [pc, #124]	@ (800633c <chk_lock+0xb4>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	4413      	add	r3, r2
 80062c4:	3304      	adds	r3, #4
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d10c      	bne.n	80062ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062d0:	4a1a      	ldr	r2, [pc, #104]	@ (800633c <chk_lock+0xb4>)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	4413      	add	r3, r2
 80062d8:	3308      	adds	r3, #8
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d102      	bne.n	80062ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062e4:	e007      	b.n	80062f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80062e6:	2301      	movs	r3, #1
 80062e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d9d2      	bls.n	800629c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d109      	bne.n	8006310 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <chk_lock+0x80>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d101      	bne.n	800630c <chk_lock+0x84>
 8006308:	2300      	movs	r3, #0
 800630a:	e010      	b.n	800632e <chk_lock+0xa6>
 800630c:	2312      	movs	r3, #18
 800630e:	e00e      	b.n	800632e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d108      	bne.n	8006328 <chk_lock+0xa0>
 8006316:	4a09      	ldr	r2, [pc, #36]	@ (800633c <chk_lock+0xb4>)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	4413      	add	r3, r2
 800631e:	330c      	adds	r3, #12
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006326:	d101      	bne.n	800632c <chk_lock+0xa4>
 8006328:	2310      	movs	r3, #16
 800632a:	e000      	b.n	800632e <chk_lock+0xa6>
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20002288 	.word	0x20002288

08006340 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006346:	2300      	movs	r3, #0
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	e002      	b.n	8006352 <enq_lock+0x12>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3301      	adds	r3, #1
 8006350:	607b      	str	r3, [r7, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d806      	bhi.n	8006366 <enq_lock+0x26>
 8006358:	4a09      	ldr	r2, [pc, #36]	@ (8006380 <enq_lock+0x40>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4413      	add	r3, r2
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f2      	bne.n	800634c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b02      	cmp	r3, #2
 800636a:	bf14      	ite	ne
 800636c:	2301      	movne	r3, #1
 800636e:	2300      	moveq	r3, #0
 8006370:	b2db      	uxtb	r3, r3
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20002288 	.word	0x20002288

08006384 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e01f      	b.n	80063d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006394:	4a41      	ldr	r2, [pc, #260]	@ (800649c <inc_lock+0x118>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	4413      	add	r3, r2
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d113      	bne.n	80063ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80063a6:	4a3d      	ldr	r2, [pc, #244]	@ (800649c <inc_lock+0x118>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d109      	bne.n	80063ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80063ba:	4a38      	ldr	r2, [pc, #224]	@ (800649c <inc_lock+0x118>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	4413      	add	r3, r2
 80063c2:	3308      	adds	r3, #8
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d006      	beq.n	80063dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3301      	adds	r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d9dc      	bls.n	8006394 <inc_lock+0x10>
 80063da:	e000      	b.n	80063de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80063dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d132      	bne.n	800644a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e002      	b.n	80063f0 <inc_lock+0x6c>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d806      	bhi.n	8006404 <inc_lock+0x80>
 80063f6:	4a29      	ldr	r2, [pc, #164]	@ (800649c <inc_lock+0x118>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	4413      	add	r3, r2
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f2      	bne.n	80063ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d101      	bne.n	800640e <inc_lock+0x8a>
 800640a:	2300      	movs	r3, #0
 800640c:	e040      	b.n	8006490 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4922      	ldr	r1, [pc, #136]	@ (800649c <inc_lock+0x118>)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	440b      	add	r3, r1
 800641a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	491e      	ldr	r1, [pc, #120]	@ (800649c <inc_lock+0x118>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	440b      	add	r3, r1
 8006428:	3304      	adds	r3, #4
 800642a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006430:	491a      	ldr	r1, [pc, #104]	@ (800649c <inc_lock+0x118>)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	440b      	add	r3, r1
 8006438:	3308      	adds	r3, #8
 800643a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800643c:	4a17      	ldr	r2, [pc, #92]	@ (800649c <inc_lock+0x118>)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	4413      	add	r3, r2
 8006444:	330c      	adds	r3, #12
 8006446:	2200      	movs	r2, #0
 8006448:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <inc_lock+0xe0>
 8006450:	4a12      	ldr	r2, [pc, #72]	@ (800649c <inc_lock+0x118>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	4413      	add	r3, r2
 8006458:	330c      	adds	r3, #12
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <inc_lock+0xe0>
 8006460:	2300      	movs	r3, #0
 8006462:	e015      	b.n	8006490 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d108      	bne.n	800647c <inc_lock+0xf8>
 800646a:	4a0c      	ldr	r2, [pc, #48]	@ (800649c <inc_lock+0x118>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	4413      	add	r3, r2
 8006472:	330c      	adds	r3, #12
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	e001      	b.n	8006480 <inc_lock+0xfc>
 800647c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006480:	4906      	ldr	r1, [pc, #24]	@ (800649c <inc_lock+0x118>)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	440b      	add	r3, r1
 8006488:	330c      	adds	r3, #12
 800648a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	20002288 	.word	0x20002288

080064a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d825      	bhi.n	8006500 <dec_lock+0x60>
		n = Files[i].ctr;
 80064b4:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <dec_lock+0x74>)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	4413      	add	r3, r2
 80064bc:	330c      	adds	r3, #12
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c8:	d101      	bne.n	80064ce <dec_lock+0x2e>
 80064ca:	2300      	movs	r3, #0
 80064cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <dec_lock+0x3a>
 80064d4:	89fb      	ldrh	r3, [r7, #14]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80064da:	4a0e      	ldr	r2, [pc, #56]	@ (8006514 <dec_lock+0x74>)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	4413      	add	r3, r2
 80064e2:	330c      	adds	r3, #12
 80064e4:	89fa      	ldrh	r2, [r7, #14]
 80064e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <dec_lock+0x5a>
 80064ee:	4a09      	ldr	r2, [pc, #36]	@ (8006514 <dec_lock+0x74>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4413      	add	r3, r2
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	737b      	strb	r3, [r7, #13]
 80064fe:	e001      	b.n	8006504 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006500:	2302      	movs	r3, #2
 8006502:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006504:	7b7b      	ldrb	r3, [r7, #13]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20002288 	.word	0x20002288

08006518 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e010      	b.n	8006548 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006526:	4a0d      	ldr	r2, [pc, #52]	@ (800655c <clear_lock+0x44>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	4413      	add	r3, r2
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d105      	bne.n	8006542 <clear_lock+0x2a>
 8006536:	4a09      	ldr	r2, [pc, #36]	@ (800655c <clear_lock+0x44>)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	4413      	add	r3, r2
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d9eb      	bls.n	8006526 <clear_lock+0xe>
	}
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20002288 	.word	0x20002288

08006560 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d034      	beq.n	80065de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7858      	ldrb	r0, [r3, #1]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006584:	2301      	movs	r3, #1
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	f7ff fbdc 	bl	8005d44 <disk_write>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006592:	2301      	movs	r3, #1
 8006594:	73fb      	strb	r3, [r7, #15]
 8006596:	e022      	b.n	80065de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	1ad2      	subs	r2, r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d217      	bcs.n	80065de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	789b      	ldrb	r3, [r3, #2]
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	e010      	b.n	80065d8 <sync_window+0x78>
					wsect += fs->fsize;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4413      	add	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7858      	ldrb	r0, [r3, #1]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80065ca:	2301      	movs	r3, #1
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	f7ff fbb9 	bl	8005d44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d8eb      	bhi.n	80065b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d01b      	beq.n	8006638 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ffad 	bl	8006560 <sync_window>
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d113      	bne.n	8006638 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7858      	ldrb	r0, [r3, #1]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800661a:	2301      	movs	r3, #1
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	f7ff fb71 	bl	8005d04 <disk_read>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006628:	f04f 33ff 	mov.w	r3, #4294967295
 800662c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800662e:	2301      	movs	r3, #1
 8006630:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff87 	bl	8006560 <sync_window>
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d159      	bne.n	8006710 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d149      	bne.n	80066f8 <sync_fs+0xb4>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d145      	bne.n	80066f8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	899b      	ldrh	r3, [r3, #12]
 8006676:	461a      	mov	r2, r3
 8006678:	2100      	movs	r1, #0
 800667a:	f7ff fda7 	bl	80061cc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	333c      	adds	r3, #60	@ 0x3c
 8006682:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006686:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fcae 	bl	8005fec <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	333c      	adds	r3, #60	@ 0x3c
 8006694:	4921      	ldr	r1, [pc, #132]	@ (800671c <sync_fs+0xd8>)
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fcc3 	bl	8006022 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	333c      	adds	r3, #60	@ 0x3c
 80066a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80066a4:	491e      	ldr	r1, [pc, #120]	@ (8006720 <sync_fs+0xdc>)
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fcbb 	bl	8006022 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	333c      	adds	r3, #60	@ 0x3c
 80066b0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f7ff fcb1 	bl	8006022 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	333c      	adds	r3, #60	@ 0x3c
 80066c4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7ff fca7 	bl	8006022 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7858      	ldrb	r0, [r3, #1]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ec:	2301      	movs	r3, #1
 80066ee:	f7ff fb29 	bl	8005d44 <disk_write>
			fs->fsi_flag = 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2200      	movs	r2, #0
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fb3f 	bl	8005d84 <disk_ioctl>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <sync_fs+0xcc>
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	41615252 	.word	0x41615252
 8006720:	61417272 	.word	0x61417272

08006724 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	3b02      	subs	r3, #2
 8006732:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	3b02      	subs	r3, #2
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d301      	bcc.n	8006744 <clust2sect+0x20>
 8006740:	2300      	movs	r3, #0
 8006742:	e008      	b.n	8006756 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	895b      	ldrh	r3, [r3, #10]
 8006748:	461a      	mov	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	fb03 f202 	mul.w	r2, r3, r2
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006754:	4413      	add	r3, r2
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006764:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006768:	b088      	sub	sp, #32
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d904      	bls.n	8006786 <get_fat+0x22>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <get_fat+0x28>
		val = 1;	/* Internal error */
 8006786:	2301      	movs	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e139      	b.n	8006a00 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	3b01      	subs	r3, #1
 8006798:	2b03      	cmp	r3, #3
 800679a:	f200 8125 	bhi.w	80069e8 <get_fat+0x284>
 800679e:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <get_fat+0x40>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	08006861 	.word	0x08006861
 80067ac:	080068ad 	.word	0x080068ad
 80067b0:	080068fd 	.word	0x080068fd
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	899b      	ldrh	r3, [r3, #12]
 80067ca:	4619      	mov	r1, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d2:	4413      	add	r3, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	69b8      	ldr	r0, [r7, #24]
 80067d8:	f7ff ff06 	bl	80065e8 <move_window>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 8105 	bne.w	80069ee <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	60fa      	str	r2, [r7, #12]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	8992      	ldrh	r2, [r2, #12]
 80067ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f2:	fb01 f202 	mul.w	r2, r1, r2
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4413      	add	r3, r2
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006800:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	899b      	ldrh	r3, [r3, #12]
 800680a:	4619      	mov	r1, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006812:	4413      	add	r3, r2
 8006814:	4619      	mov	r1, r3
 8006816:	69b8      	ldr	r0, [r7, #24]
 8006818:	f7ff fee6 	bl	80065e8 <move_window>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 80e7 	bne.w	80069f2 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	899b      	ldrh	r3, [r3, #12]
 8006828:	461a      	mov	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006830:	fb01 f202 	mul.w	r2, r1, r2
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4413      	add	r3, r2
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4313      	orrs	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <get_fat+0xf2>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	e002      	b.n	800685c <get_fat+0xf8>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685c:	61fb      	str	r3, [r7, #28]
			break;
 800685e:	e0cf      	b.n	8006a00 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	899b      	ldrh	r3, [r3, #12]
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	b29b      	uxth	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	fbb3 f3f1 	udiv	r3, r3, r1
 8006874:	4413      	add	r3, r2
 8006876:	4619      	mov	r1, r3
 8006878:	69b8      	ldr	r0, [r7, #24]
 800687a:	f7ff feb5 	bl	80065e8 <move_window>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 80b8 	bne.w	80069f6 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	8992      	ldrh	r2, [r2, #12]
 8006894:	fbb3 f0f2 	udiv	r0, r3, r2
 8006898:	fb00 f202 	mul.w	r2, r0, r2
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	440b      	add	r3, r1
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff fa8d 	bl	8005dc0 <ld_word>
 80068a6:	4603      	mov	r3, r0
 80068a8:	61fb      	str	r3, [r7, #28]
			break;
 80068aa:	e0a9      	b.n	8006a00 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	899b      	ldrh	r3, [r3, #12]
 80068b4:	089b      	lsrs	r3, r3, #2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80068c0:	4413      	add	r3, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	69b8      	ldr	r0, [r7, #24]
 80068c6:	f7ff fe8f 	bl	80065e8 <move_window>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 8094 	bne.w	80069fa <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	8992      	ldrh	r2, [r2, #12]
 80068e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80068e4:	fb00 f202 	mul.w	r2, r0, r2
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	440b      	add	r3, r1
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fa7f 	bl	8005df0 <ld_dword>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80068f8:	61fb      	str	r3, [r7, #28]
			break;
 80068fa:	e081      	b.n	8006a00 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	d070      	beq.n	80069e8 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006916:	1e54      	subs	r4, r2, #1
 8006918:	f143 35ff 	adc.w	r5, r3, #4294967295
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	899b      	ldrh	r3, [r3, #12]
 8006920:	b29b      	uxth	r3, r3
 8006922:	2200      	movs	r2, #0
 8006924:	4698      	mov	r8, r3
 8006926:	4691      	mov	r9, r2
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	4620      	mov	r0, r4
 800692e:	4629      	mov	r1, r5
 8006930:	f7f9 ffbc 	bl	80008ac <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	895b      	ldrh	r3, [r3, #10]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	79db      	ldrb	r3, [r3, #7]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d10e      	bne.n	8006968 <get_fat+0x204>
					if (cofs <= clen) {
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	429a      	cmp	r2, r3
 8006950:	d80a      	bhi.n	8006968 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d002      	beq.n	8006960 <get_fat+0x1fc>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	e001      	b.n	8006964 <get_fat+0x200>
 8006960:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006964:	61fb      	str	r3, [r7, #28]
						break;
 8006966:	e04b      	b.n	8006a00 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	79db      	ldrb	r3, [r3, #7]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d108      	bne.n	8006982 <get_fat+0x21e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	429a      	cmp	r2, r3
 8006978:	d203      	bcs.n	8006982 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
					break;
 8006980:	e03e      	b.n	8006a00 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	79db      	ldrb	r3, [r3, #7]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d02e      	beq.n	80069e8 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8006992:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006996:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8006998:	e032      	b.n	8006a00 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	899b      	ldrh	r3, [r3, #12]
 80069a2:	089b      	lsrs	r3, r3, #2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4619      	mov	r1, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ae:	4413      	add	r3, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	69b8      	ldr	r0, [r7, #24]
 80069b4:	f7ff fe18 	bl	80065e8 <move_window>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d11f      	bne.n	80069fe <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	8992      	ldrh	r2, [r2, #12]
 80069cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80069d0:	fb00 f202 	mul.w	r2, r0, r2
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	440b      	add	r3, r1
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff fa09 	bl	8005df0 <ld_dword>
 80069de:	4603      	mov	r3, r0
 80069e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069e4:	61fb      	str	r3, [r7, #28]
					break;
 80069e6:	e00b      	b.n	8006a00 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80069e8:	2301      	movs	r3, #1
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e008      	b.n	8006a00 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ee:	bf00      	nop
 80069f0:	e006      	b.n	8006a00 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069f2:	bf00      	nop
 80069f4:	e004      	b.n	8006a00 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069f6:	bf00      	nop
 80069f8:	e002      	b.n	8006a00 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069fe:	bf00      	nop
		}
	}

	return val;
 8006a00:	69fb      	ldr	r3, [r7, #28]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006a0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f240 810d 	bls.w	8006c3e <put_fat+0x232>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	f080 8107 	bcs.w	8006c3e <put_fat+0x232>
		switch (fs->fs_type) {
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	f300 8102 	bgt.w	8006c3e <put_fat+0x232>
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f280 80b3 	bge.w	8006ba6 <put_fat+0x19a>
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d003      	beq.n	8006a4c <put_fat+0x40>
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f000 8083 	beq.w	8006b50 <put_fat+0x144>
 8006a4a:	e0f8      	b.n	8006c3e <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4413      	add	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	899b      	ldrh	r3, [r3, #12]
 8006a62:	4619      	mov	r1, r3
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fdba 	bl	80065e8 <move_window>
 8006a74:	4603      	mov	r3, r0
 8006a76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 80d8 	bne.w	8006c30 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	61ba      	str	r2, [r7, #24]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	8992      	ldrh	r2, [r2, #12]
 8006a90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a94:	fb00 f202 	mul.w	r2, r0, r2
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00d      	beq.n	8006ac4 <put_fat+0xb8>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	b25a      	sxtb	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	4313      	orrs	r3, r2
 8006abe:	b25b      	sxtb	r3, r3
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	e001      	b.n	8006ac8 <put_fat+0xbc>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	899b      	ldrh	r3, [r3, #12]
 8006ada:	4619      	mov	r1, r3
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff fd7e 	bl	80065e8 <move_window>
 8006aec:	4603      	mov	r3, r0
 8006aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006af0:	7ffb      	ldrb	r3, [r7, #31]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 809e 	bne.w	8006c34 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	899b      	ldrh	r3, [r3, #12]
 8006b02:	461a      	mov	r2, r3
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b0a:	fb00 f202 	mul.w	r2, r0, r2
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	440b      	add	r3, r1
 8006b12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <put_fat+0x11a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	e00e      	b.n	8006b44 <put_fat+0x138>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	b25b      	sxtb	r3, r3
 8006b2c:	f023 030f 	bic.w	r3, r3, #15
 8006b30:	b25a      	sxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0a1b      	lsrs	r3, r3, #8
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	70da      	strb	r2, [r3, #3]
			break;
 8006b4e:	e076      	b.n	8006c3e <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	899b      	ldrh	r3, [r3, #12]
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b64:	4413      	add	r3, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff fd3d 	bl	80065e8 <move_window>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b72:	7ffb      	ldrb	r3, [r7, #31]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d15f      	bne.n	8006c38 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	8992      	ldrh	r2, [r2, #12]
 8006b86:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b8a:	fb00 f202 	mul.w	r2, r0, r2
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	440b      	add	r3, r1
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	b292      	uxth	r2, r2
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff fa27 	bl	8005fec <st_word>
			fs->wflag = 1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	70da      	strb	r2, [r3, #3]
			break;
 8006ba4:	e04b      	b.n	8006c3e <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	899b      	ldrh	r3, [r3, #12]
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bba:	4413      	add	r3, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fd12 	bl	80065e8 <move_window>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bc8:	7ffb      	ldrb	r3, [r7, #31]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d136      	bne.n	8006c3c <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d017      	beq.n	8006c06 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	8992      	ldrh	r2, [r2, #12]
 8006bea:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bee:	fb00 f202 	mul.w	r2, r0, r2
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff f8fa 	bl	8005df0 <ld_dword>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c02:	4323      	orrs	r3, r4
 8006c04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	8992      	ldrh	r2, [r2, #12]
 8006c14:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c18:	fb00 f202 	mul.w	r2, r0, r2
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	440b      	add	r3, r1
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff f9fd 	bl	8006022 <st_dword>
			fs->wflag = 1;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	70da      	strb	r2, [r3, #3]
			break;
 8006c2e:	e006      	b.n	8006c3e <put_fat+0x232>
			if (res != FR_OK) break;
 8006c30:	bf00      	nop
 8006c32:	e004      	b.n	8006c3e <put_fat+0x232>
			if (res != FR_OK) break;
 8006c34:	bf00      	nop
 8006c36:	e002      	b.n	8006c3e <put_fat+0x232>
			if (res != FR_OK) break;
 8006c38:	bf00      	nop
 8006c3a:	e000      	b.n	8006c3e <put_fat+0x232>
			if (res != FR_OK) break;
 8006c3c:	bf00      	nop
		}
	}
	return res;
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3724      	adds	r7, #36	@ 0x24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd90      	pop	{r4, r7, pc}

08006c48 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	@ 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	3b02      	subs	r3, #2
 8006c58:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	3b02      	subs	r3, #2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d301      	bcc.n	8006c6a <find_bitmap+0x22>
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	08db      	lsrs	r3, r3, #3
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	8989      	ldrh	r1, [r1, #12]
 8006c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c86:	4413      	add	r3, r2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff fcac 	bl	80065e8 <move_window>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <find_bitmap+0x54>
 8006c96:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9a:	e058      	b.n	8006d4e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	8992      	ldrh	r2, [r2, #12]
 8006ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ca8:	fb01 f202 	mul.w	r2, r1, r2
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	333c      	adds	r3, #60	@ 0x3c
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cce:	4013      	ands	r3, r2
 8006cd0:	74fb      	strb	r3, [r7, #19]
 8006cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	3b02      	subs	r3, #2
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d307      	bcc.n	8006cfe <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	899b      	ldrh	r3, [r3, #12]
 8006cfc:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8006cfe:	7cfb      	ldrb	r3, [r7, #19]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d109      	bne.n	8006d18 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	3301      	adds	r3, #1
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d106      	bne.n	8006d20 <find_bitmap+0xd8>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	3302      	adds	r3, #2
 8006d16:	e01a      	b.n	8006d4e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d101      	bne.n	8006d2c <find_bitmap+0xe4>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e010      	b.n	8006d4e <find_bitmap+0x106>
			} while (bm);
 8006d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1c5      	bne.n	8006cc0 <find_bitmap+0x78>
			bm = 1;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	623b      	str	r3, [r7, #32]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	899b      	ldrh	r3, [r3, #12]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d3b9      	bcc.n	8006cc0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8006d4c:	e793      	b.n	8006c76 <find_bitmap+0x2e>
	}
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	@ 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b088      	sub	sp, #32
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	3b02      	subs	r3, #2
 8006d68:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	08db      	lsrs	r3, r3, #3
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	8989      	ldrh	r1, [r1, #12]
 8006d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	08db      	lsrs	r3, r3, #3
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	8992      	ldrh	r2, [r2, #12]
 8006d86:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d8a:	fb01 f202 	mul.w	r2, r1, r2
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	2201      	movs	r2, #1
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	617a      	str	r2, [r7, #20]
 8006da6:	4619      	mov	r1, r3
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff fc1d 	bl	80065e8 <move_window>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <change_bitmap+0x62>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e03f      	b.n	8006e38 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	333c      	adds	r3, #60	@ 0x3c
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	7ffb      	ldrb	r3, [r7, #31]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf14      	ite	ne
 8006dcc:	2301      	movne	r3, #1
 8006dce:	2300      	moveq	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d101      	bne.n	8006dde <change_bitmap+0x88>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e02c      	b.n	8006e38 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	4413      	add	r3, r2
 8006de4:	333c      	adds	r3, #60	@ 0x3c
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	7ffb      	ldrb	r3, [r7, #31]
 8006dea:	4053      	eors	r3, r2
 8006dec:	b2d9      	uxtb	r1, r3
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4413      	add	r3, r2
 8006df4:	333c      	adds	r3, #60	@ 0x3c
 8006df6:	460a      	mov	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <change_bitmap+0xba>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e013      	b.n	8006e38 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8006e10:	7ffb      	ldrb	r3, [r7, #31]
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	7ffb      	ldrb	r3, [r7, #31]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1cd      	bne.n	8006db8 <change_bitmap+0x62>
			bm = 1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	3301      	adds	r3, #1
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	899b      	ldrh	r3, [r3, #12]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d3c2      	bcc.n	8006db8 <change_bitmap+0x62>
		i = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8006e36:	e7b3      	b.n	8006da0 <change_bitmap+0x4a>
	}
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	79db      	ldrb	r3, [r3, #7]
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d121      	bne.n	8006e94 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	e014      	b.n	8006e88 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	3301      	adds	r3, #1
 8006e66:	461a      	mov	r2, r3
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	f7ff fdcf 	bl	8006a0c <put_fat>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <fill_first_frag+0x3c>
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	e00c      	b.n	8006e96 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e7      	bne.n	8006e5e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8006eaa:	e020      	b.n	8006eee <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	1c59      	adds	r1, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d905      	bls.n	8006ece <fill_last_frag+0x30>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	3302      	adds	r3, #2
 8006ecc:	e000      	b.n	8006ed0 <fill_last_frag+0x32>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f7ff fd9b 	bl	8006a0c <put_fat>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <fill_last_frag+0x46>
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	e009      	b.n	8006ef8 <fill_last_frag+0x5a>
		obj->n_frag--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1da      	bne.n	8006eac <fill_last_frag+0xe>
	}
	return FR_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	@ 0x28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d904      	bls.n	8006f2e <remove_chain+0x2e>
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d301      	bcc.n	8006f32 <remove_chain+0x32>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e096      	b.n	8007060 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d014      	beq.n	8006f62 <remove_chain+0x62>
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d103      	bne.n	8006f48 <remove_chain+0x48>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	79db      	ldrb	r3, [r3, #7]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d00c      	beq.n	8006f62 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	69b8      	ldr	r0, [r7, #24]
 8006f50:	f7ff fd5c 	bl	8006a0c <put_fat>
 8006f54:	4603      	mov	r3, r0
 8006f56:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f58:	7ffb      	ldrb	r3, [r7, #31]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <remove_chain+0x62>
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
 8006f60:	e07e      	b.n	8007060 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff fbfd 	bl	8006764 <get_fat>
 8006f6a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d055      	beq.n	800701e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <remove_chain+0x7c>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e071      	b.n	8007060 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	d101      	bne.n	8006f88 <remove_chain+0x88>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e06b      	b.n	8007060 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d00b      	beq.n	8006fa8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f90:	2200      	movs	r2, #0
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	69b8      	ldr	r0, [r7, #24]
 8006f96:	f7ff fd39 	bl	8006a0c <put_fat>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f9e:	7ffb      	ldrb	r3, [r7, #31]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <remove_chain+0xa8>
 8006fa4:	7ffb      	ldrb	r3, [r7, #31]
 8006fa6:	e05b      	b.n	8007060 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	3b02      	subs	r3, #2
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d20b      	bcs.n	8006fce <remove_chain+0xce>
			fs->free_clst++;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	791b      	ldrb	r3, [r3, #4]
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d102      	bne.n	8006fde <remove_chain+0xde>
			ecl = nxt;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	623b      	str	r3, [r7, #32]
 8006fdc:	e017      	b.n	800700e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d10f      	bne.n	8007006 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8006fe6:	6a3a      	ldr	r2, [r7, #32]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff2:	69b8      	ldr	r0, [r7, #24]
 8006ff4:	f7ff feaf 	bl	8006d56 <change_bitmap>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8006ffc:	7ffb      	ldrb	r3, [r7, #31]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <remove_chain+0x106>
 8007002:	7ffb      	ldrb	r3, [r7, #31]
 8007004:	e02c      	b.n	8007060 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	623b      	str	r3, [r7, #32]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	d3a2      	bcc.n	8006f62 <remove_chain+0x62>
 800701c:	e000      	b.n	8007020 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800701e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b04      	cmp	r3, #4
 8007026:	d11a      	bne.n	800705e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d103      	bne.n	8007036 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	71da      	strb	r2, [r3, #7]
 8007034:	e013      	b.n	800705e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	79db      	ldrb	r3, [r3, #7]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d10f      	bne.n	800705e <remove_chain+0x15e>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d30a      	bcc.n	800705e <remove_chain+0x15e>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	4413      	add	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d802      	bhi.n	800705e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2202      	movs	r2, #2
 800705c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3728      	adds	r7, #40	@ 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10d      	bne.n	800709a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d004      	beq.n	8007094 <create_chain+0x2c>
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	429a      	cmp	r2, r3
 8007092:	d31b      	bcc.n	80070cc <create_chain+0x64>
 8007094:	2301      	movs	r3, #1
 8007096:	61bb      	str	r3, [r7, #24]
 8007098:	e018      	b.n	80070cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fb61 	bl	8006764 <get_fat>
 80070a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d801      	bhi.n	80070ae <create_chain+0x46>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e0d9      	b.n	8007262 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d101      	bne.n	80070ba <create_chain+0x52>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	e0d3      	b.n	8007262 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d201      	bcs.n	80070c8 <create_chain+0x60>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	e0cc      	b.n	8007262 <create_chain+0x1fa>
		scl = clst;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d164      	bne.n	800719e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80070d4:	2201      	movs	r2, #1
 80070d6:	69b9      	ldr	r1, [r7, #24]
 80070d8:	6938      	ldr	r0, [r7, #16]
 80070da:	f7ff fdb5 	bl	8006c48 <find_bitmap>
 80070de:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <create_chain+0x86>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d101      	bne.n	80070f2 <create_chain+0x8a>
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	e0b7      	b.n	8007262 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80070f2:	2301      	movs	r3, #1
 80070f4:	2201      	movs	r2, #1
 80070f6:	69f9      	ldr	r1, [r7, #28]
 80070f8:	6938      	ldr	r0, [r7, #16]
 80070fa:	f7ff fe2c 	bl	8006d56 <change_bitmap>
 80070fe:	4603      	mov	r3, r0
 8007100:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d101      	bne.n	800710c <create_chain+0xa4>
 8007108:	2301      	movs	r3, #1
 800710a:	e0aa      	b.n	8007262 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d102      	bne.n	8007118 <create_chain+0xb0>
 8007112:	f04f 33ff 	mov.w	r3, #4294967295
 8007116:	e0a4      	b.n	8007262 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	71da      	strb	r2, [r3, #7]
 8007124:	e011      	b.n	800714a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	79db      	ldrb	r3, [r3, #7]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d10d      	bne.n	800714a <create_chain+0xe2>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	3301      	adds	r3, #1
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	429a      	cmp	r2, r3
 8007136:	d008      	beq.n	800714a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2203      	movs	r2, #3
 8007148:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	79db      	ldrb	r3, [r3, #7]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d064      	beq.n	800721c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	429a      	cmp	r2, r3
 800715a:	d10b      	bne.n	8007174 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <create_chain+0x104>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	3301      	adds	r3, #1
 800716a:	e000      	b.n	800716e <create_chain+0x106>
 800716c:	2302      	movs	r3, #2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	61d3      	str	r3, [r2, #28]
 8007172:	e053      	b.n	800721c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <create_chain+0x11a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fe89 	bl	8006e9e <fill_last_frag>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d142      	bne.n	800721c <create_chain+0x1b4>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	61da      	str	r2, [r3, #28]
 800719c:	e03e      	b.n	800721c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3301      	adds	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d307      	bcc.n	80071c2 <create_chain+0x15a>
				ncl = 2;
 80071b2:	2302      	movs	r3, #2
 80071b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d901      	bls.n	80071c2 <create_chain+0x15a>
 80071be:	2300      	movs	r3, #0
 80071c0:	e04f      	b.n	8007262 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80071c2:	69f9      	ldr	r1, [r7, #28]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff facd 	bl	8006764 <get_fat>
 80071ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00e      	beq.n	80071f0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d003      	beq.n	80071e0 <create_chain+0x178>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d101      	bne.n	80071e4 <create_chain+0x17c>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	e03e      	b.n	8007262 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d1da      	bne.n	80071a2 <create_chain+0x13a>
 80071ec:	2300      	movs	r3, #0
 80071ee:	e038      	b.n	8007262 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80071f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80071f2:	f04f 32ff 	mov.w	r2, #4294967295
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	6938      	ldr	r0, [r7, #16]
 80071fa:	f7ff fc07 	bl	8006a0c <put_fat>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d109      	bne.n	800721c <create_chain+0x1b4>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6938      	ldr	r0, [r7, #16]
 8007214:	f7ff fbfa 	bl	8006a0c <put_fat>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d116      	bne.n	8007250 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	3b02      	subs	r3, #2
 8007232:	429a      	cmp	r2, r3
 8007234:	d804      	bhi.n	8007240 <create_chain+0x1d8>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	791b      	ldrb	r3, [r3, #4]
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	711a      	strb	r2, [r3, #4]
 800724e:	e007      	b.n	8007260 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d102      	bne.n	800725c <create_chain+0x1f4>
 8007256:	f04f 33ff 	mov.w	r3, #4294967295
 800725a:	e000      	b.n	800725e <create_chain+0x1f6>
 800725c:	2301      	movs	r3, #1
 800725e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007260:	69fb      	ldr	r3, [r7, #28]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800726a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007282:	3304      	adds	r3, #4
 8007284:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	899b      	ldrh	r3, [r3, #12]
 800728a:	b29b      	uxth	r3, r3
 800728c:	2200      	movs	r2, #0
 800728e:	4698      	mov	r8, r3
 8007290:	4691      	mov	r9, r2
 8007292:	4642      	mov	r2, r8
 8007294:	464b      	mov	r3, r9
 8007296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800729a:	f7f9 fb07 	bl	80008ac <__aeabi_uldivmod>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	895b      	ldrh	r3, [r3, #10]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2200      	movs	r2, #0
 80072ae:	461c      	mov	r4, r3
 80072b0:	4615      	mov	r5, r2
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f7f9 faf9 	bl	80008ac <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4613      	mov	r3, r2
 80072c0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	1d1a      	adds	r2, r3, #4
 80072c6:	61ba      	str	r2, [r7, #24]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <clmt_clust+0x6c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	e010      	b.n	80072f8 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d307      	bcc.n	80072ee <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3304      	adds	r3, #4
 80072ea:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072ec:	e7e9      	b.n	80072c2 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 80072ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007302 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b086      	sub	sp, #24
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d102      	bne.n	8007320 <dir_sdi+0x1e>
 800731a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731e:	e001      	b.n	8007324 <dir_sdi+0x22>
 8007320:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d904      	bls.n	8007334 <dir_sdi+0x32>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <dir_sdi+0x36>
		return FR_INT_ERR;
 8007334:	2302      	movs	r3, #2
 8007336:	e074      	b.n	8007422 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <dir_sdi+0x5c>
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d905      	bls.n	800735e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	8912      	ldrh	r2, [r2, #8]
 800736c:	4293      	cmp	r3, r2
 800736e:	d301      	bcc.n	8007374 <dir_sdi+0x72>
 8007370:	2302      	movs	r3, #2
 8007372:	e056      	b.n	8007422 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
 800737c:	e02d      	b.n	80073da <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	895b      	ldrh	r3, [r3, #10]
 8007382:	461a      	mov	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	899b      	ldrh	r3, [r3, #12]
 8007388:	fb02 f303 	mul.w	r3, r2, r3
 800738c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800738e:	e019      	b.n	80073c4 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff f9e5 	bl	8006764 <get_fat>
 800739a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d101      	bne.n	80073a8 <dir_sdi+0xa6>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e03c      	b.n	8007422 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d904      	bls.n	80073b8 <dir_sdi+0xb6>
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d301      	bcc.n	80073bc <dir_sdi+0xba>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e032      	b.n	8007422 <dir_sdi+0x120>
			ofs -= csz;
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d2e1      	bcs.n	8007390 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80073cc:	6979      	ldr	r1, [r7, #20]
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f7ff f9a8 	bl	8006724 <clust2sect>
 80073d4:	4602      	mov	r2, r0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <dir_sdi+0xea>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e01a      	b.n	8007422 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	899b      	ldrh	r3, [r3, #12]
 80073f4:	4619      	mov	r1, r3
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80073fc:	441a      	add	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	899b      	ldrh	r3, [r3, #12]
 800740c:	461a      	mov	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	fbb3 f0f2 	udiv	r0, r3, r2
 8007414:	fb00 f202 	mul.w	r2, r0, r2
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	18ca      	adds	r2, r1, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	3320      	adds	r3, #32
 8007440:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <dir_next+0x38>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d102      	bne.n	8007458 <dir_next+0x2e>
 8007452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007456:	e001      	b.n	800745c <dir_next+0x32>
 8007458:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	429a      	cmp	r2, r3
 8007460:	d801      	bhi.n	8007466 <dir_next+0x3c>
 8007462:	2304      	movs	r3, #4
 8007464:	e0c3      	b.n	80075ee <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	899b      	ldrh	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007472:	fb01 f202 	mul.w	r2, r1, r2
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 80a5 	bne.w	80075c8 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10b      	bne.n	80074a8 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	8912      	ldrh	r2, [r2, #8]
 8007498:	4293      	cmp	r3, r2
 800749a:	f0c0 8095 	bcc.w	80075c8 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80074a4:	2304      	movs	r3, #4
 80074a6:	e0a2      	b.n	80075ee <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	899b      	ldrh	r3, [r3, #12]
 80074ac:	461a      	mov	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	8952      	ldrh	r2, [r2, #10]
 80074b8:	3a01      	subs	r2, #1
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 8083 	bne.w	80075c8 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f7ff f94a 	bl	8006764 <get_fat>
 80074d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d801      	bhi.n	80074dc <dir_next+0xb2>
 80074d8:	2302      	movs	r3, #2
 80074da:	e088      	b.n	80075ee <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d101      	bne.n	80074e8 <dir_next+0xbe>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e082      	b.n	80075ee <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d360      	bcc.n	80075b4 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80074fe:	2304      	movs	r3, #4
 8007500:	e075      	b.n	80075ee <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7ff fdac 	bl	8007068 <create_chain>
 8007510:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <dir_next+0xf2>
 8007518:	2307      	movs	r3, #7
 800751a:	e068      	b.n	80075ee <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <dir_next+0xfc>
 8007522:	2302      	movs	r3, #2
 8007524:	e063      	b.n	80075ee <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d101      	bne.n	8007532 <dir_next+0x108>
 800752e:	2301      	movs	r3, #1
 8007530:	e05d      	b.n	80075ee <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	79db      	ldrb	r3, [r3, #7]
 8007536:	f043 0304 	orr.w	r3, r3, #4
 800753a:	b2da      	uxtb	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff f80d 	bl	8006560 <sync_window>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <dir_next+0x126>
 800754c:	2301      	movs	r3, #1
 800754e:	e04e      	b.n	80075ee <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	899b      	ldrh	r3, [r3, #12]
 800755a:	461a      	mov	r2, r3
 800755c:	2100      	movs	r1, #0
 800755e:	f7fe fe35 	bl	80061cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff f8db 	bl	8006724 <clust2sect>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	639a      	str	r2, [r3, #56]	@ 0x38
 8007574:	e012      	b.n	800759c <dir_next+0x172>
						fs->wflag = 1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7fe ffef 	bl	8006560 <sync_window>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <dir_next+0x162>
 8007588:	2301      	movs	r3, #1
 800758a:	e030      	b.n	80075ee <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3301      	adds	r3, #1
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	639a      	str	r2, [r3, #56]	@ 0x38
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	895b      	ldrh	r3, [r3, #10]
 80075a0:	461a      	mov	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d3e6      	bcc.n	8007576 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff f8b1 	bl	8006724 <clust2sect>
 80075c2:	4602      	mov	r2, r0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	899b      	ldrh	r3, [r3, #12]
 80075d8:	461a      	mov	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80075e0:	fb00 f202 	mul.w	r2, r0, r2
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	18ca      	adds	r2, r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b086      	sub	sp, #24
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007606:	2100      	movs	r1, #0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fe7a 	bl	8007302 <dir_sdi>
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d140      	bne.n	800769a <dir_alloc+0xa4>
		n = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	4619      	mov	r1, r3
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7fe ffe0 	bl	80065e8 <move_window>
 8007628:	4603      	mov	r3, r0
 800762a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d132      	bne.n	8007698 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b04      	cmp	r3, #4
 8007638:	d108      	bne.n	800764c <dir_alloc+0x56>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b25b      	sxtb	r3, r3
 8007642:	43db      	mvns	r3, r3
 8007644:	b2db      	uxtb	r3, r3
 8007646:	09db      	lsrs	r3, r3, #7
 8007648:	b2db      	uxtb	r3, r3
 800764a:	e00f      	b.n	800766c <dir_alloc+0x76>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2be5      	cmp	r3, #229	@ 0xe5
 8007654:	d004      	beq.n	8007660 <dir_alloc+0x6a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <dir_alloc+0x6e>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <dir_alloc+0x70>
 8007664:	2300      	movs	r3, #0
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	3301      	adds	r3, #1
 8007674:	613b      	str	r3, [r7, #16]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d102      	bne.n	8007684 <dir_alloc+0x8e>
 800767e:	e00c      	b.n	800769a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007680:	2300      	movs	r3, #0
 8007682:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007684:	2101      	movs	r1, #1
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fecf 	bl	800742a <dir_next>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c2      	beq.n	800761c <dir_alloc+0x26>
 8007696:	e000      	b.n	800769a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8007698:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b04      	cmp	r3, #4
 800769e:	d101      	bne.n	80076a4 <dir_alloc+0xae>
 80076a0:	2307      	movs	r3, #7
 80076a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	331a      	adds	r3, #26
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe fb7f 	bl	8005dc0 <ld_word>
 80076c2:	4603      	mov	r3, r0
 80076c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d109      	bne.n	80076e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	3314      	adds	r3, #20
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fb74 	bl	8005dc0 <ld_word>
 80076d8:	4603      	mov	r3, r0
 80076da:	041b      	lsls	r3, r3, #16
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	331a      	adds	r3, #26
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	b292      	uxth	r2, r2
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fc72 	bl	8005fec <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d109      	bne.n	8007724 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f103 0214 	add.w	r2, r3, #20
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	b29b      	uxth	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7fe fc64 	bl	8005fec <st_word>
	}
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800772c:	b590      	push	{r4, r7, lr}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	331a      	adds	r3, #26
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fb40 	bl	8005dc0 <ld_word>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <cmp_lfn+0x1e>
 8007746:	2300      	movs	r3, #0
 8007748:	e059      	b.n	80077fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007752:	1e5a      	subs	r2, r3, #1
 8007754:	4613      	mov	r3, r2
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007760:	2301      	movs	r3, #1
 8007762:	81fb      	strh	r3, [r7, #14]
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	e033      	b.n	80077d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800776a:	4a27      	ldr	r2, [pc, #156]	@ (8007808 <cmp_lfn+0xdc>)
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	4413      	add	r3, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fb21 	bl	8005dc0 <ld_word>
 800777e:	4603      	mov	r3, r0
 8007780:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007782:	89fb      	ldrh	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01a      	beq.n	80077be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2bfe      	cmp	r3, #254	@ 0xfe
 800778c:	d812      	bhi.n	80077b4 <cmp_lfn+0x88>
 800778e:	89bb      	ldrh	r3, [r7, #12]
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe f9eb 	bl	8005b6c <ff_wtoupper>
 8007796:	4603      	mov	r3, r0
 8007798:	461c      	mov	r4, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	617a      	str	r2, [r7, #20]
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe f9df 	bl	8005b6c <ff_wtoupper>
 80077ae:	4603      	mov	r3, r0
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d001      	beq.n	80077b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80077b4:	2300      	movs	r3, #0
 80077b6:	e022      	b.n	80077fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80077b8:	89bb      	ldrh	r3, [r7, #12]
 80077ba:	81fb      	strh	r3, [r7, #14]
 80077bc:	e006      	b.n	80077cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80077be:	89bb      	ldrh	r3, [r7, #12]
 80077c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d001      	beq.n	80077cc <cmp_lfn+0xa0>
 80077c8:	2300      	movs	r3, #0
 80077ca:	e018      	b.n	80077fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3301      	adds	r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d9c8      	bls.n	800776a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <cmp_lfn+0xd0>
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <cmp_lfn+0xd0>
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	4413      	add	r3, r2
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <cmp_lfn+0xd0>
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80077fc:	2301      	movs	r3, #1
}
 80077fe:	4618      	mov	r0, r3
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd90      	pop	{r4, r7, pc}
 8007806:	bf00      	nop
 8007808:	0800f300 	.word	0x0800f300

0800780c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	331a      	adds	r3, #26
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fad0 	bl	8005dc0 <ld_word>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <pick_lfn+0x1e>
 8007826:	2300      	movs	r3, #0
 8007828:	e04d      	b.n	80078c6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007832:	1e5a      	subs	r2, r3, #1
 8007834:	4613      	mov	r3, r2
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007840:	2301      	movs	r3, #1
 8007842:	81fb      	strh	r3, [r7, #14]
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	e028      	b.n	800789c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800784a:	4a21      	ldr	r2, [pc, #132]	@ (80078d0 <pick_lfn+0xc4>)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4413      	add	r3, r2
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	4413      	add	r3, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7fe fab1 	bl	8005dc0 <ld_word>
 800785e:	4603      	mov	r3, r0
 8007860:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007862:	89fb      	ldrh	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00f      	beq.n	8007888 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2bfe      	cmp	r3, #254	@ 0xfe
 800786c:	d901      	bls.n	8007872 <pick_lfn+0x66>
 800786e:	2300      	movs	r3, #0
 8007870:	e029      	b.n	80078c6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007872:	89bb      	ldrh	r3, [r7, #12]
 8007874:	81fb      	strh	r3, [r7, #14]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	617a      	str	r2, [r7, #20]
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	89fa      	ldrh	r2, [r7, #14]
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e006      	b.n	8007896 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007888:	89bb      	ldrh	r3, [r7, #12]
 800788a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800788e:	4293      	cmp	r3, r2
 8007890:	d001      	beq.n	8007896 <pick_lfn+0x8a>
 8007892:	2300      	movs	r3, #0
 8007894:	e017      	b.n	80078c6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	3301      	adds	r3, #1
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b0c      	cmp	r3, #12
 80078a0:	d9d3      	bls.n	800784a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80078b2:	d901      	bls.n	80078b8 <pick_lfn+0xac>
 80078b4:	2300      	movs	r3, #0
 80078b6:	e006      	b.n	80078c6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	2200      	movs	r2, #0
 80078c2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80078c4:	2301      	movs	r3, #1
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	0800f300 	.word	0x0800f300

080078d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4611      	mov	r1, r2
 80078e0:	461a      	mov	r2, r3
 80078e2:	460b      	mov	r3, r1
 80078e4:	71fb      	strb	r3, [r7, #7]
 80078e6:	4613      	mov	r3, r2
 80078e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	330d      	adds	r3, #13
 80078ee:	79ba      	ldrb	r2, [r7, #6]
 80078f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	330b      	adds	r3, #11
 80078f6:	220f      	movs	r2, #15
 80078f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	330c      	adds	r3, #12
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	331a      	adds	r3, #26
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe fb6f 	bl	8005fec <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	4613      	mov	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	82fb      	strh	r3, [r7, #22]
 8007922:	2300      	movs	r3, #0
 8007924:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007926:	8afb      	ldrh	r3, [r7, #22]
 8007928:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800792c:	4293      	cmp	r3, r2
 800792e:	d007      	beq.n	8007940 <put_lfn+0x6c>
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	61fa      	str	r2, [r7, #28]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007940:	4a17      	ldr	r2, [pc, #92]	@ (80079a0 <put_lfn+0xcc>)
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	4413      	add	r3, r2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4413      	add	r3, r2
 800794e:	8afa      	ldrh	r2, [r7, #22]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fb4a 	bl	8005fec <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007958:	8afb      	ldrh	r3, [r7, #22]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d102      	bne.n	8007964 <put_lfn+0x90>
 800795e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007962:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	3301      	adds	r3, #1
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d9da      	bls.n	8007926 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007970:	8afb      	ldrh	r3, [r7, #22]
 8007972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007976:	4293      	cmp	r3, r2
 8007978:	d006      	beq.n	8007988 <put_lfn+0xb4>
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d103      	bne.n	8007990 <put_lfn+0xbc>
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	79fa      	ldrb	r2, [r7, #7]
 8007994:	701a      	strb	r2, [r3, #0]
}
 8007996:	bf00      	nop
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	0800f300 	.word	0x0800f300

080079a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08c      	sub	sp, #48	@ 0x30
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80079b2:	220b      	movs	r2, #11
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7fe fbe7 	bl	800618a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d92b      	bls.n	8007a1a <gen_numname+0x76>
		sr = seq;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80079c6:	e022      	b.n	8007a0e <gen_numname+0x6a>
			wc = *lfn++;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	1c9a      	adds	r2, r3, #2
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80079d2:	2300      	movs	r3, #0
 80079d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d6:	e017      	b.n	8007a08 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	005a      	lsls	r2, r3, #1
 80079dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	4413      	add	r3, r2
 80079e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80079e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <gen_numname+0x5e>
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80079fc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007a00:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	3301      	adds	r3, #1
 8007a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	2b0f      	cmp	r3, #15
 8007a0c:	d9e4      	bls.n	80079d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1d8      	bne.n	80079c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007a1a:	2307      	movs	r3, #7
 8007a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	3330      	adds	r3, #48	@ 0x30
 8007a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a32:	2b39      	cmp	r3, #57	@ 0x39
 8007a34:	d904      	bls.n	8007a40 <gen_numname+0x9c>
 8007a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a3a:	3307      	adds	r3, #7
 8007a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	1e5a      	subs	r2, r3, #1
 8007a44:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007a46:	3330      	adds	r3, #48	@ 0x30
 8007a48:	443b      	add	r3, r7
 8007a4a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007a4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1df      	bne.n	8007a1e <gen_numname+0x7a>
	ns[i] = '~';
 8007a5e:	f107 0214 	add.w	r2, r7, #20
 8007a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a64:	4413      	add	r3, r2
 8007a66:	227e      	movs	r2, #126	@ 0x7e
 8007a68:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a6e:	e002      	b.n	8007a76 <gen_numname+0xd2>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	3301      	adds	r3, #1
 8007a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d205      	bcs.n	8007a8a <gen_numname+0xe6>
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	4413      	add	r3, r2
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d1f2      	bne.n	8007a70 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	2b07      	cmp	r3, #7
 8007a8e:	d807      	bhi.n	8007aa0 <gen_numname+0xfc>
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007a96:	3330      	adds	r3, #48	@ 0x30
 8007a98:	443b      	add	r3, r7
 8007a9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007a9e:	e000      	b.n	8007aa2 <gen_numname+0xfe>
 8007aa0:	2120      	movs	r1, #32
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	460a      	mov	r2, r1
 8007aae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	2b07      	cmp	r3, #7
 8007ab4:	d9e9      	bls.n	8007a8a <gen_numname+0xe6>
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	3730      	adds	r7, #48	@ 0x30
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007acc:	230b      	movs	r3, #11
 8007ace:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	0852      	lsrs	r2, r2, #1
 8007ad6:	01db      	lsls	r3, r3, #7
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	1c59      	adds	r1, r3, #1
 8007ae0:	6079      	str	r1, [r7, #4]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1ed      	bne.n	8007ad0 <sum_sfn+0x10>
	return sum;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b087      	sub	sp, #28
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	015b      	lsls	r3, r3, #5
 8007b14:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8007b16:	2300      	movs	r3, #0
 8007b18:	827b      	strh	r3, [r7, #18]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e017      	b.n	8007b50 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d103      	bne.n	8007b2e <xdir_sum+0x2c>
			i++;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	e00d      	b.n	8007b4a <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8007b2e:	8a7b      	ldrh	r3, [r7, #18]
 8007b30:	03db      	lsls	r3, r3, #15
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	8a7b      	ldrh	r3, [r7, #18]
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	440a      	add	r2, r1
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	4413      	add	r3, r2
 8007b48:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d3e3      	bcc.n	8007b20 <xdir_sum+0x1e>
		}
	}
	return sum;
 8007b58:	8a7b      	ldrh	r3, [r7, #18]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8007b72:	e01f      	b.n	8007bb4 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8007b74:	89bb      	ldrh	r3, [r7, #12]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fd fff8 	bl	8005b6c <ff_wtoupper>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8007b80:	89fb      	ldrh	r3, [r7, #14]
 8007b82:	03db      	lsls	r3, r3, #15
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	89bb      	ldrh	r3, [r7, #12]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8007b9a:	89fb      	ldrh	r3, [r7, #14]
 8007b9c:	03db      	lsls	r3, r3, #15
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	89fb      	ldrh	r3, [r7, #14]
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	89bb      	ldrh	r3, [r7, #12]
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	1c9a      	adds	r2, r3, #2
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	81bb      	strh	r3, [r7, #12]
 8007bbe:	89bb      	ldrh	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1d7      	bne.n	8007b74 <xname_sum+0xe>
	}
	return sum;
 8007bc4:	89fb      	ldrh	r3, [r7, #14]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8007bdc:	2340      	movs	r3, #64	@ 0x40
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e02c      	b.n	8007c40 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <get_xdir_info+0x28>
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe f8df 	bl	8005dc0 <ld_word>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd ff74 	bl	8005af4 <ff_convert>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8007c10:	897b      	ldrh	r3, [r7, #10]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <get_xdir_info+0x4e>
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2bfe      	cmp	r3, #254	@ 0xfe
 8007c1a:	d902      	bls.n	8007c22 <get_xdir_info+0x54>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e015      	b.n	8007c4e <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	617a      	str	r2, [r7, #20]
 8007c28:	897a      	ldrh	r2, [r7, #10]
 8007c2a:	b2d1      	uxtb	r1, r2
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	4413      	add	r3, r2
 8007c30:	460a      	mov	r2, r1
 8007c32:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3302      	adds	r3, #2
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3323      	adds	r3, #35	@ 0x23
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d3cb      	bcc.n	8007be6 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <get_xdir_info+0x94>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	617a      	str	r2, [r7, #20]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	223f      	movs	r2, #63	@ 0x3f
 8007c60:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	4413      	add	r3, r2
 8007c68:	331a      	adds	r3, #26
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2200      	movs	r2, #0
 8007c72:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	791a      	ldrb	r2, [r3, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	7b1b      	ldrb	r3, [r3, #12]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <get_xdir_info+0xca>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3338      	adds	r3, #56	@ 0x38
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe f8d2 	bl	8005e36 <ld_qword>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	e003      	b.n	8007ca0 <get_xdir_info+0xd2>
 8007c98:	f04f 0200 	mov.w	r2, #0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe f888 	bl	8005dc0 <ld_word>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	330e      	adds	r3, #14
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe f87f 	bl	8005dc0 <ld_word>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	811a      	strh	r2, [r3, #8]
}
 8007cca:	bf00      	nop
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8007cd4:	b590      	push	{r4, r7, lr}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fe fc7a 	bl	80065e8 <move_window>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <load_xdir+0x2e>
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	e09f      	b.n	8007e42 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b85      	cmp	r3, #133	@ 0x85
 8007d0a:	d001      	beq.n	8007d10 <load_xdir+0x3c>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e098      	b.n	8007e42 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d14:	2220      	movs	r2, #32
 8007d16:	4619      	mov	r1, r3
 8007d18:	6938      	ldr	r0, [r7, #16]
 8007d1a:	f7fe fa36 	bl	800618a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	3301      	adds	r3, #1
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	015b      	lsls	r3, r3, #5
 8007d28:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b5f      	cmp	r3, #95	@ 0x5f
 8007d2e:	d903      	bls.n	8007d38 <load_xdir+0x64>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8007d36:	d901      	bls.n	8007d3c <load_xdir+0x68>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e082      	b.n	8007e42 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fb73 	bl	800742a <dir_next>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <load_xdir+0x7e>
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	e077      	b.n	8007e42 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe fc43 	bl	80065e8 <move_window>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <load_xdir+0x9c>
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	e068      	b.n	8007e42 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d78:	d001      	beq.n	8007d7e <load_xdir+0xaa>
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	e061      	b.n	8007e42 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f103 0020 	add.w	r0, r3, #32
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d88:	2220      	movs	r2, #32
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	f7fe f9fd 	bl	800618a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3323      	adds	r3, #35	@ 0x23
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	332c      	adds	r3, #44	@ 0x2c
 8007d98:	4a2c      	ldr	r2, [pc, #176]	@ (8007e4c <load_xdir+0x178>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	08db      	lsrs	r3, r3, #3
 8007da0:	015b      	lsls	r3, r3, #5
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d201      	bcs.n	8007dac <load_xdir+0xd8>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e04a      	b.n	8007e42 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8007dac:	2340      	movs	r3, #64	@ 0x40
 8007dae:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8007db0:	2100      	movs	r1, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fb39 	bl	800742a <dir_next>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <load_xdir+0xf2>
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	e03d      	b.n	8007e42 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7fe fc09 	bl	80065e8 <move_window>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <load_xdir+0x110>
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	e02e      	b.n	8007e42 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2bc1      	cmp	r3, #193	@ 0xc1
 8007dec:	d001      	beq.n	8007df2 <load_xdir+0x11e>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e027      	b.n	8007e42 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8007df8:	d208      	bcs.n	8007e0c <load_xdir+0x138>
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	18d0      	adds	r0, r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	2220      	movs	r2, #32
 8007e06:	4619      	mov	r1, r3
 8007e08:	f7fe f9bf 	bl	800618a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3320      	adds	r3, #32
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d3ca      	bcc.n	8007db0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8007e20:	d80e      	bhi.n	8007e40 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8007e22:	6938      	ldr	r0, [r7, #16]
 8007e24:	f7ff fe6d 	bl	8007b02 <xdir_sum>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	461c      	mov	r4, r3
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	3302      	adds	r3, #2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fd ffc5 	bl	8005dc0 <ld_word>
 8007e36:	4603      	mov	r3, r0
 8007e38:	429c      	cmp	r4, r3
 8007e3a:	d001      	beq.n	8007e40 <load_xdir+0x16c>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e000      	b.n	8007e42 <load_xdir+0x16e>
	}
	return FR_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd90      	pop	{r4, r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	88888889 	.word	0x88888889

08007e50 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8007e50:	b5b0      	push	{r4, r5, r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6808      	ldr	r0, [r1, #0]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6a08      	ldr	r0, [r1, #32]
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8007e6e:	b2c8      	uxtb	r0, r1
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8007e78:	2000      	movs	r0, #0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8007e82:	2300      	movs	r3, #0
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff fa32 	bl	8007302 <dir_sdi>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff13 	bl	8007cd4 <load_xdir>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bdb0      	pop	{r4, r5, r7, pc}

08007ebc <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	1c9c      	adds	r4, r3, #2
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff fe16 	bl	8007b02 <xdir_sum>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7fe f886 	bl	8005fec <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff fa06 	bl	8007302 <dir_sdi>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8007efa:	e026      	b.n	8007f4a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f7fe fb6e 	bl	80065e8 <move_window>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d11d      	bne.n	8007f52 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	68f9      	ldr	r1, [r7, #12]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe f933 	bl	800618a <mem_cpy>
		dp->obj.fs->wflag = 1;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	613b      	str	r3, [r7, #16]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00e      	beq.n	8007f56 <store_xdir+0x9a>
		dirb += SZDIRE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3320      	adds	r3, #32
 8007f3c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8007f3e:	2100      	movs	r1, #0
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fa72 	bl	800742a <dir_next>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0d5      	beq.n	8007efc <store_xdir+0x40>
 8007f50:	e002      	b.n	8007f58 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8007f52:	bf00      	nop
 8007f54:	e000      	b.n	8007f58 <store_xdir+0x9c>
		if (--nent == 0) break;
 8007f56:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <store_xdir+0xa8>
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <store_xdir+0xac>
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	e000      	b.n	8007f6a <store_xdir+0xae>
 8007f68:	2302      	movs	r3, #2
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd90      	pop	{r4, r7, pc}

08007f72 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8007f72:	b590      	push	{r4, r7, lr}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8007f7c:	2240      	movs	r2, #64	@ 0x40
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7fe f923 	bl	80061cc <mem_set>
	dirb[XDIR_Type] = 0x85;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2285      	movs	r2, #133	@ 0x85
 8007f8a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3320      	adds	r3, #32
 8007f90:	22c0      	movs	r2, #192	@ 0xc0
 8007f92:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8007f94:	2300      	movs	r3, #0
 8007f96:	72bb      	strb	r3, [r7, #10]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	72fb      	strb	r3, [r7, #11]
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	813b      	strh	r3, [r7, #8]
 8007fa0:	2340      	movs	r3, #64	@ 0x40
 8007fa2:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	60fa      	str	r2, [r7, #12]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	22c1      	movs	r2, #193	@ 0xc1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	60fa      	str	r2, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8007fc0:	893b      	ldrh	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <create_xdir+0x6c>
 8007fc6:	7abb      	ldrb	r3, [r7, #10]
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4413      	add	r3, r2
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	813b      	strh	r3, [r7, #8]
 8007fd2:	893b      	ldrh	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <create_xdir+0x6c>
 8007fd8:	7abb      	ldrb	r3, [r7, #10]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	893a      	ldrh	r2, [r7, #8]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd ffff 	bl	8005fec <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e0      	bne.n	8007fc0 <create_xdir+0x4e>
		nb++;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	3301      	adds	r3, #1
 8008002:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8008004:	7abb      	ldrb	r3, [r7, #10]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1c8      	bne.n	8007fa4 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3323      	adds	r3, #35	@ 0x23
 8008016:	7aba      	ldrb	r2, [r7, #10]
 8008018:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3301      	adds	r3, #1
 800801e:	7afa      	ldrb	r2, [r7, #11]
 8008020:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8008028:	6838      	ldr	r0, [r7, #0]
 800802a:	f7ff fd9c 	bl	8007b66 <xname_sum>
 800802e:	4603      	mov	r3, r0
 8008030:	4619      	mov	r1, r3
 8008032:	4620      	mov	r0, r4
 8008034:	f7fd ffda 	bl	8005fec <st_word>
}
 8008038:	bf00      	nop
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	bd90      	pop	{r4, r7, pc}

08008040 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800804a:	2304      	movs	r3, #4
 800804c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008054:	23ff      	movs	r3, #255	@ 0xff
 8008056:	757b      	strb	r3, [r7, #21]
 8008058:	23ff      	movs	r3, #255	@ 0xff
 800805a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800805c:	e09f      	b.n	800819e <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008062:	4619      	mov	r1, r3
 8008064:	6938      	ldr	r0, [r7, #16]
 8008066:	f7fe fabf 	bl	80065e8 <move_window>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 809a 	bne.w	80081aa <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800807e:	7dbb      	ldrb	r3, [r7, #22]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008084:	2304      	movs	r3, #4
 8008086:	75fb      	strb	r3, [r7, #23]
 8008088:	e096      	b.n	80081b8 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b04      	cmp	r3, #4
 8008090:	d118      	bne.n	80080c4 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8008092:	7dbb      	ldrb	r3, [r7, #22]
 8008094:	2b85      	cmp	r3, #133	@ 0x85
 8008096:	d179      	bne.n	800818c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fe17 	bl	8007cd4 <load_xdir>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d17e      	bne.n	80081ae <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	3304      	adds	r3, #4
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	719a      	strb	r2, [r3, #6]
					}
					break;
 80080c2:	e074      	b.n	80081ae <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c8:	330b      	adds	r3, #11
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080d0:	73fb      	strb	r3, [r7, #15]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7bfa      	ldrb	r2, [r7, #15]
 80080d6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80080d8:	7dbb      	ldrb	r3, [r7, #22]
 80080da:	2be5      	cmp	r3, #229	@ 0xe5
 80080dc:	d00e      	beq.n	80080fc <dir_read+0xbc>
 80080de:	7dbb      	ldrb	r3, [r7, #22]
 80080e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80080e2:	d00b      	beq.n	80080fc <dir_read+0xbc>
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	f023 0320 	bic.w	r3, r3, #32
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	bf0c      	ite	eq
 80080ee:	2301      	moveq	r3, #1
 80080f0:	2300      	movne	r3, #0
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	461a      	mov	r2, r3
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d002      	beq.n	8008102 <dir_read+0xc2>
				ord = 0xFF;
 80080fc:	23ff      	movs	r3, #255	@ 0xff
 80080fe:	757b      	strb	r3, [r7, #21]
 8008100:	e044      	b.n	800818c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	2b0f      	cmp	r3, #15
 8008106:	d12f      	bne.n	8008168 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008108:	7dbb      	ldrb	r3, [r7, #22]
 800810a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008116:	7b5b      	ldrb	r3, [r3, #13]
 8008118:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800811a:	7dbb      	ldrb	r3, [r7, #22]
 800811c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008120:	75bb      	strb	r3, [r7, #22]
 8008122:	7dbb      	ldrb	r3, [r7, #22]
 8008124:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800812e:	7dba      	ldrb	r2, [r7, #22]
 8008130:	7d7b      	ldrb	r3, [r7, #21]
 8008132:	429a      	cmp	r2, r3
 8008134:	d115      	bne.n	8008162 <dir_read+0x122>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813a:	330d      	adds	r3, #13
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	7d3a      	ldrb	r2, [r7, #20]
 8008140:	429a      	cmp	r2, r3
 8008142:	d10e      	bne.n	8008162 <dir_read+0x122>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f7ff fb5c 	bl	800780c <pick_lfn>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <dir_read+0x122>
 800815a:	7d7b      	ldrb	r3, [r7, #21]
 800815c:	3b01      	subs	r3, #1
 800815e:	b2db      	uxtb	r3, r3
 8008160:	e000      	b.n	8008164 <dir_read+0x124>
 8008162:	23ff      	movs	r3, #255	@ 0xff
 8008164:	757b      	strb	r3, [r7, #21]
 8008166:	e011      	b.n	800818c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008168:	7d7b      	ldrb	r3, [r7, #21]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <dir_read+0x142>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fca4 	bl	8007ac0 <sum_sfn>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	7d3b      	ldrb	r3, [r7, #20]
 800817e:	4293      	cmp	r3, r2
 8008180:	d017      	beq.n	80081b2 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f04f 32ff 	mov.w	r2, #4294967295
 8008188:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800818a:	e012      	b.n	80081b2 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff f94b 	bl	800742a <dir_next>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <dir_read+0x176>
	while (dp->sect) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f47f af5b 	bne.w	800805e <dir_read+0x1e>
 80081a8:	e006      	b.n	80081b8 <dir_read+0x178>
		if (res != FR_OK) break;
 80081aa:	bf00      	nop
 80081ac:	e004      	b.n	80081b8 <dir_read+0x178>
					break;
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <dir_read+0x178>
					break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <dir_read+0x178>
		if (res != FR_OK) break;
 80081b6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <dir_read+0x184>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80081ce:	b590      	push	{r4, r7, lr}
 80081d0:	b089      	sub	sp, #36	@ 0x24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff f88f 	bl	8007302 <dir_sdi>
 80081e4:	4603      	mov	r3, r0
 80081e6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80081e8:	7ffb      	ldrb	r3, [r7, #31]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <dir_find+0x24>
 80081ee:	7ffb      	ldrb	r3, [r7, #31]
 80081f0:	e113      	b.n	800841a <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d165      	bne.n	80082c6 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fcb1 	bl	8007b66 <xname_sum>
 8008204:	4603      	mov	r3, r0
 8008206:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8008208:	e050      	b.n	80082ac <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	3324      	adds	r3, #36	@ 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f7fd fdd5 	bl	8005dc0 <ld_word>
 8008216:	4603      	mov	r3, r0
 8008218:	461a      	mov	r2, r3
 800821a:	893b      	ldrh	r3, [r7, #8]
 800821c:	4293      	cmp	r3, r2
 800821e:	d144      	bne.n	80082aa <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008228:	76fb      	strb	r3, [r7, #27]
 800822a:	2340      	movs	r3, #64	@ 0x40
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	e029      	b.n	8008288 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f003 031f 	and.w	r3, r3, #31
 800823a:	2b00      	cmp	r3, #0
 800823c:	d102      	bne.n	8008244 <dir_find+0x76>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	3302      	adds	r3, #2
 8008242:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	695a      	ldr	r2, [r3, #20]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	4413      	add	r3, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fd fdb7 	bl	8005dc0 <ld_word>
 8008252:	4603      	mov	r3, r0
 8008254:	4618      	mov	r0, r3
 8008256:	f7fd fc89 	bl	8005b6c <ff_wtoupper>
 800825a:	4603      	mov	r3, r0
 800825c:	461c      	mov	r4, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f7fd fc7e 	bl	8005b6c <ff_wtoupper>
 8008270:	4603      	mov	r3, r0
 8008272:	429c      	cmp	r4, r3
 8008274:	d10c      	bne.n	8008290 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8008276:	7efb      	ldrb	r3, [r7, #27]
 8008278:	3b01      	subs	r3, #1
 800827a:	76fb      	strb	r3, [r7, #27]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	3302      	adds	r3, #2
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	3301      	adds	r3, #1
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	7efb      	ldrb	r3, [r7, #27]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1d2      	bne.n	8008234 <dir_find+0x66>
 800828e:	e000      	b.n	8008292 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8008290:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8008292:	7efb      	ldrb	r3, [r7, #27]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d109      	bne.n	80082ac <dir_find+0xde>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <dir_find+0xf2>
 80082a8:	e000      	b.n	80082ac <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80082aa:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fec6 	bl	8008040 <dir_read>
 80082b4:	4603      	mov	r3, r0
 80082b6:	77fb      	strb	r3, [r7, #31]
 80082b8:	7ffb      	ldrb	r3, [r7, #31]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0a5      	beq.n	800820a <dir_find+0x3c>
 80082be:	e000      	b.n	80082c2 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80082c0:	bf00      	nop
		}
		return res;
 80082c2:	7ffb      	ldrb	r3, [r7, #31]
 80082c4:	e0a9      	b.n	800841a <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80082c6:	23ff      	movs	r3, #255	@ 0xff
 80082c8:	773b      	strb	r3, [r7, #28]
 80082ca:	7f3b      	ldrb	r3, [r7, #28]
 80082cc:	777b      	strb	r3, [r7, #29]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f04f 32ff 	mov.w	r2, #4294967295
 80082d4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	4619      	mov	r1, r3
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7fe f983 	bl	80065e8 <move_window>
 80082e2:	4603      	mov	r3, r0
 80082e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80082e6:	7ffb      	ldrb	r3, [r7, #31]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f040 8090 	bne.w	800840e <dir_find+0x240>
		c = dp->dir[DIR_Name];
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80082f6:	7fbb      	ldrb	r3, [r7, #30]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <dir_find+0x134>
 80082fc:	2304      	movs	r3, #4
 80082fe:	77fb      	strb	r3, [r7, #31]
 8008300:	e08a      	b.n	8008418 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008306:	330b      	adds	r3, #11
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800830e:	72fb      	strb	r3, [r7, #11]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7afa      	ldrb	r2, [r7, #11]
 8008314:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008316:	7fbb      	ldrb	r3, [r7, #30]
 8008318:	2be5      	cmp	r3, #229	@ 0xe5
 800831a:	d007      	beq.n	800832c <dir_find+0x15e>
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <dir_find+0x16c>
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	2b0f      	cmp	r3, #15
 800832a:	d006      	beq.n	800833a <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800832c:	23ff      	movs	r3, #255	@ 0xff
 800832e:	777b      	strb	r3, [r7, #29]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f04f 32ff 	mov.w	r2, #4294967295
 8008336:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008338:	e05e      	b.n	80083f8 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	2b0f      	cmp	r3, #15
 800833e:	d136      	bne.n	80083ae <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8008346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d154      	bne.n	80083f8 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800834e:	7fbb      	ldrb	r3, [r7, #30]
 8008350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00d      	beq.n	8008374 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835c:	7b5b      	ldrb	r3, [r3, #13]
 800835e:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008360:	7fbb      	ldrb	r3, [r7, #30]
 8008362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008366:	77bb      	strb	r3, [r7, #30]
 8008368:	7fbb      	ldrb	r3, [r7, #30]
 800836a:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008374:	7fba      	ldrb	r2, [r7, #30]
 8008376:	7f7b      	ldrb	r3, [r7, #29]
 8008378:	429a      	cmp	r2, r3
 800837a:	d115      	bne.n	80083a8 <dir_find+0x1da>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008380:	330d      	adds	r3, #13
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	7f3a      	ldrb	r2, [r7, #28]
 8008386:	429a      	cmp	r2, r3
 8008388:	d10e      	bne.n	80083a8 <dir_find+0x1da>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7ff f9c9 	bl	800772c <cmp_lfn>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <dir_find+0x1da>
 80083a0:	7f7b      	ldrb	r3, [r7, #29]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	e000      	b.n	80083aa <dir_find+0x1dc>
 80083a8:	23ff      	movs	r3, #255	@ 0xff
 80083aa:	777b      	strb	r3, [r7, #29]
 80083ac:	e024      	b.n	80083f8 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80083ae:	7f7b      	ldrb	r3, [r7, #29]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <dir_find+0x1fa>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff fb81 	bl	8007ac0 <sum_sfn>
 80083be:	4603      	mov	r3, r0
 80083c0:	461a      	mov	r2, r3
 80083c2:	7f3b      	ldrb	r3, [r7, #28]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d024      	beq.n	8008412 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <dir_find+0x21e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3340      	adds	r3, #64	@ 0x40
 80083de:	220b      	movs	r2, #11
 80083e0:	4619      	mov	r1, r3
 80083e2:	f7fd ff0e 	bl	8006202 <mem_cmp>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d014      	beq.n	8008416 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80083ec:	23ff      	movs	r3, #255	@ 0xff
 80083ee:	777b      	strb	r3, [r7, #29]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff f815 	bl	800742a <dir_next>
 8008400:	4603      	mov	r3, r0
 8008402:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8008404:	7ffb      	ldrb	r3, [r7, #31]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f43f af65 	beq.w	80082d6 <dir_find+0x108>
 800840c:	e004      	b.n	8008418 <dir_find+0x24a>
		if (res != FR_OK) break;
 800840e:	bf00      	nop
 8008410:	e002      	b.n	8008418 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008416:	bf00      	nop

	return res;
 8008418:	7ffb      	ldrb	r3, [r7, #31]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3724      	adds	r7, #36	@ 0x24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd90      	pop	{r4, r7, pc}
	...

08008424 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008424:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008428:	b0a0      	sub	sp, #128	@ 0x80
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800843a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <dir_register+0x22>
 8008442:	2306      	movs	r3, #6
 8008444:	e192      	b.n	800876c <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008446:	2300      	movs	r3, #0
 8008448:	677b      	str	r3, [r7, #116]	@ 0x74
 800844a:	e002      	b.n	8008452 <dir_register+0x2e>
 800844c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800844e:	3301      	adds	r3, #1
 8008450:	677b      	str	r3, [r7, #116]	@ 0x74
 8008452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f4      	bne.n	800844c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b04      	cmp	r3, #4
 8008468:	f040 80a3 	bne.w	80085b2 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800846c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800846e:	330e      	adds	r3, #14
 8008470:	4aa4      	ldr	r2, [pc, #656]	@ (8008704 <dir_register+0x2e0>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	08db      	lsrs	r3, r3, #3
 8008478:	3302      	adds	r3, #2
 800847a:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800847c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f8b9 	bl	80075f6 <dir_alloc>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800848a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <dir_register+0x74>
 8008492:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008496:	e169      	b.n	800876c <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800849c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800849e:	3b01      	subs	r3, #1
 80084a0:	015b      	lsls	r3, r3, #5
 80084a2:	1ad2      	subs	r2, r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d076      	beq.n	800859e <dir_register+0x17a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	79db      	ldrb	r3, [r3, #7]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d070      	beq.n	800859e <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80084c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80084c4:	8949      	ldrh	r1, [r1, #10]
 80084c6:	4608      	mov	r0, r1
 80084c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80084ca:	8989      	ldrh	r1, [r1, #12]
 80084cc:	fb00 f101 	mul.w	r1, r0, r1
 80084d0:	2000      	movs	r0, #0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4605      	mov	r5, r0
 80084d6:	eb12 0804 	adds.w	r8, r2, r4
 80084da:	eb43 0905 	adc.w	r9, r3, r5
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fcaa 	bl	8006e40 <fill_first_frag>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80084f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <dir_register+0xdc>
 80084fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80084fe:	e135      	b.n	800876c <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008506:	f04f 32ff 	mov.w	r2, #4294967295
 800850a:	4619      	mov	r1, r3
 800850c:	f7fe fcc7 	bl	8006e9e <fill_last_frag>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8008516:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <dir_register+0x100>
 800851e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008522:	e123      	b.n	800876c <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fc8f 	bl	8007e50 <load_obj_dir>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8008538:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <dir_register+0x122>
 8008540:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008544:	e112      	b.n	800876c <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8008546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008554:	4608      	mov	r0, r1
 8008556:	f7fd fd90 	bl	800607a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800855a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008568:	4608      	mov	r0, r1
 800856a:	f7fd fd86 	bl	800607a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	79da      	ldrb	r2, [r3, #7]
 8008572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	3321      	adds	r3, #33	@ 0x21
 8008578:	f042 0201 	orr.w	r2, r2, #1
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8008580:	f107 0308 	add.w	r3, r7, #8
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fc99 	bl	8007ebc <store_xdir>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8008590:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <dir_register+0x17a>
 8008598:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800859c:	e0e6      	b.n	800876c <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800859e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085a0:	695a      	ldr	r2, [r3, #20]
 80085a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fce2 	bl	8007f72 <create_xdir>
		return FR_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e0dc      	b.n	800876c <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80085b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80085bc:	220c      	movs	r2, #12
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd fde3 	bl	800618a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80085c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d033      	beq.n	8008638 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2240      	movs	r2, #64	@ 0x40
 80085d4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 80085d8:	2301      	movs	r3, #1
 80085da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085dc:	e016      	b.n	800860c <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80085e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80085ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ee:	f7ff f9d9 	bl	80079a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fdeb 	bl	80081ce <dir_find>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 80085fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008602:	2b00      	cmp	r3, #0
 8008604:	d106      	bne.n	8008614 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8008606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008608:	3301      	adds	r3, #1
 800860a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800860c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800860e:	2b63      	cmp	r3, #99	@ 0x63
 8008610:	d9e5      	bls.n	80085de <dir_register+0x1ba>
 8008612:	e000      	b.n	8008616 <dir_register+0x1f2>
			if (res != FR_OK) break;
 8008614:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008618:	2b64      	cmp	r3, #100	@ 0x64
 800861a:	d101      	bne.n	8008620 <dir_register+0x1fc>
 800861c:	2307      	movs	r3, #7
 800861e:	e0a5      	b.n	800876c <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008620:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008624:	2b04      	cmp	r3, #4
 8008626:	d002      	beq.n	800862e <dir_register+0x20a>
 8008628:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800862c:	e09e      	b.n	800876c <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800862e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008638:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <dir_register+0x230>
 8008644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008646:	330c      	adds	r3, #12
 8008648:	4a2f      	ldr	r2, [pc, #188]	@ (8008708 <dir_register+0x2e4>)
 800864a:	fba2 2303 	umull	r2, r3, r2, r3
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	3301      	adds	r3, #1
 8008652:	e000      	b.n	8008656 <dir_register+0x232>
 8008654:	2301      	movs	r3, #1
 8008656:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008658:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fe ffcb 	bl	80075f6 <dir_alloc>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008666:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800866a:	2b00      	cmp	r3, #0
 800866c:	d14f      	bne.n	800870e <dir_register+0x2ea>
 800866e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008670:	3b01      	subs	r3, #1
 8008672:	673b      	str	r3, [r7, #112]	@ 0x70
 8008674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008676:	2b00      	cmp	r3, #0
 8008678:	d049      	beq.n	800870e <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800867e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008680:	015b      	lsls	r3, r3, #5
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe fe3b 	bl	8007302 <dir_sdi>
 800868c:	4603      	mov	r3, r0
 800868e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8008692:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008696:	2b00      	cmp	r3, #0
 8008698:	d139      	bne.n	800870e <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3340      	adds	r3, #64	@ 0x40
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fa0e 	bl	8007ac0 <sum_sfn>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ae:	4619      	mov	r1, r3
 80086b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086b2:	f7fd ff99 	bl	80065e8 <move_window>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 80086bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d123      	bne.n	800870c <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80086c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086c6:	6918      	ldr	r0, [r3, #16]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80086cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80086d4:	f7ff f8fe 	bl	80078d4 <put_lfn>
				fs->wflag = 1;
 80086d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086da:	2201      	movs	r2, #1
 80086dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80086de:	2100      	movs	r1, #0
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fe fea2 	bl	800742a <dir_next>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 80086ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <dir_register+0x2ea>
 80086f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086f6:	3b01      	subs	r3, #1
 80086f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80086fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1d4      	bne.n	80086aa <dir_register+0x286>
 8008700:	e005      	b.n	800870e <dir_register+0x2ea>
 8008702:	bf00      	nop
 8008704:	88888889 	.word	0x88888889
 8008708:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800870c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800870e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008712:	2b00      	cmp	r3, #0
 8008714:	d128      	bne.n	8008768 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871a:	4619      	mov	r1, r3
 800871c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800871e:	f7fd ff63 	bl	80065e8 <move_window>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8008728:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11b      	bne.n	8008768 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008734:	2220      	movs	r2, #32
 8008736:	2100      	movs	r1, #0
 8008738:	4618      	mov	r0, r3
 800873a:	f7fd fd47 	bl	80061cc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3340      	adds	r3, #64	@ 0x40
 8008746:	220b      	movs	r2, #11
 8008748:	4619      	mov	r1, r3
 800874a:	f7fd fd1e 	bl	800618a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008758:	330c      	adds	r3, #12
 800875a:	f002 0218 	and.w	r2, r2, #24
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008764:	2201      	movs	r2, #1
 8008766:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008768:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800876c:	4618      	mov	r0, r3
 800876e:	3780      	adds	r7, #128	@ 0x80
 8008770:	46bd      	mov	sp, r7
 8008772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008776:	bf00      	nop

08008778 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008778:	b5b0      	push	{r4, r5, r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 80d9 	beq.w	800894a <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b04      	cmp	r3, #4
 800879e:	d106      	bne.n	80087ae <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fa11 	bl	8007bce <get_xdir_info>
		return;
 80087ac:	e0ce      	b.n	800894c <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d032      	beq.n	800881e <get_fileinfo+0xa6>
			i = j = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80087c0:	e01b      	b.n	80087fa <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80087c2:	89fb      	ldrh	r3, [r7, #14]
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fd f994 	bl	8005af4 <ff_convert>
 80087cc:	4603      	mov	r3, r0
 80087ce:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d102      	bne.n	80087dc <get_fileinfo+0x64>
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	e01a      	b.n	8008812 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	2bfe      	cmp	r3, #254	@ 0xfe
 80087e0:	d902      	bls.n	80087e8 <get_fileinfo+0x70>
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e014      	b.n	8008812 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	61fa      	str	r2, [r7, #28]
 80087ee:	89fa      	ldrh	r2, [r7, #14]
 80087f0:	b2d1      	uxtb	r1, r2
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4413      	add	r3, r2
 80087f6:	460a      	mov	r2, r1
 80087f8:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	61b9      	str	r1, [r7, #24]
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	81fb      	strh	r3, [r7, #14]
 800880c:	89fb      	ldrh	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1d7      	bne.n	80087c2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	331a      	adds	r3, #26
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	331a      	adds	r3, #26
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008832:	e04d      	b.n	80088d0 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	1c59      	adds	r1, r3, #1
 800883c:	61f9      	str	r1, [r7, #28]
 800883e:	4413      	add	r3, r2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b20      	cmp	r3, #32
 8008848:	d041      	beq.n	80088ce <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	2b05      	cmp	r3, #5
 800884e:	d101      	bne.n	8008854 <get_fileinfo+0xdc>
 8008850:	23e5      	movs	r3, #229	@ 0xe5
 8008852:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2b09      	cmp	r3, #9
 8008858:	d10f      	bne.n	800887a <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800885a:	89bb      	ldrh	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d105      	bne.n	800886c <get_fileinfo+0xf4>
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	4413      	add	r3, r2
 8008866:	331a      	adds	r3, #26
 8008868:	222e      	movs	r2, #46	@ 0x2e
 800886a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	61ba      	str	r2, [r7, #24]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	4413      	add	r3, r2
 8008876:	222e      	movs	r2, #46	@ 0x2e
 8008878:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	4413      	add	r3, r2
 8008880:	330d      	adds	r3, #13
 8008882:	7dfa      	ldrb	r2, [r7, #23]
 8008884:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008886:	89bb      	ldrh	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11c      	bne.n	80088c6 <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	2b40      	cmp	r3, #64	@ 0x40
 8008890:	d913      	bls.n	80088ba <get_fileinfo+0x142>
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	2b5a      	cmp	r3, #90	@ 0x5a
 8008896:	d810      	bhi.n	80088ba <get_fileinfo+0x142>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889c:	330c      	adds	r3, #12
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d901      	bls.n	80088ac <get_fileinfo+0x134>
 80088a8:	2310      	movs	r3, #16
 80088aa:	e000      	b.n	80088ae <get_fileinfo+0x136>
 80088ac:	2308      	movs	r3, #8
 80088ae:	4013      	ands	r3, r2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	3320      	adds	r3, #32
 80088b8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	4413      	add	r3, r2
 80088c0:	331a      	adds	r3, #26
 80088c2:	7dfa      	ldrb	r2, [r7, #23]
 80088c4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	3301      	adds	r3, #1
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	e000      	b.n	80088d0 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 80088ce:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	2b0a      	cmp	r3, #10
 80088d4:	d9ae      	bls.n	8008834 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 80088d6:	89bb      	ldrh	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	4413      	add	r3, r2
 80088e2:	331a      	adds	r3, #26
 80088e4:	2200      	movs	r2, #0
 80088e6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	330c      	adds	r3, #12
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <get_fileinfo+0x180>
 80088f4:	2300      	movs	r3, #0
 80088f6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	330d      	adds	r3, #13
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008908:	7ada      	ldrb	r2, [r3, #11]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008912:	331c      	adds	r3, #28
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd fa6b 	bl	8005df0 <ld_dword>
 800891a:	4603      	mov	r3, r0
 800891c:	2200      	movs	r2, #0
 800891e:	461c      	mov	r4, r3
 8008920:	4615      	mov	r5, r2
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892c:	3316      	adds	r3, #22
 800892e:	4618      	mov	r0, r3
 8008930:	f7fd fa5e 	bl	8005df0 <ld_dword>
 8008934:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	b29a      	uxth	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	815a      	strh	r2, [r3, #10]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	b29a      	uxth	r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	811a      	strh	r2, [r3, #8]
 8008948:	e000      	b.n	800894c <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800894a:	bf00      	nop
}
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008954 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	@ 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	61ba      	str	r2, [r7, #24]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4413      	add	r3, r2
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008982:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008984:	2b1f      	cmp	r3, #31
 8008986:	d940      	bls.n	8008a0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008988:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800898a:	2b2f      	cmp	r3, #47	@ 0x2f
 800898c:	d006      	beq.n	800899c <create_name+0x48>
 800898e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008990:	2b5c      	cmp	r3, #92	@ 0x5c
 8008992:	d110      	bne.n	80089b6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008994:	e002      	b.n	800899c <create_name+0x48>
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	3301      	adds	r3, #1
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	4413      	add	r3, r2
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80089a6:	d0f6      	beq.n	8008996 <create_name+0x42>
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	4413      	add	r3, r2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80089b2:	d0f0      	beq.n	8008996 <create_name+0x42>
			break;
 80089b4:	e02a      	b.n	8008a0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80089ba:	d901      	bls.n	80089c0 <create_name+0x6c>
 80089bc:	2306      	movs	r3, #6
 80089be:	e17d      	b.n	8008cbc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80089c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80089c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089c8:	2101      	movs	r1, #1
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd f892 	bl	8005af4 <ff_convert>
 80089d0:	4603      	mov	r3, r0
 80089d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80089d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <create_name+0x8a>
 80089da:	2306      	movs	r3, #6
 80089dc:	e16e      	b.n	8008cbc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80089de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80089e2:	d809      	bhi.n	80089f8 <create_name+0xa4>
 80089e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089e6:	4619      	mov	r1, r3
 80089e8:	488d      	ldr	r0, [pc, #564]	@ (8008c20 <create_name+0x2cc>)
 80089ea:	f7fd fc31 	bl	8006250 <chk_chr>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <create_name+0xa4>
 80089f4:	2306      	movs	r3, #6
 80089f6:	e161      	b.n	8008cbc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	617a      	str	r2, [r7, #20]
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008a08:	e7b4      	b.n	8008974 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008a0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	441a      	add	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a18:	2b1f      	cmp	r3, #31
 8008a1a:	d801      	bhi.n	8008a20 <create_name+0xcc>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	e000      	b.n	8008a22 <create_name+0xce>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a26:	e011      	b.n	8008a4c <create_name+0xf8>
		w = lfn[di - 1];
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d002      	beq.n	8008a46 <create_name+0xf2>
 8008a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a42:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a44:	d106      	bne.n	8008a54 <create_name+0x100>
		di--;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1ea      	bne.n	8008a28 <create_name+0xd4>
 8008a52:	e000      	b.n	8008a56 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008a54:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <create_name+0x118>
 8008a68:	2306      	movs	r3, #6
 8008a6a:	e127      	b.n	8008cbc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3340      	adds	r3, #64	@ 0x40
 8008a70:	220b      	movs	r2, #11
 8008a72:	2120      	movs	r1, #32
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fd fba9 	bl	80061cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61bb      	str	r3, [r7, #24]
 8008a7e:	e002      	b.n	8008a86 <create_name+0x132>
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	3301      	adds	r3, #1
 8008a84:	61bb      	str	r3, [r7, #24]
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d0f5      	beq.n	8008a80 <create_name+0x12c>
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aa0:	d0ee      	beq.n	8008a80 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <create_name+0x168>
 8008aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008aac:	f043 0303 	orr.w	r3, r3, #3
 8008ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008ab4:	e002      	b.n	8008abc <create_name+0x168>
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <create_name+0x182>
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ad4:	d1ef      	bne.n	8008ab6 <create_name+0x162>

	i = b = 0; ni = 8;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008adc:	2300      	movs	r3, #0
 8008ade:	623b      	str	r3, [r7, #32]
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	61ba      	str	r2, [r7, #24]
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8090 	beq.w	8008c1c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d006      	beq.n	8008b10 <create_name+0x1bc>
 8008b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b06:	d10a      	bne.n	8008b1e <create_name+0x1ca>
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d006      	beq.n	8008b1e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b14:	f043 0303 	orr.w	r3, r3, #3
 8008b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b1c:	e07d      	b.n	8008c1a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008b1e:	6a3a      	ldr	r2, [r7, #32]
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d203      	bcs.n	8008b2e <create_name+0x1da>
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d123      	bne.n	8008b76 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	2b0b      	cmp	r3, #11
 8008b32:	d106      	bne.n	8008b42 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b38:	f043 0303 	orr.w	r3, r3, #3
 8008b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b40:	e075      	b.n	8008c2e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d005      	beq.n	8008b56 <create_name+0x202>
 8008b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b4e:	f043 0303 	orr.w	r3, r3, #3
 8008b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d866      	bhi.n	8008c2c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	2308      	movs	r3, #8
 8008b64:	623b      	str	r3, [r7, #32]
 8008b66:	230b      	movs	r3, #11
 8008b68:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b74:	e051      	b.n	8008c1a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b7a:	d914      	bls.n	8008ba6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008b7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fc ffb7 	bl	8005af4 <ff_convert>
 8008b86:	4603      	mov	r3, r0
 8008b88:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008b8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d004      	beq.n	8008b9a <create_name+0x246>
 8008b90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b92:	3b80      	subs	r3, #128	@ 0x80
 8008b94:	4a23      	ldr	r2, [pc, #140]	@ (8008c24 <create_name+0x2d0>)
 8008b96:	5cd3      	ldrb	r3, [r2, r3]
 8008b98:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b9e:	f043 0302 	orr.w	r3, r3, #2
 8008ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008ba6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <create_name+0x268>
 8008bac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bae:	4619      	mov	r1, r3
 8008bb0:	481d      	ldr	r0, [pc, #116]	@ (8008c28 <create_name+0x2d4>)
 8008bb2:	f7fd fb4d 	bl	8006250 <chk_chr>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008bbc:	235f      	movs	r3, #95	@ 0x5f
 8008bbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc4:	f043 0303 	orr.w	r3, r3, #3
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bcc:	e01b      	b.n	8008c06 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bd0:	2b40      	cmp	r3, #64	@ 0x40
 8008bd2:	d909      	bls.n	8008be8 <create_name+0x294>
 8008bd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bd6:	2b5a      	cmp	r3, #90	@ 0x5a
 8008bd8:	d806      	bhi.n	8008be8 <create_name+0x294>
					b |= 2;
 8008bda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bde:	f043 0302 	orr.w	r3, r3, #2
 8008be2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008be6:	e00e      	b.n	8008c06 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bea:	2b60      	cmp	r3, #96	@ 0x60
 8008bec:	d90b      	bls.n	8008c06 <create_name+0x2b2>
 8008bee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bf0:	2b7a      	cmp	r3, #122	@ 0x7a
 8008bf2:	d808      	bhi.n	8008c06 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bf8:	f043 0301 	orr.w	r3, r3, #1
 8008bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c02:	3b20      	subs	r3, #32
 8008c04:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	623a      	str	r2, [r7, #32]
 8008c0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c0e:	b2d1      	uxtb	r1, r2
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4413      	add	r3, r2
 8008c14:	460a      	mov	r2, r1
 8008c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 8008c1a:	e763      	b.n	8008ae4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008c1c:	bf00      	nop
 8008c1e:	e006      	b.n	8008c2e <create_name+0x2da>
 8008c20:	0800ee3c 	.word	0x0800ee3c
 8008c24:	0800f280 	.word	0x0800f280
 8008c28:	0800ee48 	.word	0x0800ee48
			if (si > di) break;			/* No extension */
 8008c2c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c34:	2be5      	cmp	r3, #229	@ 0xe5
 8008c36:	d103      	bne.n	8008c40 <create_name+0x2ec>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2205      	movs	r2, #5
 8008c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d104      	bne.n	8008c50 <create_name+0x2fc>
 8008c46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008c50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c54:	f003 030c 	and.w	r3, r3, #12
 8008c58:	2b0c      	cmp	r3, #12
 8008c5a:	d005      	beq.n	8008c68 <create_name+0x314>
 8008c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d105      	bne.n	8008c74 <create_name+0x320>
 8008c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c6c:	f043 0302 	orr.w	r3, r3, #2
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d117      	bne.n	8008cb0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008c80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d105      	bne.n	8008c98 <create_name+0x344>
 8008c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c90:	f043 0310 	orr.w	r3, r3, #16
 8008c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008c98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d105      	bne.n	8008cb0 <create_name+0x35c>
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca8:	f043 0308 	orr.w	r3, r3, #8
 8008cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008cb6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8008cba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3728      	adds	r7, #40	@ 0x28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008cd8:	e002      	b.n	8008ce0 <follow_path+0x1c>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ce6:	d0f8      	beq.n	8008cda <follow_path+0x16>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b5c      	cmp	r3, #92	@ 0x5c
 8008cee:	d0f4      	beq.n	8008cda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b1f      	cmp	r3, #31
 8008d02:	d80a      	bhi.n	8008d1a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2280      	movs	r2, #128	@ 0x80
 8008d08:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fe faf7 	bl	8007302 <dir_sdi>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]
 8008d18:	e07d      	b.n	8008e16 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d1a:	463b      	mov	r3, r7
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7ff fe18 	bl	8008954 <create_name>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d16e      	bne.n	8008e0c <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fa4d 	bl	80081ce <dir_find>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8008d3e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d161      	bne.n	8008e10 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d15c      	bne.n	8008e10 <follow_path+0x14c>
 8008d56:	2305      	movs	r3, #5
 8008d58:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008d5a:	e059      	b.n	8008e10 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d156      	bne.n	8008e14 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	799b      	ldrb	r3, [r3, #6]
 8008d6a:	f003 0310 	and.w	r3, r3, #16
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8008d72:	2305      	movs	r3, #5
 8008d74:	75fb      	strb	r3, [r7, #23]
 8008d76:	e04e      	b.n	8008e16 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d130      	bne.n	8008de2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	79d2      	ldrb	r2, [r2, #7]
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	3334      	adds	r3, #52	@ 0x34
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fd f81f 	bl	8005df0 <ld_dword>
 8008db2:	4602      	mov	r2, r0
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	3321      	adds	r3, #33	@ 0x21
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	3338      	adds	r3, #56	@ 0x38
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fd f830 	bl	8005e36 <ld_qword>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	6939      	ldr	r1, [r7, #16]
 8008ddc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008de0:	e79b      	b.n	8008d1a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	8992      	ldrh	r2, [r2, #12]
 8008df0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008df4:	fb00 f202 	mul.w	r2, r0, r2
 8008df8:	1a9b      	subs	r3, r3, r2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f7fe fc55 	bl	80076ae <ld_clust>
 8008e04:	4602      	mov	r2, r0
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e0a:	e786      	b.n	8008d1a <follow_path+0x56>
			if (res != FR_OK) break;
 8008e0c:	bf00      	nop
 8008e0e:	e002      	b.n	8008e16 <follow_path+0x152>
				break;
 8008e10:	bf00      	nop
 8008e12:	e000      	b.n	8008e16 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e14:	bf00      	nop
			}
		}
	}

	return res;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d031      	beq.n	8008e9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e002      	b.n	8008e44 <get_ldnumber+0x24>
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	3301      	adds	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b1f      	cmp	r3, #31
 8008e4a:	d903      	bls.n	8008e54 <get_ldnumber+0x34>
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e52:	d1f4      	bne.n	8008e3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e5a:	d11c      	bne.n	8008e96 <get_ldnumber+0x76>
			tp = *path;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	60fa      	str	r2, [r7, #12]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	3b30      	subs	r3, #48	@ 0x30
 8008e6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d80e      	bhi.n	8008e92 <get_ldnumber+0x72>
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d10a      	bne.n	8008e92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <get_ldnumber+0x72>
					vol = (int)i;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	e002      	b.n	8008e9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008e9a:	693b      	ldr	r3, [r7, #16]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	70da      	strb	r2, [r3, #3]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fd fb90 	bl	80065e8 <move_window>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <check_fs+0x2a>
 8008ece:	2304      	movs	r3, #4
 8008ed0:	e044      	b.n	8008f5c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	333c      	adds	r3, #60	@ 0x3c
 8008ed6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fc ff70 	bl	8005dc0 <ld_word>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d001      	beq.n	8008ef0 <check_fs+0x48>
 8008eec:	2303      	movs	r3, #3
 8008eee:	e035      	b.n	8008f5c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ef6:	2be9      	cmp	r3, #233	@ 0xe9
 8008ef8:	d009      	beq.n	8008f0e <check_fs+0x66>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f00:	2beb      	cmp	r3, #235	@ 0xeb
 8008f02:	d11e      	bne.n	8008f42 <check_fs+0x9a>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f0a:	2b90      	cmp	r3, #144	@ 0x90
 8008f0c:	d119      	bne.n	8008f42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	333c      	adds	r3, #60	@ 0x3c
 8008f12:	3336      	adds	r3, #54	@ 0x36
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fc ff6b 	bl	8005df0 <ld_dword>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f20:	4a10      	ldr	r2, [pc, #64]	@ (8008f64 <check_fs+0xbc>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d101      	bne.n	8008f2a <check_fs+0x82>
 8008f26:	2300      	movs	r3, #0
 8008f28:	e018      	b.n	8008f5c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	333c      	adds	r3, #60	@ 0x3c
 8008f2e:	3352      	adds	r3, #82	@ 0x52
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fc ff5d 	bl	8005df0 <ld_dword>
 8008f36:	4603      	mov	r3, r0
 8008f38:	4a0b      	ldr	r2, [pc, #44]	@ (8008f68 <check_fs+0xc0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d101      	bne.n	8008f42 <check_fs+0x9a>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e00c      	b.n	8008f5c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	333c      	adds	r3, #60	@ 0x3c
 8008f46:	220b      	movs	r2, #11
 8008f48:	4908      	ldr	r1, [pc, #32]	@ (8008f6c <check_fs+0xc4>)
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fd f959 	bl	8006202 <mem_cmp>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <check_fs+0xb2>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e000      	b.n	8008f5c <check_fs+0xb4>
#endif
	return 2;
 8008f5a:	2302      	movs	r3, #2
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	00544146 	.word	0x00544146
 8008f68:	33544146 	.word	0x33544146
 8008f6c:	0800ee50 	.word	0x0800ee50

08008f70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f74:	b09c      	sub	sp, #112	@ 0x70
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	61f8      	str	r0, [r7, #28]
 8008f7a:	61b9      	str	r1, [r7, #24]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f86:	69f8      	ldr	r0, [r7, #28]
 8008f88:	f7ff ff4a 	bl	8008e20 <get_ldnumber>
 8008f8c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da01      	bge.n	8008f98 <find_volume+0x28>
 8008f94:	230b      	movs	r3, #11
 8008f96:	e376      	b.n	8009686 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f98:	4aa6      	ldr	r2, [pc, #664]	@ (8009234 <find_volume+0x2c4>)
 8008f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa0:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <find_volume+0x3c>
 8008fa8:	230c      	movs	r3, #12
 8008faa:	e36c      	b.n	8009686 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008fb0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	f023 0301 	bic.w	r3, r3, #1
 8008fb8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d01a      	beq.n	8008ff8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8008fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fc fe5a 	bl	8005c80 <disk_status>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008fd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10c      	bne.n	8008ff8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <find_volume+0x84>
 8008fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8008ff0:	230a      	movs	r3, #10
 8008ff2:	e348      	b.n	8009686 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e346      	b.n	8009686 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009000:	b2da      	uxtb	r2, r3
 8009002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009004:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	4618      	mov	r0, r3
 800900c:	f7fc fe52 	bl	8005cb4 <disk_initialize>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009016:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009022:	2303      	movs	r3, #3
 8009024:	e32f      	b.n	8009686 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <find_volume+0xcc>
 800902c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009038:	230a      	movs	r3, #10
 800903a:	e324      	b.n	8009686 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800903c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800903e:	7858      	ldrb	r0, [r3, #1]
 8009040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009042:	330c      	adds	r3, #12
 8009044:	461a      	mov	r2, r3
 8009046:	2102      	movs	r1, #2
 8009048:	f7fc fe9c 	bl	8005d84 <disk_ioctl>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <find_volume+0xe6>
 8009052:	2301      	movs	r3, #1
 8009054:	e317      	b.n	8009686 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009058:	899b      	ldrh	r3, [r3, #12]
 800905a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905e:	d80d      	bhi.n	800907c <find_volume+0x10c>
 8009060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009062:	899b      	ldrh	r3, [r3, #12]
 8009064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009068:	d308      	bcc.n	800907c <find_volume+0x10c>
 800906a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800906c:	899b      	ldrh	r3, [r3, #12]
 800906e:	461a      	mov	r2, r3
 8009070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009072:	899b      	ldrh	r3, [r3, #12]
 8009074:	3b01      	subs	r3, #1
 8009076:	4013      	ands	r3, r2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <find_volume+0x110>
 800907c:	2301      	movs	r3, #1
 800907e:	e302      	b.n	8009686 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009084:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009086:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009088:	f7ff ff0e 	bl	8008ea8 <check_fs>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009092:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009096:	2b02      	cmp	r3, #2
 8009098:	d14d      	bne.n	8009136 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800909a:	2300      	movs	r3, #0
 800909c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800909e:	e020      	b.n	80090e2 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80090a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090ae:	4413      	add	r3, r2
 80090b0:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b4:	3304      	adds	r3, #4
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <find_volume+0x15a>
 80090bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090be:	3308      	adds	r3, #8
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fc fe95 	bl	8005df0 <ld_dword>
 80090c6:	4602      	mov	r2, r0
 80090c8:	e000      	b.n	80090cc <find_volume+0x15c>
 80090ca:	2200      	movs	r2, #0
 80090cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	3360      	adds	r3, #96	@ 0x60
 80090d2:	f107 0110 	add.w	r1, r7, #16
 80090d6:	440b      	add	r3, r1
 80090d8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090de:	3301      	adds	r3, #1
 80090e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d9db      	bls.n	80090a0 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80090e8:	2300      	movs	r3, #0
 80090ea:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 80090ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <find_volume+0x188>
 80090f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090f4:	3b01      	subs	r3, #1
 80090f6:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	3360      	adds	r3, #96	@ 0x60
 80090fe:	f107 0210 	add.w	r2, r7, #16
 8009102:	4413      	add	r3, r2
 8009104:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009108:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800910a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <find_volume+0x1ac>
 8009110:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009112:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009114:	f7ff fec8 	bl	8008ea8 <check_fs>
 8009118:	4603      	mov	r3, r0
 800911a:	e000      	b.n	800911e <find_volume+0x1ae>
 800911c:	2303      	movs	r3, #3
 800911e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009122:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009126:	2b01      	cmp	r3, #1
 8009128:	d905      	bls.n	8009136 <find_volume+0x1c6>
 800912a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800912c:	3301      	adds	r3, #1
 800912e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009130:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009132:	2b03      	cmp	r3, #3
 8009134:	d9e0      	bls.n	80090f8 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009136:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800913a:	2b04      	cmp	r3, #4
 800913c:	d101      	bne.n	8009142 <find_volume+0x1d2>
 800913e:	2301      	movs	r3, #1
 8009140:	e2a1      	b.n	8009686 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009142:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009146:	2b01      	cmp	r3, #1
 8009148:	d901      	bls.n	800914e <find_volume+0x1de>
 800914a:	230d      	movs	r3, #13
 800914c:	e29b      	b.n	8009686 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800914e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009152:	2b01      	cmp	r3, #1
 8009154:	f040 8101 	bne.w	800935a <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8009158:	230b      	movs	r3, #11
 800915a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800915c:	e002      	b.n	8009164 <find_volume+0x1f4>
 800915e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009160:	3301      	adds	r3, #1
 8009162:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009166:	2b3f      	cmp	r3, #63	@ 0x3f
 8009168:	d806      	bhi.n	8009178 <find_volume+0x208>
 800916a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800916c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800916e:	4413      	add	r3, r2
 8009170:	333c      	adds	r3, #60	@ 0x3c
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0f2      	beq.n	800915e <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8009178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800917a:	2b3f      	cmp	r3, #63	@ 0x3f
 800917c:	d801      	bhi.n	8009182 <find_volume+0x212>
 800917e:	230d      	movs	r3, #13
 8009180:	e281      	b.n	8009686 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8009182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009184:	333c      	adds	r3, #60	@ 0x3c
 8009186:	3368      	adds	r3, #104	@ 0x68
 8009188:	4618      	mov	r0, r3
 800918a:	f7fc fe19 	bl	8005dc0 <ld_word>
 800918e:	4603      	mov	r3, r0
 8009190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009194:	d001      	beq.n	800919a <find_volume+0x22a>
 8009196:	230d      	movs	r3, #13
 8009198:	e275      	b.n	8009686 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800919a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800919c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80091a0:	461a      	mov	r2, r3
 80091a2:	2301      	movs	r3, #1
 80091a4:	4093      	lsls	r3, r2
 80091a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80091a8:	8992      	ldrh	r2, [r2, #12]
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d001      	beq.n	80091b2 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 80091ae:	230d      	movs	r3, #13
 80091b0:	e269      	b.n	8009686 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80091b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091b4:	333c      	adds	r3, #60	@ 0x3c
 80091b6:	3348      	adds	r3, #72	@ 0x48
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fc fe3c 	bl	8005e36 <ld_qword>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091c4:	2000      	movs	r0, #0
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	1851      	adds	r1, r2, r1
 80091ce:	6039      	str	r1, [r7, #0]
 80091d0:	68f9      	ldr	r1, [r7, #12]
 80091d2:	eb43 0101 	adc.w	r1, r3, r1
 80091d6:	6079      	str	r1, [r7, #4]
 80091d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80091e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d301      	bcc.n	80091ec <find_volume+0x27c>
 80091e8:	230d      	movs	r3, #13
 80091ea:	e24c      	b.n	8009686 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80091ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ee:	333c      	adds	r3, #60	@ 0x3c
 80091f0:	3354      	adds	r3, #84	@ 0x54
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fc fdfc 	bl	8005df0 <ld_dword>
 80091f8:	4602      	mov	r2, r0
 80091fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091fc:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80091fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009200:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8009204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009206:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8009208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800920a:	789b      	ldrb	r3, [r3, #2]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d001      	beq.n	8009214 <find_volume+0x2a4>
 8009210:	230d      	movs	r3, #13
 8009212:	e238      	b.n	8009686 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8009214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009216:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800921a:	461a      	mov	r2, r3
 800921c:	2301      	movs	r3, #1
 800921e:	4093      	lsls	r3, r2
 8009220:	b29a      	uxth	r2, r3
 8009222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009224:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8009226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009228:	895b      	ldrh	r3, [r3, #10]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <find_volume+0x2c8>
 800922e:	230d      	movs	r3, #13
 8009230:	e229      	b.n	8009686 <find_volume+0x716>
 8009232:	bf00      	nop
 8009234:	20002280 	.word	0x20002280

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8009238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800923a:	333c      	adds	r3, #60	@ 0x3c
 800923c:	335c      	adds	r3, #92	@ 0x5c
 800923e:	4618      	mov	r0, r3
 8009240:	f7fc fdd6 	bl	8005df0 <ld_dword>
 8009244:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8009246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009248:	4a99      	ldr	r2, [pc, #612]	@ (80094b0 <find_volume+0x540>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d901      	bls.n	8009252 <find_volume+0x2e2>
 800924e:	230d      	movs	r3, #13
 8009250:	e219      	b.n	8009686 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 8009252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009254:	1c9a      	adds	r2, r3, #2
 8009256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009258:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800925a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800925c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800925e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8009260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009262:	333c      	adds	r3, #60	@ 0x3c
 8009264:	3358      	adds	r3, #88	@ 0x58
 8009266:	4618      	mov	r0, r3
 8009268:	f7fc fdc2 	bl	8005df0 <ld_dword>
 800926c:	4602      	mov	r2, r0
 800926e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009270:	441a      	add	r2, r3
 8009272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009274:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8009276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009278:	333c      	adds	r3, #60	@ 0x3c
 800927a:	3350      	adds	r3, #80	@ 0x50
 800927c:	4618      	mov	r0, r3
 800927e:	f7fc fdb7 	bl	8005df0 <ld_dword>
 8009282:	4602      	mov	r2, r0
 8009284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009286:	441a      	add	r2, r3
 8009288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800928a:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800928c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800928e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009290:	2200      	movs	r2, #0
 8009292:	469a      	mov	sl, r3
 8009294:	4693      	mov	fp, r2
 8009296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009298:	895b      	ldrh	r3, [r3, #10]
 800929a:	461a      	mov	r2, r3
 800929c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	4698      	mov	r8, r3
 80092a6:	4691      	mov	r9, r2
 80092a8:	eb1a 0408 	adds.w	r4, sl, r8
 80092ac:	eb4b 0509 	adc.w	r5, fp, r9
 80092b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80092b4:	42a2      	cmp	r2, r4
 80092b6:	41ab      	sbcs	r3, r5
 80092b8:	d201      	bcs.n	80092be <find_volume+0x34e>
 80092ba:	230d      	movs	r3, #13
 80092bc:	e1e3      	b.n	8009686 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80092be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092c0:	333c      	adds	r3, #60	@ 0x3c
 80092c2:	3360      	adds	r3, #96	@ 0x60
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fc fd93 	bl	8005df0 <ld_dword>
 80092ca:	4602      	mov	r2, r0
 80092cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ce:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80092d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d4:	4619      	mov	r1, r3
 80092d6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80092d8:	f7fd fa24 	bl	8006724 <clust2sect>
 80092dc:	4603      	mov	r3, r0
 80092de:	4619      	mov	r1, r3
 80092e0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80092e2:	f7fd f981 	bl	80065e8 <move_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <find_volume+0x380>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e1ca      	b.n	8009686 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80092f0:	2300      	movs	r3, #0
 80092f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092f4:	e015      	b.n	8009322 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80092f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092fa:	4413      	add	r3, r2
 80092fc:	333c      	adds	r3, #60	@ 0x3c
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b81      	cmp	r3, #129	@ 0x81
 8009302:	d10b      	bne.n	800931c <find_volume+0x3ac>
 8009304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009306:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800930a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800930c:	3314      	adds	r3, #20
 800930e:	4413      	add	r3, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f7fc fd6d 	bl	8005df0 <ld_dword>
 8009316:	4603      	mov	r3, r0
 8009318:	2b02      	cmp	r3, #2
 800931a:	d009      	beq.n	8009330 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800931c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800931e:	3320      	adds	r3, #32
 8009320:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009324:	899b      	ldrh	r3, [r3, #12]
 8009326:	461a      	mov	r2, r3
 8009328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800932a:	4293      	cmp	r3, r2
 800932c:	d3e3      	bcc.n	80092f6 <find_volume+0x386>
 800932e:	e000      	b.n	8009332 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8009330:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8009332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009334:	899b      	ldrh	r3, [r3, #12]
 8009336:	461a      	mov	r2, r3
 8009338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800933a:	4293      	cmp	r3, r2
 800933c:	d101      	bne.n	8009342 <find_volume+0x3d2>
 800933e:	230d      	movs	r3, #13
 8009340:	e1a1      	b.n	8009686 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009344:	f04f 32ff 	mov.w	r2, #4294967295
 8009348:	61da      	str	r2, [r3, #28]
 800934a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800934c:	69da      	ldr	r2, [r3, #28]
 800934e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009350:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8009352:	2304      	movs	r3, #4
 8009354:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009358:	e17d      	b.n	8009656 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800935a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800935c:	333c      	adds	r3, #60	@ 0x3c
 800935e:	330b      	adds	r3, #11
 8009360:	4618      	mov	r0, r3
 8009362:	f7fc fd2d 	bl	8005dc0 <ld_word>
 8009366:	4603      	mov	r3, r0
 8009368:	461a      	mov	r2, r3
 800936a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800936c:	899b      	ldrh	r3, [r3, #12]
 800936e:	429a      	cmp	r2, r3
 8009370:	d001      	beq.n	8009376 <find_volume+0x406>
 8009372:	230d      	movs	r3, #13
 8009374:	e187      	b.n	8009686 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009378:	333c      	adds	r3, #60	@ 0x3c
 800937a:	3316      	adds	r3, #22
 800937c:	4618      	mov	r0, r3
 800937e:	f7fc fd1f 	bl	8005dc0 <ld_word>
 8009382:	4603      	mov	r3, r0
 8009384:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009388:	2b00      	cmp	r3, #0
 800938a:	d106      	bne.n	800939a <find_volume+0x42a>
 800938c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800938e:	333c      	adds	r3, #60	@ 0x3c
 8009390:	3324      	adds	r3, #36	@ 0x24
 8009392:	4618      	mov	r0, r3
 8009394:	f7fc fd2c 	bl	8005df0 <ld_dword>
 8009398:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800939a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800939c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800939e:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80093a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a2:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80093a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80093aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093ac:	789b      	ldrb	r3, [r3, #2]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d005      	beq.n	80093be <find_volume+0x44e>
 80093b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093b4:	789b      	ldrb	r3, [r3, #2]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d001      	beq.n	80093be <find_volume+0x44e>
 80093ba:	230d      	movs	r3, #13
 80093bc:	e163      	b.n	8009686 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80093be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c0:	789b      	ldrb	r3, [r3, #2]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80093cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093ce:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80093d2:	461a      	mov	r2, r3
 80093d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093d6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80093d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093da:	895b      	ldrh	r3, [r3, #10]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <find_volume+0x482>
 80093e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e2:	895b      	ldrh	r3, [r3, #10]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e8:	895b      	ldrh	r3, [r3, #10]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	4013      	ands	r3, r2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <find_volume+0x486>
 80093f2:	230d      	movs	r3, #13
 80093f4:	e147      	b.n	8009686 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80093f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093f8:	333c      	adds	r3, #60	@ 0x3c
 80093fa:	3311      	adds	r3, #17
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fc fcdf 	bl	8005dc0 <ld_word>
 8009402:	4603      	mov	r3, r0
 8009404:	461a      	mov	r2, r3
 8009406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009408:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800940a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800940c:	891b      	ldrh	r3, [r3, #8]
 800940e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009410:	8992      	ldrh	r2, [r2, #12]
 8009412:	0952      	lsrs	r2, r2, #5
 8009414:	b292      	uxth	r2, r2
 8009416:	fbb3 f1f2 	udiv	r1, r3, r2
 800941a:	fb01 f202 	mul.w	r2, r1, r2
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <find_volume+0x4ba>
 8009426:	230d      	movs	r3, #13
 8009428:	e12d      	b.n	8009686 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800942a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800942c:	333c      	adds	r3, #60	@ 0x3c
 800942e:	3313      	adds	r3, #19
 8009430:	4618      	mov	r0, r3
 8009432:	f7fc fcc5 	bl	8005dc0 <ld_word>
 8009436:	4603      	mov	r3, r0
 8009438:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800943a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800943c:	2b00      	cmp	r3, #0
 800943e:	d106      	bne.n	800944e <find_volume+0x4de>
 8009440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009442:	333c      	adds	r3, #60	@ 0x3c
 8009444:	3320      	adds	r3, #32
 8009446:	4618      	mov	r0, r3
 8009448:	f7fc fcd2 	bl	8005df0 <ld_dword>
 800944c:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800944e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009450:	333c      	adds	r3, #60	@ 0x3c
 8009452:	330e      	adds	r3, #14
 8009454:	4618      	mov	r0, r3
 8009456:	f7fc fcb3 	bl	8005dc0 <ld_word>
 800945a:	4603      	mov	r3, r0
 800945c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009460:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <find_volume+0x4fc>
 8009468:	230d      	movs	r3, #13
 800946a:	e10c      	b.n	8009686 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800946c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009472:	4413      	add	r3, r2
 8009474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009476:	8911      	ldrh	r1, [r2, #8]
 8009478:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800947a:	8992      	ldrh	r2, [r2, #12]
 800947c:	0952      	lsrs	r2, r2, #5
 800947e:	b292      	uxth	r2, r2
 8009480:	fbb1 f2f2 	udiv	r2, r1, r2
 8009484:	b292      	uxth	r2, r2
 8009486:	4413      	add	r3, r2
 8009488:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800948a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800948c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800948e:	429a      	cmp	r2, r3
 8009490:	d201      	bcs.n	8009496 <find_volume+0x526>
 8009492:	230d      	movs	r3, #13
 8009494:	e0f7      	b.n	8009686 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800949e:	8952      	ldrh	r2, [r2, #10]
 80094a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d103      	bne.n	80094b4 <find_volume+0x544>
 80094ac:	230d      	movs	r3, #13
 80094ae:	e0ea      	b.n	8009686 <find_volume+0x716>
 80094b0:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 80094b4:	2303      	movs	r3, #3
 80094b6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80094ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094bc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d802      	bhi.n	80094ca <find_volume+0x55a>
 80094c4:	2302      	movs	r3, #2
 80094c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80094ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094cc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d802      	bhi.n	80094da <find_volume+0x56a>
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80094da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094dc:	1c9a      	adds	r2, r3, #2
 80094de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80094e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80094e6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80094e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80094ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ee:	441a      	add	r2, r3
 80094f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f2:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80094f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80094f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f8:	441a      	add	r2, r3
 80094fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094fc:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80094fe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009502:	2b03      	cmp	r3, #3
 8009504:	d11e      	bne.n	8009544 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009508:	333c      	adds	r3, #60	@ 0x3c
 800950a:	332a      	adds	r3, #42	@ 0x2a
 800950c:	4618      	mov	r0, r3
 800950e:	f7fc fc57 	bl	8005dc0 <ld_word>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <find_volume+0x5ac>
 8009518:	230d      	movs	r3, #13
 800951a:	e0b4      	b.n	8009686 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800951c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800951e:	891b      	ldrh	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <find_volume+0x5b8>
 8009524:	230d      	movs	r3, #13
 8009526:	e0ae      	b.n	8009686 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800952a:	333c      	adds	r3, #60	@ 0x3c
 800952c:	332c      	adds	r3, #44	@ 0x2c
 800952e:	4618      	mov	r0, r3
 8009530:	f7fc fc5e 	bl	8005df0 <ld_dword>
 8009534:	4602      	mov	r2, r0
 8009536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009538:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800953a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009542:	e01f      	b.n	8009584 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <find_volume+0x5e0>
 800954c:	230d      	movs	r3, #13
 800954e:	e09a      	b.n	8009686 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009556:	441a      	add	r2, r3
 8009558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800955a:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800955c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009560:	2b02      	cmp	r3, #2
 8009562:	d103      	bne.n	800956c <find_volume+0x5fc>
 8009564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	e00a      	b.n	8009582 <find_volume+0x612>
 800956c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800956e:	6a1a      	ldr	r2, [r3, #32]
 8009570:	4613      	mov	r3, r2
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	4413      	add	r3, r2
 8009576:	085a      	lsrs	r2, r3, #1
 8009578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009582:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958a:	899b      	ldrh	r3, [r3, #12]
 800958c:	4619      	mov	r1, r3
 800958e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009590:	440b      	add	r3, r1
 8009592:	3b01      	subs	r3, #1
 8009594:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009596:	8989      	ldrh	r1, [r1, #12]
 8009598:	fbb3 f3f1 	udiv	r3, r3, r1
 800959c:	429a      	cmp	r2, r3
 800959e:	d201      	bcs.n	80095a4 <find_volume+0x634>
 80095a0:	230d      	movs	r3, #13
 80095a2:	e070      	b.n	8009686 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80095a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a6:	f04f 32ff 	mov.w	r2, #4294967295
 80095aa:	61da      	str	r2, [r3, #28]
 80095ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ae:	69da      	ldr	r2, [r3, #28]
 80095b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095b2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80095b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095b6:	2280      	movs	r2, #128	@ 0x80
 80095b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80095ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d149      	bne.n	8009656 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80095c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095c4:	333c      	adds	r3, #60	@ 0x3c
 80095c6:	3330      	adds	r3, #48	@ 0x30
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fc fbf9 	bl	8005dc0 <ld_word>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d140      	bne.n	8009656 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80095d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095d6:	3301      	adds	r3, #1
 80095d8:	4619      	mov	r1, r3
 80095da:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80095dc:	f7fd f804 	bl	80065e8 <move_window>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d137      	bne.n	8009656 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 80095e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095e8:	2200      	movs	r2, #0
 80095ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80095ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ee:	333c      	adds	r3, #60	@ 0x3c
 80095f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fc fbe3 	bl	8005dc0 <ld_word>
 80095fa:	4603      	mov	r3, r0
 80095fc:	461a      	mov	r2, r3
 80095fe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009602:	429a      	cmp	r2, r3
 8009604:	d127      	bne.n	8009656 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009608:	333c      	adds	r3, #60	@ 0x3c
 800960a:	4618      	mov	r0, r3
 800960c:	f7fc fbf0 	bl	8005df0 <ld_dword>
 8009610:	4603      	mov	r3, r0
 8009612:	4a1f      	ldr	r2, [pc, #124]	@ (8009690 <find_volume+0x720>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d11e      	bne.n	8009656 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800961a:	333c      	adds	r3, #60	@ 0x3c
 800961c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fc fbe5 	bl	8005df0 <ld_dword>
 8009626:	4603      	mov	r3, r0
 8009628:	4a1a      	ldr	r2, [pc, #104]	@ (8009694 <find_volume+0x724>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d113      	bne.n	8009656 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800962e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009630:	333c      	adds	r3, #60	@ 0x3c
 8009632:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009636:	4618      	mov	r0, r3
 8009638:	f7fc fbda 	bl	8005df0 <ld_dword>
 800963c:	4602      	mov	r2, r0
 800963e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009640:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009644:	333c      	adds	r3, #60	@ 0x3c
 8009646:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800964a:	4618      	mov	r0, r3
 800964c:	f7fc fbd0 	bl	8005df0 <ld_dword>
 8009650:	4602      	mov	r2, r0
 8009652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009654:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009658:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800965c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800965e:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <find_volume+0x728>)
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	4b0c      	ldr	r3, [pc, #48]	@ (8009698 <find_volume+0x728>)
 8009668:	801a      	strh	r2, [r3, #0]
 800966a:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <find_volume+0x728>)
 800966c:	881a      	ldrh	r2, [r3, #0]
 800966e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009670:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009674:	4a09      	ldr	r2, [pc, #36]	@ (800969c <find_volume+0x72c>)
 8009676:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8009678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967a:	4a09      	ldr	r2, [pc, #36]	@ (80096a0 <find_volume+0x730>)
 800967c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800967e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009680:	f7fc ff4a 	bl	8006518 <clear_lock>
#endif
	return FR_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3770      	adds	r7, #112	@ 0x70
 800968a:	46bd      	mov	sp, r7
 800968c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009690:	41615252 	.word	0x41615252
 8009694:	61417272 	.word	0x61417272
 8009698:	20002284 	.word	0x20002284
 800969c:	20002508 	.word	0x20002508
 80096a0:	200022a8 	.word	0x200022a8

080096a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80096ae:	2309      	movs	r3, #9
 80096b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01c      	beq.n	80096f2 <validate+0x4e>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d018      	beq.n	80096f2 <validate+0x4e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d013      	beq.n	80096f2 <validate+0x4e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	889a      	ldrh	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	88db      	ldrh	r3, [r3, #6]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d10c      	bne.n	80096f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	785b      	ldrb	r3, [r3, #1]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fc face 	bl	8005c80 <disk_status>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <validate+0x4e>
			res = FR_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d102      	bne.n	80096fe <validate+0x5a>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	e000      	b.n	8009700 <validate+0x5c>
 80096fe:	2300      	movs	r3, #0
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	6013      	str	r3, [r2, #0]
	return res;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009722:	f107 0310 	add.w	r3, r7, #16
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff fb7a 	bl	8008e20 <get_ldnumber>
 800972c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	2b00      	cmp	r3, #0
 8009732:	da01      	bge.n	8009738 <f_mount+0x28>
 8009734:	230b      	movs	r3, #11
 8009736:	e02b      	b.n	8009790 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009738:	4a17      	ldr	r2, [pc, #92]	@ (8009798 <f_mount+0x88>)
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009740:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009748:	69b8      	ldr	r0, [r7, #24]
 800974a:	f7fc fee5 	bl	8006518 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2200      	movs	r2, #0
 8009752:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	490d      	ldr	r1, [pc, #52]	@ (8009798 <f_mount+0x88>)
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <f_mount+0x66>
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d001      	beq.n	800977a <f_mount+0x6a>
 8009776:	2300      	movs	r3, #0
 8009778:	e00a      	b.n	8009790 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800977a:	f107 010c 	add.w	r1, r7, #12
 800977e:	f107 0308 	add.w	r3, r7, #8
 8009782:	2200      	movs	r2, #0
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fbf3 	bl	8008f70 <find_volume>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800978e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3720      	adds	r7, #32
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20002280 	.word	0x20002280

0800979c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800979c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097a0:	b0a8      	sub	sp, #160	@ 0xa0
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80097a6:	6239      	str	r1, [r7, #32]
 80097a8:	4613      	mov	r3, r2
 80097aa:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <f_open+0x1a>
 80097b2:	2309      	movs	r3, #9
 80097b4:	e2bc      	b.n	8009d30 <f_open+0x594>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80097b6:	7ffb      	ldrb	r3, [r7, #31]
 80097b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097bc:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 80097be:	7ffb      	ldrb	r3, [r7, #31]
 80097c0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80097c4:	f107 0020 	add.w	r0, r7, #32
 80097c8:	461a      	mov	r2, r3
 80097ca:	f7ff fbd1 	bl	8008f70 <find_volume>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 80097d4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 82a0 	bne.w	8009d1e <f_open+0x582>
		dj.obj.fs = fs;
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e0:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7ff fa6a 	bl	8008cc4 <follow_path>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80097f6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d118      	bne.n	8009830 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80097fe:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8009802:	b25b      	sxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	da03      	bge.n	8009810 <f_open+0x74>
				res = FR_INVALID_NAME;
 8009808:	2306      	movs	r3, #6
 800980a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800980e:	e00f      	b.n	8009830 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009810:	7ffb      	ldrb	r3, [r7, #31]
 8009812:	2b01      	cmp	r3, #1
 8009814:	bf8c      	ite	hi
 8009816:	2301      	movhi	r3, #1
 8009818:	2300      	movls	r3, #0
 800981a:	b2db      	uxtb	r3, r3
 800981c:	461a      	mov	r2, r3
 800981e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7fc fd2f 	bl	8006288 <chk_lock>
 800982a:	4603      	mov	r3, r0
 800982c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009830:	7ffb      	ldrb	r3, [r7, #31]
 8009832:	f003 031c 	and.w	r3, r3, #28
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8117 	beq.w	8009a6a <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800983c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009840:	2b00      	cmp	r3, #0
 8009842:	d017      	beq.n	8009874 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009844:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009848:	2b04      	cmp	r3, #4
 800984a:	d10e      	bne.n	800986a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800984c:	f7fc fd78 	bl	8006340 <enq_lock>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d006      	beq.n	8009864 <f_open+0xc8>
 8009856:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fde2 	bl	8008424 <dir_register>
 8009860:	4603      	mov	r3, r0
 8009862:	e000      	b.n	8009866 <f_open+0xca>
 8009864:	2312      	movs	r3, #18
 8009866:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800986a:	7ffb      	ldrb	r3, [r7, #31]
 800986c:	f043 0308 	orr.w	r3, r3, #8
 8009870:	77fb      	strb	r3, [r7, #31]
 8009872:	e011      	b.n	8009898 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009874:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009878:	f003 0311 	and.w	r3, r3, #17
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <f_open+0xec>
					res = FR_DENIED;
 8009880:	2307      	movs	r3, #7
 8009882:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8009886:	e007      	b.n	8009898 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009888:	7ffb      	ldrb	r3, [r7, #31]
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <f_open+0xfc>
 8009892:	2308      	movs	r3, #8
 8009894:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009898:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 8100 	bne.w	8009aa2 <f_open+0x306>
 80098a2:	7ffb      	ldrb	r3, [r7, #31]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80fa 	beq.w	8009aa2 <f_open+0x306>
				dw = GET_FATTIME();
 80098ae:	f7fc f809 	bl	80058c4 <get_fattime>
 80098b2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	f040 8085 	bne.w	80099ca <f_open+0x22e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 80098c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 80098c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	3334      	adds	r3, #52	@ 0x34
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fc fa8f 	bl	8005df0 <ld_dword>
 80098d2:	4602      	mov	r2, r0
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80098d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	3338      	adds	r3, #56	@ 0x38
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fc faa9 	bl	8005e36 <ld_qword>
 80098e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	3321      	adds	r3, #33	@ 0x21
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098fa:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	2200      	movs	r2, #0
 8009900:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8009902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	3308      	adds	r3, #8
 8009908:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800990c:	4618      	mov	r0, r3
 800990e:	f7fc fb88 	bl	8006022 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	f103 0214 	add.w	r2, r3, #20
 800991a:	2300      	movs	r3, #0
 800991c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	330c      	adds	r3, #12
 8009924:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8009928:	4618      	mov	r0, r3
 800992a:	f7fc fb7a 	bl	8006022 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800992e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f103 0215 	add.w	r2, r3, #21
 8009936:	2300      	movs	r3, #0
 8009938:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800993a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	2320      	movs	r3, #32
 8009942:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8009944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	3334      	adds	r3, #52	@ 0x34
 800994a:	2100      	movs	r1, #0
 800994c:	4618      	mov	r0, r3
 800994e:	f7fc fb68 	bl	8006022 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8009952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	4608      	mov	r0, r1
 8009964:	f7fc fb89 	bl	800607a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8009968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	4608      	mov	r0, r1
 800997a:	f7fc fb7e 	bl	800607a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800997e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8009986:	2301      	movs	r3, #1
 8009988:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800998a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe fa94 	bl	8007ebc <store_xdir>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800999a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d17f      	bne.n	8009aa2 <f_open+0x306>
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d07b      	beq.n	8009aa2 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80099aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	2200      	movs	r2, #0
 80099b2:	4619      	mov	r1, r3
 80099b4:	f7fd faa4 	bl	8006f00 <remove_chain>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099c4:	3b01      	subs	r3, #1
 80099c6:	6193      	str	r3, [r2, #24]
 80099c8:	e06b      	b.n	8009aa2 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099cc:	330e      	adds	r3, #14
 80099ce:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fc fb25 	bl	8006022 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80099d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099da:	3316      	adds	r3, #22
 80099dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fc fb1e 	bl	8006022 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80099e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099e8:	f103 020b 	add.w	r2, r3, #11
 80099ec:	2320      	movs	r3, #32
 80099ee:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80099f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fd fe59 	bl	80076ae <ld_clust>
 80099fc:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a04:	2200      	movs	r2, #0
 8009a06:	4619      	mov	r1, r3
 8009a08:	f7fd fe70 	bl	80076ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a0e:	331c      	adds	r3, #28
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fc fb05 	bl	8006022 <st_dword>
					fs->wflag = 1;
 8009a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d03d      	beq.n	8009aa2 <f_open+0x306>
						dw = fs->winsect;
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 8009a2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fd fa61 	bl	8006f00 <remove_chain>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 8009a44:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d12a      	bne.n	8009aa2 <f_open+0x306>
							res = move_window(fs, dw);
 8009a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fc fdc8 	bl	80065e8 <move_window>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a64:	3b01      	subs	r3, #1
 8009a66:	6193      	str	r3, [r2, #24]
 8009a68:	e01b      	b.n	8009aa2 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a6a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d117      	bne.n	8009aa2 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <f_open+0x2ea>
					res = FR_NO_FILE;
 8009a7e:	2304      	movs	r3, #4
 8009a80:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8009a84:	e00d      	b.n	8009aa2 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	f003 0302 	and.w	r3, r3, #2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d008      	beq.n	8009aa2 <f_open+0x306>
 8009a90:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <f_open+0x306>
						res = FR_DENIED;
 8009a9c:	2307      	movs	r3, #7
 8009a9e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009aa2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d126      	bne.n	8009af8 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009aaa:	7ffb      	ldrb	r3, [r7, #31]
 8009aac:	f003 0308 	and.w	r3, r3, #8
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <f_open+0x320>
				mode |= FA_MODIFIED;
 8009ab4:	7ffb      	ldrb	r3, [r7, #31]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aba:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8009ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009aca:	7ffb      	ldrb	r3, [r7, #31]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	bf8c      	ite	hi
 8009ad0:	2301      	movhi	r3, #1
 8009ad2:	2300      	movls	r3, #0
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fc fc50 	bl	8006384 <inc_lock>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d102      	bne.n	8009af8 <f_open+0x35c>
 8009af2:	2302      	movs	r3, #2
 8009af4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009af8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 810e 	bne.w	8009d1e <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d12d      	bne.n	8009b66 <f_open+0x3ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8009b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8009b10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b14:	4613      	mov	r3, r2
 8009b16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009b1a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b22:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8009b24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8009b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	3334      	adds	r3, #52	@ 0x34
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fc f95d 	bl	8005df0 <ld_dword>
 8009b36:	4602      	mov	r2, r0
 8009b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	3338      	adds	r3, #56	@ 0x38
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fc f977 	bl	8005e36 <ld_qword>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	3321      	adds	r3, #33	@ 0x21
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	71da      	strb	r2, [r3, #7]
 8009b64:	e016      	b.n	8009b94 <f_open+0x3f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f7fd fd9e 	bl	80076ae <ld_clust>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b7a:	331c      	adds	r3, #28
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fc f937 	bl	8005df0 <ld_dword>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2200      	movs	r2, #0
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	617a      	str	r2, [r7, #20]
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b90:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	2200      	movs	r2, #0
 8009b98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	88da      	ldrh	r2, [r3, #6]
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009baa:	7ffa      	ldrb	r2, [r7, #31]
 8009bac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	2200      	movs	r2, #0
 8009bbc:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bc0:	f04f 0200 	mov.w	r2, #0
 8009bc4:	f04f 0300 	mov.w	r3, #0
 8009bc8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	3354      	adds	r3, #84	@ 0x54
 8009bd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fc faf8 	bl	80061cc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009bdc:	7ffb      	ldrb	r3, [r7, #31]
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 809b 	beq.w	8009d1e <f_open+0x582>
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f000 8095 	beq.w	8009d1e <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c02:	895b      	ldrh	r3, [r3, #10]
 8009c04:	461a      	mov	r2, r3
 8009c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c08:	899b      	ldrh	r3, [r3, #12]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
 8009c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009c20:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8009c24:	e023      	b.n	8009c6e <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fc fd99 	bl	8006764 <get_fat>
 8009c32:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8009c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d802      	bhi.n	8009c44 <f_open+0x4a8>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d102      	bne.n	8009c54 <f_open+0x4b8>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4698      	mov	r8, r3
 8009c5c:	4691      	mov	r9, r2
 8009c5e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009c62:	ebb2 0a08 	subs.w	sl, r2, r8
 8009c66:	eb63 0b09 	sbc.w	fp, r3, r9
 8009c6a:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
 8009c6e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <f_open+0x4f0>
 8009c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	461c      	mov	r4, r3
 8009c7e:	4615      	mov	r5, r2
 8009c80:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009c84:	4294      	cmp	r4, r2
 8009c86:	eb75 0303 	sbcs.w	r3, r5, r3
 8009c8a:	d3cc      	bcc.n	8009c26 <f_open+0x48a>
				}
				fp->clust = clst;
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009c92:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c94:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d140      	bne.n	8009d1e <f_open+0x582>
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	899b      	ldrh	r3, [r3, #12]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	60bb      	str	r3, [r7, #8]
 8009ca6:	60fa      	str	r2, [r7, #12]
 8009ca8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8009cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cb0:	f7f6 fdfc 	bl	80008ac <__aeabi_uldivmod>
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	d032      	beq.n	8009d1e <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cba:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fc fd30 	bl	8006724 <clust2sect>
 8009cc4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <f_open+0x53c>
						res = FR_INT_ERR;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8009cd6:	e022      	b.n	8009d1e <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cda:	899b      	ldrh	r3, [r3, #12]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	2200      	movs	r2, #0
 8009ce0:	603b      	str	r3, [r7, #0]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ce8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8009cec:	f7f6 fdde 	bl	80008ac <__aeabi_uldivmod>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009cf8:	441a      	add	r2, r3
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d00:	7858      	ldrb	r0, [r3, #1]
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f7fb fff9 	bl	8005d04 <disk_read>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <f_open+0x582>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d1e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <f_open+0x590>
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d2c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	37a0      	adds	r7, #160	@ 0xa0
 8009d34:	46bd      	mov	sp, r7
 8009d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3e:	b091      	sub	sp, #68	@ 0x44
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	61f8      	str	r0, [r7, #28]
 8009d44:	61b9      	str	r1, [r7, #24]
 8009d46:	617a      	str	r2, [r7, #20]
 8009d48:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	f107 0220 	add.w	r2, r7, #32
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff fca1 	bl	80096a4 <validate>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d108      	bne.n	8009d82 <f_write+0x48>
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009d76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <f_write+0x4e>
 8009d82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d86:	e1aa      	b.n	800a0de <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <f_write+0x60>
 8009d96:	2307      	movs	r3, #7
 8009d98:	e1a1      	b.n	800a0de <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	f000 818d 	beq.w	800a0be <f_write+0x384>
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	18d1      	adds	r1, r2, r3
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009db4:	4613      	mov	r3, r2
 8009db6:	4299      	cmp	r1, r3
 8009db8:	f080 8181 	bcs.w	800a0be <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	43db      	mvns	r3, r3
 8009dc6:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009dc8:	e179      	b.n	800a0be <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	899b      	ldrh	r3, [r3, #12]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	461d      	mov	r5, r3
 8009dda:	4616      	mov	r6, r2
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4633      	mov	r3, r6
 8009de0:	f7f6 fd64 	bl	80008ac <__aeabi_uldivmod>
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f040 810a 	bne.w	8009ffe <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	899b      	ldrh	r3, [r3, #12]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2200      	movs	r2, #0
 8009df8:	60bb      	str	r3, [r7, #8]
 8009dfa:	60fa      	str	r2, [r7, #12]
 8009dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e00:	f7f6 fd54 	bl	80008ac <__aeabi_uldivmod>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	895b      	ldrh	r3, [r3, #10]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4013      	ands	r3, r2
 8009e10:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 8009e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d146      	bne.n	8009ea6 <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	d10c      	bne.n	8009e3c <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d11a      	bne.n	8009e64 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2100      	movs	r1, #0
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fd f918 	bl	8007068 <create_chain>
 8009e38:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009e3a:	e013      	b.n	8009e64 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d007      	beq.n	8009e54 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009e4a:	69f8      	ldr	r0, [r7, #28]
 8009e4c:	f7fd fa0d 	bl	800726a <clmt_clust>
 8009e50:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009e52:	e007      	b.n	8009e64 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009e54:	69fa      	ldr	r2, [r7, #28]
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7fd f903 	bl	8007068 <create_chain>
 8009e62:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 812e 	beq.w	800a0c8 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d105      	bne.n	8009e7e <f_write+0x144>
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e12f      	b.n	800a0de <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e84:	d105      	bne.n	8009e92 <f_write+0x158>
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e125      	b.n	800a0de <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e96:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <f_write+0x16c>
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ea4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009eac:	b25b      	sxtb	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da1b      	bge.n	8009eea <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	7858      	ldrb	r0, [r3, #1]
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f7fb ff3f 	bl	8005d44 <disk_write>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <f_write+0x19e>
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e102      	b.n	800a0de <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009eea:	6a3a      	ldr	r2, [r7, #32]
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fc fc16 	bl	8006724 <clust2sect>
 8009ef8:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d105      	bne.n	8009f0c <f_write+0x1d2>
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	2202      	movs	r2, #2
 8009f04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e0e8      	b.n	800a0de <f_write+0x3a4>
			sect += csect;
 8009f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f10:	4413      	add	r3, r2
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	899b      	ldrh	r3, [r3, #12]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f20:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d046      	beq.n	8009fb6 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	4413      	add	r3, r2
 8009f2e:	6a3a      	ldr	r2, [r7, #32]
 8009f30:	8952      	ldrh	r2, [r2, #10]
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d905      	bls.n	8009f42 <f_write+0x208>
					cc = fs->csize - csect;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	895b      	ldrh	r3, [r3, #10]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	7858      	ldrb	r0, [r3, #1]
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f4c:	f7fb fefa 	bl	8005d44 <disk_write>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <f_write+0x228>
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e0bd      	b.n	800a0de <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d91a      	bls.n	8009fa6 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	6a3a      	ldr	r2, [r7, #32]
 8009f80:	8992      	ldrh	r2, [r2, #12]
 8009f82:	fb02 f303 	mul.w	r3, r2, r3
 8009f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f88:	18d1      	adds	r1, r2, r3
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	899b      	ldrh	r3, [r3, #12]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f7fc f8fb 	bl	800618a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	899b      	ldrh	r3, [r3, #12]
 8009faa:	461a      	mov	r2, r3
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 8009fb4:	e058      	b.n	800a068 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d01b      	beq.n	8009ff8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009fcc:	4290      	cmp	r0, r2
 8009fce:	eb71 0303 	sbcs.w	r3, r1, r3
 8009fd2:	d211      	bcs.n	8009ff8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	7858      	ldrb	r0, [r3, #1]
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009fde:	2301      	movs	r3, #1
 8009fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fe2:	f7fb fe8f 	bl	8005d04 <disk_read>
 8009fe6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d005      	beq.n	8009ff8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e072      	b.n	800a0de <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ffc:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	899b      	ldrh	r3, [r3, #12]
 800a002:	4618      	mov	r0, r3
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	899b      	ldrh	r3, [r3, #12]
 800a00e:	fbb2 f1f3 	udiv	r1, r2, r3
 800a012:	fb01 f303 	mul.w	r3, r1, r3
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	1ac3      	subs	r3, r0, r3
 800a01a:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a01c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	429a      	cmp	r2, r3
 800a022:	d901      	bls.n	800a028 <f_write+0x2ee>
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	899b      	ldrh	r3, [r3, #12]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	2200      	movs	r2, #0
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a044:	f7f6 fc32 	bl	80008ac <__aeabi_uldivmod>
 800a048:	4613      	mov	r3, r2
 800a04a:	4423      	add	r3, r4
 800a04c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a050:	4618      	mov	r0, r3
 800a052:	f7fc f89a 	bl	800618a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a05c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a060:	b2da      	uxtb	r2, r3
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06c:	4413      	add	r3, r2
 800a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a076:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a078:	2000      	movs	r0, #0
 800a07a:	4688      	mov	r8, r1
 800a07c:	4681      	mov	r9, r0
 800a07e:	eb12 0a08 	adds.w	sl, r2, r8
 800a082:	eb43 0b09 	adc.w	fp, r3, r9
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a098:	4290      	cmp	r0, r2
 800a09a:	eb71 0403 	sbcs.w	r4, r1, r3
 800a09e:	d201      	bcs.n	800a0a4 <f_write+0x36a>
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b0:	441a      	add	r2, r3
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f47f ae82 	bne.w	8009dca <f_write+0x90>
 800a0c6:	e000      	b.n	800a0ca <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a0c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a0d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3744      	adds	r7, #68	@ 0x44
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b09a      	sub	sp, #104	@ 0x68
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff fad3 	bl	80096a4 <validate>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a104:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f040 8105 	bne.w	800a318 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 80fd 	beq.w	800a318 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a124:	b25b      	sxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	da17      	bge.n	800a15a <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a12a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a12c:	7858      	ldrb	r0, [r3, #1]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a138:	2301      	movs	r3, #1
 800a13a:	f7fb fe03 	bl	8005d44 <disk_write>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <f_sync+0x60>
 800a144:	2301      	movs	r3, #1
 800a146:	e0e9      	b.n	800a31c <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a14e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a152:	b2da      	uxtb	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a15a:	f7fb fbb3 	bl	80058c4 <get_fattime>
 800a15e:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b04      	cmp	r3, #4
 800a166:	f040 808c 	bne.w	800a282 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fc fe67 	bl	8006e40 <fill_first_frag>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800a178:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a186:	f04f 32ff 	mov.w	r2, #4294967295
 800a18a:	4619      	mov	r1, r3
 800a18c:	f7fc fe87 	bl	8006e9e <fill_last_frag>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800a196:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f040 80bc 	bne.w	800a318 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fd fe51 	bl	8007e50 <load_obj_dir>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800a1b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f040 80ad 	bne.w	800a318 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800a1be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	781a      	ldrb	r2, [r3, #0]
 800a1c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	f042 0220 	orr.w	r2, r2, #32
 800a1d0:	b2d2      	uxtb	r2, r2
 800a1d2:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	79da      	ldrb	r2, [r3, #7]
 800a1d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	3321      	adds	r3, #33	@ 0x21
 800a1de:	f042 0201 	orr.w	r2, r2, #1
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800a1e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	f7fb ff14 	bl	8006022 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800a1fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a208:	4608      	mov	r0, r1
 800a20a:	f7fb ff36 	bl	800607a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800a20e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a21c:	4608      	mov	r0, r1
 800a21e:	f7fb ff2c 	bl	800607a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800a222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	330c      	adds	r3, #12
 800a228:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fb fef9 	bl	8006022 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800a230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	3315      	adds	r3, #21
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800a23a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	3310      	adds	r3, #16
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f7fb feed 	bl	8006022 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800a248:	f107 0308 	add.w	r3, r7, #8
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd fe35 	bl	8007ebc <store_xdir>
 800a252:	4603      	mov	r3, r0
 800a254:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a258:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d15b      	bne.n	800a318 <f_sync+0x230>
							res = sync_fs(fs);
 800a260:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a262:	4618      	mov	r0, r3
 800a264:	f7fc f9ee 	bl	8006644 <sync_fs>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800a280:	e04a      	b.n	800a318 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fc f9ac 	bl	80065e8 <move_window>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800a296:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d13c      	bne.n	800a318 <f_sync+0x230>
					dir = fp->dir_ptr;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2a6:	330b      	adds	r3, #11
 800a2a8:	781a      	ldrb	r2, [r3, #0]
 800a2aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2ac:	330b      	adds	r3, #11
 800a2ae:	f042 0220 	orr.w	r2, r2, #32
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800a2c2:	f7fd fa13 	bl	80076ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a2c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2c8:	f103 001c 	add.w	r0, r3, #28
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f7fb fea4 	bl	8006022 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2dc:	3316      	adds	r3, #22
 800a2de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fb fe9e 	bl	8006022 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a2e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2e8:	3312      	adds	r3, #18
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fb fe7d 	bl	8005fec <st_word>
					fs->wflag = 1;
 800a2f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a2f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fc f9a2 	bl	8006644 <sync_fs>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a30c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a310:	b2da      	uxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a318:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3768      	adds	r7, #104	@ 0x68
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff fedb 	bl	800a0e8 <f_sync>
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d118      	bne.n	800a36e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f107 0208 	add.w	r2, r7, #8
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff f9ad 	bl	80096a4 <validate>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10c      	bne.n	800a36e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fc f8a1 	bl	80064a0 <dec_lock>
 800a35e:	4603      	mov	r3, r0
 800a360:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d102      	bne.n	800a36e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <f_opendir+0x14>
 800a388:	2309      	movs	r3, #9
 800a38a:	e09a      	b.n	800a4c2 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a390:	f107 010c 	add.w	r1, r7, #12
 800a394:	463b      	mov	r3, r7
 800a396:	2200      	movs	r2, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fde9 	bl	8008f70 <find_volume>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f040 8085 	bne.w	800a4b4 <f_opendir+0x13c>
		obj->fs = fs;
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7fe fc85 	bl	8008cc4 <follow_path>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d172      	bne.n	800a4aa <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800a3ca:	b25b      	sxtb	r3, r3
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	db47      	blt.n	800a460 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	799b      	ldrb	r3, [r3, #6]
 800a3d4:	f003 0310 	and.w	r3, r3, #16
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d03f      	beq.n	800a45c <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d130      	bne.n	800a446 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	79d2      	ldrb	r2, [r2, #7]
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	3334      	adds	r3, #52	@ 0x34
 800a410:	4618      	mov	r0, r3
 800a412:	f7fb fced 	bl	8005df0 <ld_dword>
 800a416:	4602      	mov	r2, r0
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	3338      	adds	r3, #56	@ 0x38
 800a422:	4618      	mov	r0, r3
 800a424:	f7fb fd07 	bl	8005e36 <ld_qword>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	6939      	ldr	r1, [r7, #16]
 800a42e:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	3321      	adds	r3, #33	@ 0x21
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	71da      	strb	r2, [r3, #7]
 800a444:	e00c      	b.n	800a460 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fd f92d 	bl	80076ae <ld_clust>
 800a454:	4602      	mov	r2, r0
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	609a      	str	r2, [r3, #8]
 800a45a:	e001      	b.n	800a460 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a45c:	2305      	movs	r3, #5
 800a45e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d121      	bne.n	800a4aa <f_opendir+0x132>
				obj->id = fs->id;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	88da      	ldrh	r2, [r3, #6]
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a46e:	2100      	movs	r1, #0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7fc ff46 	bl	8007302 <dir_sdi>
 800a476:	4603      	mov	r3, r0
 800a478:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d114      	bne.n	800a4aa <f_opendir+0x132>
					if (obj->sclust) {
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00d      	beq.n	800a4a4 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fb ff7a 	bl	8006384 <inc_lock>
 800a490:	4602      	mov	r2, r0
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d105      	bne.n	800a4aa <f_opendir+0x132>
 800a49e:	2312      	movs	r3, #18
 800a4a0:	75fb      	strb	r3, [r7, #23]
 800a4a2:	e002      	b.n	800a4aa <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d101      	bne.n	800a4b4 <f_opendir+0x13c>
 800a4b0:	2305      	movs	r3, #5
 800a4b2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <f_opendir+0x148>
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f107 0208 	add.w	r2, r7, #8
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff f8e2 	bl	80096a4 <validate>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d110      	bne.n	800a50c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d006      	beq.n	800a500 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fb ffd2 	bl	80064a0 <dec_lock>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f107 0208 	add.w	r2, r7, #8
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff f8bb 	bl	80096a4 <validate>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d126      	bne.n	800a586 <f_readdir+0x70>
		if (!fno) {
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a53e:	2100      	movs	r1, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7fc fede 	bl	8007302 <dir_sdi>
 800a546:	4603      	mov	r3, r0
 800a548:	73fb      	strb	r3, [r7, #15]
 800a54a:	e01c      	b.n	800a586 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a54c:	2100      	movs	r1, #0
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7fd fd76 	bl	8008040 <dir_read>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d101      	bne.n	800a562 <f_readdir+0x4c>
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10e      	bne.n	800a586 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7fe f904 	bl	8008778 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a570:	2100      	movs	r1, #0
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7fc ff59 	bl	800742a <dir_next>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d101      	bne.n	800a586 <f_readdir+0x70>
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a586:	7bfb      	ldrb	r3, [r7, #15]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b098      	sub	sp, #96	@ 0x60
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a59a:	f107 0108 	add.w	r1, r7, #8
 800a59e:	1d3b      	adds	r3, r7, #4
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fce4 	bl	8008f70 <find_volume>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d11f      	bne.n	800a5f6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	f107 0308 	add.w	r3, r7, #8
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe fb80 	bl	8008cc4 <follow_path>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800a5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d111      	bne.n	800a5f6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a5d2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800a5d6:	b25b      	sxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	da03      	bge.n	800a5e4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a5dc:	2306      	movs	r3, #6
 800a5de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a5e2:	e008      	b.n	800a5f6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <f_stat+0x66>
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe f8c1 	bl	8008778 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3760      	adds	r7, #96	@ 0x60
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b09a      	sub	sp, #104	@ 0x68
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a60e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800a612:	f107 030c 	add.w	r3, r7, #12
 800a616:	2200      	movs	r2, #0
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe fca9 	bl	8008f70 <find_volume>
 800a61e:	4603      	mov	r3, r0
 800a620:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a624:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f040 80eb 	bne.w	800a804 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a62e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a636:	69da      	ldr	r2, [r3, #28]
 800a638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	3b02      	subs	r3, #2
 800a63e:	429a      	cmp	r2, r3
 800a640:	d804      	bhi.n	800a64c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a644:	69da      	ldr	r2, [r3, #28]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	e0db      	b.n	800a804 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	663b      	str	r3, [r7, #96]	@ 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d128      	bne.n	800a6aa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a658:	2302      	movs	r3, #2
 800a65a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a65c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a65e:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800a660:	f107 0310 	add.w	r3, r7, #16
 800a664:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800a666:	4618      	mov	r0, r3
 800a668:	f7fc f87c 	bl	8006764 <get_fat>
 800a66c:	6478      	str	r0, [r7, #68]	@ 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a66e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d103      	bne.n	800a67e <f_getfree+0x7c>
 800a676:	2301      	movs	r3, #1
 800a678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a67c:	e0b5      	b.n	800a7ea <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a680:	2b01      	cmp	r3, #1
 800a682:	d103      	bne.n	800a68c <f_getfree+0x8a>
 800a684:	2302      	movs	r3, #2
 800a686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a68a:	e0ae      	b.n	800a7ea <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800a68c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d102      	bne.n	800a698 <f_getfree+0x96>
 800a692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a694:	3301      	adds	r3, #1
 800a696:	663b      	str	r3, [r7, #96]	@ 0x60
				} while (++clst < fs->n_fatent);
 800a698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a69a:	3301      	adds	r3, #1
 800a69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a69e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d3db      	bcc.n	800a660 <f_getfree+0x5e>
 800a6a8:	e09f      	b.n	800a7ea <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800a6aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d14b      	bne.n	800a74a <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800a6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	3b02      	subs	r3, #2
 800a6b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sect = fs->database;
 800a6ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6be:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	657b      	str	r3, [r7, #84]	@ 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800a6c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10d      	bne.n	800a6e6 <f_getfree+0xe4>
 800a6ca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a6cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f7fb ff88 	bl	80065e8 <move_window>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a6de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d17e      	bne.n	800a7e4 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ee:	4413      	add	r3, r2
 800a6f0:	333c      	adds	r3, #60	@ 0x3c
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a6f8:	e013      	b.n	800a722 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800a6fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <f_getfree+0x10a>
 800a706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a708:	3301      	adds	r3, #1
 800a70a:	663b      	str	r3, [r7, #96]	@ 0x60
							bm >>= 1;
 800a70c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a710:	085b      	lsrs	r3, r3, #1
 800a712:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800a716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a718:	3b01      	subs	r3, #1
 800a71a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a71c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a71e:	3b01      	subs	r3, #1
 800a720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <f_getfree+0x12c>
 800a728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e5      	bne.n	800a6fa <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800a72e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a730:	3301      	adds	r3, #1
 800a732:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a734:	8992      	ldrh	r2, [r2, #12]
 800a736:	fbb3 f1f2 	udiv	r1, r3, r2
 800a73a:	fb01 f202 	mul.w	r2, r1, r2
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	657b      	str	r3, [r7, #84]	@ 0x54
					} while (clst);
 800a742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1bd      	bne.n	800a6c4 <f_getfree+0xc2>
 800a748:	e04f      	b.n	800a7ea <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a74a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a754:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0; p = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	657b      	str	r3, [r7, #84]	@ 0x54
 800a75a:	2300      	movs	r3, #0
 800a75c:	653b      	str	r3, [r7, #80]	@ 0x50
					do {
						if (i == 0) {
 800a75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a760:	2b00      	cmp	r3, #0
 800a762:	d113      	bne.n	800a78c <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800a764:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a76c:	4619      	mov	r1, r3
 800a76e:	f7fb ff3b 	bl	80065e8 <move_window>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							if (res != FR_OK) break;
 800a778:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d133      	bne.n	800a7e8 <f_getfree+0x1e6>
							p = fs->win;
 800a780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a782:	333c      	adds	r3, #60	@ 0x3c
 800a784:	653b      	str	r3, [r7, #80]	@ 0x50
							i = SS(fs);
 800a786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a788:	899b      	ldrh	r3, [r3, #12]
 800a78a:	657b      	str	r3, [r7, #84]	@ 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800a78c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d10f      	bne.n	800a7b4 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800a794:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a796:	f7fb fb13 	bl	8005dc0 <ld_word>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <f_getfree+0x1a4>
 800a7a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 2; i -= 2;
 800a7a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ae:	3b02      	subs	r3, #2
 800a7b0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7b2:	e010      	b.n	800a7d6 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a7b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a7b6:	f7fb fb1b 	bl	8005df0 <ld_dword>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <f_getfree+0x1c8>
 800a7c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 4; i -= 4;
 800a7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7d2:	3b04      	subs	r3, #4
 800a7d4:	657b      	str	r3, [r7, #84]	@ 0x54
						}
					} while (--clst);
 800a7d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1bd      	bne.n	800a75e <f_getfree+0x15c>
 800a7e2:	e002      	b.n	800a7ea <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800a7e4:	bf00      	nop
 800a7e6:	e000      	b.n	800a7ea <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800a7e8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a7ee:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a7f4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a7f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f8:	791a      	ldrb	r2, [r3, #4]
 800a7fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7fc:	f042 0201 	orr.w	r2, r2, #1
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a804:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3768      	adds	r7, #104	@ 0x68
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a826:	4b1f      	ldr	r3, [pc, #124]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a828:	7a5b      	ldrb	r3, [r3, #9]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d131      	bne.n	800a894 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a830:	4b1c      	ldr	r3, [pc, #112]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a832:	7a5b      	ldrb	r3, [r3, #9]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	461a      	mov	r2, r3
 800a838:	4b1a      	ldr	r3, [pc, #104]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a83a:	2100      	movs	r1, #0
 800a83c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a83e:	4b19      	ldr	r3, [pc, #100]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a840:	7a5b      	ldrb	r3, [r3, #9]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	4a17      	ldr	r2, [pc, #92]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a84e:	4b15      	ldr	r3, [pc, #84]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a850:	7a5b      	ldrb	r3, [r3, #9]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	461a      	mov	r2, r3
 800a856:	4b13      	ldr	r3, [pc, #76]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a858:	4413      	add	r3, r2
 800a85a:	79fa      	ldrb	r2, [r7, #7]
 800a85c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a85e:	4b11      	ldr	r3, [pc, #68]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a860:	7a5b      	ldrb	r3, [r3, #9]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	b2d1      	uxtb	r1, r2
 800a868:	4a0e      	ldr	r2, [pc, #56]	@ (800a8a4 <FATFS_LinkDriverEx+0x94>)
 800a86a:	7251      	strb	r1, [r2, #9]
 800a86c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a86e:	7dbb      	ldrb	r3, [r7, #22]
 800a870:	3330      	adds	r3, #48	@ 0x30
 800a872:	b2da      	uxtb	r2, r3
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	3301      	adds	r3, #1
 800a87c:	223a      	movs	r2, #58	@ 0x3a
 800a87e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	3302      	adds	r3, #2
 800a884:	222f      	movs	r2, #47	@ 0x2f
 800a886:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	3303      	adds	r3, #3
 800a88c:	2200      	movs	r2, #0
 800a88e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a890:	2300      	movs	r3, #0
 800a892:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
}
 800a896:	4618      	mov	r0, r3
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	20002708 	.word	0x20002708

0800a8a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7ff ffaa 	bl	800a810 <FATFS_LinkDriverEx>
 800a8bc:	4603      	mov	r3, r0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e029      	b.n	800a932 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	79fa      	ldrb	r2, [r7, #7]
 800a8e2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f81f 	bl	800a93a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f003 f978 	bl	800dc20 <USBH_LL_Init>

  return USBH_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e009      	b.n	800a960 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	33e0      	adds	r3, #224	@ 0xe0
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	2200      	movs	r2, #0
 800a958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3301      	adds	r3, #1
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b0f      	cmp	r3, #15
 800a964:	d9f2      	bls.n	800a94c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a966:	2300      	movs	r3, #0
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	e009      	b.n	800a980 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a976:	2200      	movs	r2, #0
 800a978:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3301      	adds	r3, #1
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a986:	d3f1      	bcc.n	800a96c <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2240      	movs	r2, #64	@ 0x40
 800a9ac:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	331c      	adds	r3, #28
 800a9d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f003 fc26 	bl	800e230 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a9ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f003 fc1d 	bl	800e230 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a9fc:	2212      	movs	r2, #18
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f003 fc15 	bl	800e230 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aa0c:	223e      	movs	r2, #62	@ 0x3e
 800aa0e:	2100      	movs	r1, #0
 800aa10:	4618      	mov	r0, r3
 800aa12:	f003 fc0d 	bl	800e230 <memset>

  return USBH_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d016      	beq.n	800aa62 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10e      	bne.n	800aa5c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800aa44:	1c59      	adds	r1, r3, #1
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	33de      	adds	r3, #222	@ 0xde
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
 800aa5a:	e004      	b.n	800aa66 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	73fb      	strb	r3, [r7, #15]
 800aa60:	e001      	b.n	800aa66 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aa62:	2302      	movs	r3, #2
 800aa64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d204      	bcs.n	800aa9a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	78fa      	ldrb	r2, [r7, #3]
 800aa94:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800aa98:	e001      	b.n	800aa9e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	4608      	mov	r0, r1
 800aab6:	4611      	mov	r1, r2
 800aab8:	461a      	mov	r2, r3
 800aaba:	4603      	mov	r3, r0
 800aabc:	70fb      	strb	r3, [r7, #3]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70bb      	strb	r3, [r7, #2]
 800aac2:	4613      	mov	r3, r2
 800aac4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aad4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aad6:	e025      	b.n	800ab24 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
 800aada:	221a      	movs	r2, #26
 800aadc:	fb02 f303 	mul.w	r3, r2, r3
 800aae0:	3308      	adds	r3, #8
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	3302      	adds	r3, #2
 800aae8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	795b      	ldrb	r3, [r3, #5]
 800aaee:	78fa      	ldrb	r2, [r7, #3]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d002      	beq.n	800aafa <USBH_FindInterface+0x4e>
 800aaf4:	78fb      	ldrb	r3, [r7, #3]
 800aaf6:	2bff      	cmp	r3, #255	@ 0xff
 800aaf8:	d111      	bne.n	800ab1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aafe:	78ba      	ldrb	r2, [r7, #2]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d002      	beq.n	800ab0a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab04:	78bb      	ldrb	r3, [r7, #2]
 800ab06:	2bff      	cmp	r3, #255	@ 0xff
 800ab08:	d109      	bne.n	800ab1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab0e:	787a      	ldrb	r2, [r7, #1]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d002      	beq.n	800ab1a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab14:	787b      	ldrb	r3, [r7, #1]
 800ab16:	2bff      	cmp	r3, #255	@ 0xff
 800ab18:	d101      	bne.n	800ab1e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	e006      	b.n	800ab2c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	3301      	adds	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d9d6      	bls.n	800aad8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ab2a:	23ff      	movs	r3, #255	@ 0xff
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f003 f8a9 	bl	800dc98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ab46:	2101      	movs	r1, #1
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f003 f9c2 	bl	800ded2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af04      	add	r7, sp, #16
 800ab5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d102      	bne.n	800ab7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2203      	movs	r2, #3
 800ab78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b0b      	cmp	r3, #11
 800ab82:	f200 81bb 	bhi.w	800aefc <USBH_Process+0x3a4>
 800ab86:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <USBH_Process+0x34>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abbd 	.word	0x0800abbd
 800ab90:	0800abef 	.word	0x0800abef
 800ab94:	0800ac57 	.word	0x0800ac57
 800ab98:	0800ae97 	.word	0x0800ae97
 800ab9c:	0800aefd 	.word	0x0800aefd
 800aba0:	0800acf7 	.word	0x0800acf7
 800aba4:	0800ae3d 	.word	0x0800ae3d
 800aba8:	0800ad2d 	.word	0x0800ad2d
 800abac:	0800ad4d 	.word	0x0800ad4d
 800abb0:	0800ad6b 	.word	0x0800ad6b
 800abb4:	0800adaf 	.word	0x0800adaf
 800abb8:	0800ae7f 	.word	0x0800ae7f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 819b 	beq.w	800af00 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800abd0:	20c8      	movs	r0, #200	@ 0xc8
 800abd2:	f003 f9fb 	bl	800dfcc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f003 f8bb 	bl	800dd52 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800abec:	e188      	b.n	800af00 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d107      	bne.n	800ac08 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac06:	e18a      	b.n	800af1e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ac0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac12:	d914      	bls.n	800ac3e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d903      	bls.n	800ac36 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	220d      	movs	r2, #13
 800ac32:	701a      	strb	r2, [r3, #0]
      break;
 800ac34:	e173      	b.n	800af1e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	701a      	strb	r2, [r3, #0]
      break;
 800ac3c:	e16f      	b.n	800af1e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ac44:	f103 020a 	add.w	r2, r3, #10
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ac4e:	200a      	movs	r0, #10
 800ac50:	f003 f9bc 	bl	800dfcc <USBH_Delay>
      break;
 800ac54:	e163      	b.n	800af1e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ac66:	2104      	movs	r1, #4
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ac6c:	2064      	movs	r0, #100	@ 0x64
 800ac6e:	f003 f9ad 	bl	800dfcc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f003 f846 	bl	800dd04 <USBH_LL_GetSpeed>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2205      	movs	r2, #5
 800ac86:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f002 fe3c 	bl	800d908 <USBH_AllocPipe>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ac98:	2180      	movs	r1, #128	@ 0x80
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f002 fe34 	bl	800d908 <USBH_AllocPipe>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	7919      	ldrb	r1, [r3, #4]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800acbc:	9202      	str	r2, [sp, #8]
 800acbe:	2200      	movs	r2, #0
 800acc0:	9201      	str	r2, [sp, #4]
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4603      	mov	r3, r0
 800acc6:	2280      	movs	r2, #128	@ 0x80
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f002 fdee 	bl	800d8aa <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	7959      	ldrb	r1, [r3, #5]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ace2:	9202      	str	r2, [sp, #8]
 800ace4:	2200      	movs	r2, #0
 800ace6:	9201      	str	r2, [sp, #4]
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	4603      	mov	r3, r0
 800acec:	2200      	movs	r2, #0
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f002 fddb 	bl	800d8aa <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acf4:	e113      	b.n	800af1e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f916 	bl	800af28 <USBH_HandleEnum>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f040 80fd 	bne.w	800af04 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d103      	bne.n	800ad24 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2208      	movs	r2, #8
 800ad20:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad22:	e0ef      	b.n	800af04 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2207      	movs	r2, #7
 800ad28:	701a      	strb	r2, [r3, #0]
      break;
 800ad2a:	e0eb      	b.n	800af04 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 80e8 	beq.w	800af08 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad3e:	2101      	movs	r1, #1
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2208      	movs	r2, #8
 800ad48:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ad4a:	e0dd      	b.n	800af08 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fc3a 	bl	800b5ce <USBH_SetCfg>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 80d5 	bne.w	800af0c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2209      	movs	r2, #9
 800ad66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad68:	e0d0      	b.n	800af0c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ad70:	f003 0320 	and.w	r3, r3, #32
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d016      	beq.n	800ada6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ad78:	2101      	movs	r1, #1
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fc4a 	bl	800b614 <USBH_SetFeature>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	220a      	movs	r2, #10
 800ad90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad92:	e0bd      	b.n	800af10 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	f040 80b9 	bne.w	800af10 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	220a      	movs	r2, #10
 800ada2:	701a      	strb	r2, [r3, #0]
      break;
 800ada4:	e0b4      	b.n	800af10 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	220a      	movs	r2, #10
 800adaa:	701a      	strb	r2, [r3, #0]
      break;
 800adac:	e0b0      	b.n	800af10 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80ad 	beq.w	800af14 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
 800adc6:	e016      	b.n	800adf6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800adc8:	7bfa      	ldrb	r2, [r7, #15]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	32de      	adds	r2, #222	@ 0xde
 800adce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add2:	791a      	ldrb	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800adda:	429a      	cmp	r2, r3
 800addc:	d108      	bne.n	800adf0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800adde:	7bfa      	ldrb	r2, [r7, #15]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	32de      	adds	r2, #222	@ 0xde
 800ade4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800adee:	e005      	b.n	800adfc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	3301      	adds	r3, #1
 800adf4:	73fb      	strb	r3, [r7, #15]
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0e5      	beq.n	800adc8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d016      	beq.n	800ae34 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d109      	bne.n	800ae2c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2206      	movs	r2, #6
 800ae1c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae24:	2103      	movs	r1, #3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae2a:	e073      	b.n	800af14 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	220d      	movs	r2, #13
 800ae30:	701a      	strb	r2, [r3, #0]
      break;
 800ae32:	e06f      	b.n	800af14 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	220d      	movs	r2, #13
 800ae38:	701a      	strb	r2, [r3, #0]
      break;
 800ae3a:	e06b      	b.n	800af14 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d017      	beq.n	800ae76 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	4798      	blx	r3
 800ae52:	4603      	mov	r3, r0
 800ae54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d103      	bne.n	800ae66 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	220b      	movs	r2, #11
 800ae62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae64:	e058      	b.n	800af18 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d154      	bne.n	800af18 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	220d      	movs	r2, #13
 800ae72:	701a      	strb	r2, [r3, #0]
      break;
 800ae74:	e050      	b.n	800af18 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	220d      	movs	r2, #13
 800ae7a:	701a      	strb	r2, [r3, #0]
      break;
 800ae7c:	e04c      	b.n	800af18 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d049      	beq.n	800af1c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	4798      	blx	r3
      }
      break;
 800ae94:	e042      	b.n	800af1c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff fd4b 	bl	800a93a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d009      	beq.n	800aec2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aed2:	2105      	movs	r1, #5
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d107      	bne.n	800aef4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fe23 	bl	800ab38 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aef2:	e014      	b.n	800af1e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f002 fecf 	bl	800dc98 <USBH_LL_Start>
      break;
 800aefa:	e010      	b.n	800af1e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800aefc:	bf00      	nop
 800aefe:	e00e      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af00:	bf00      	nop
 800af02:	e00c      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af04:	bf00      	nop
 800af06:	e00a      	b.n	800af1e <USBH_Process+0x3c6>
    break;
 800af08:	bf00      	nop
 800af0a:	e008      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af0c:	bf00      	nop
 800af0e:	e006      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af10:	bf00      	nop
 800af12:	e004      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af14:	bf00      	nop
 800af16:	e002      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af18:	bf00      	nop
 800af1a:	e000      	b.n	800af1e <USBH_Process+0x3c6>
      break;
 800af1c:	bf00      	nop
  }
  return USBH_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af04      	add	r7, sp, #16
 800af2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af30:	2301      	movs	r3, #1
 800af32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800af34:	2301      	movs	r3, #1
 800af36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	785b      	ldrb	r3, [r3, #1]
 800af3c:	2b07      	cmp	r3, #7
 800af3e:	f200 81bd 	bhi.w	800b2bc <USBH_HandleEnum+0x394>
 800af42:	a201      	add	r2, pc, #4	@ (adr r2, 800af48 <USBH_HandleEnum+0x20>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af69 	.word	0x0800af69
 800af4c:	0800b023 	.word	0x0800b023
 800af50:	0800b08d 	.word	0x0800b08d
 800af54:	0800b117 	.word	0x0800b117
 800af58:	0800b181 	.word	0x0800b181
 800af5c:	0800b1f1 	.word	0x0800b1f1
 800af60:	0800b237 	.word	0x0800b237
 800af64:	0800b27d 	.word	0x0800b27d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af68:	2108      	movs	r1, #8
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fa4c 	bl	800b408 <USBH_Get_DevDesc>
 800af70:	4603      	mov	r3, r0
 800af72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d12e      	bne.n	800afd8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7919      	ldrb	r1, [r3, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af9e:	9202      	str	r2, [sp, #8]
 800afa0:	2200      	movs	r2, #0
 800afa2:	9201      	str	r2, [sp, #4]
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	4603      	mov	r3, r0
 800afa8:	2280      	movs	r2, #128	@ 0x80
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f002 fc7d 	bl	800d8aa <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	7959      	ldrb	r1, [r3, #5]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afc4:	9202      	str	r2, [sp, #8]
 800afc6:	2200      	movs	r2, #0
 800afc8:	9201      	str	r2, [sp, #4]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4603      	mov	r3, r0
 800afce:	2200      	movs	r2, #0
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f002 fc6a 	bl	800d8aa <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800afd6:	e173      	b.n	800b2c0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	2b03      	cmp	r3, #3
 800afdc:	f040 8170 	bne.w	800b2c0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800afe6:	3301      	adds	r3, #1
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d903      	bls.n	800b002 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	220d      	movs	r2, #13
 800affe:	701a      	strb	r2, [r3, #0]
      break;
 800b000:	e15e      	b.n	800b2c0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	795b      	ldrb	r3, [r3, #5]
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f002 fc9e 	bl	800d94a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	791b      	ldrb	r3, [r3, #4]
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f002 fc98 	bl	800d94a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
      break;
 800b020:	e14e      	b.n	800b2c0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b022:	2112      	movs	r1, #18
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9ef 	bl	800b408 <USBH_Get_DevDesc>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d103      	bne.n	800b03c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2202      	movs	r2, #2
 800b038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b03a:	e143      	b.n	800b2c4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b03      	cmp	r3, #3
 800b040:	f040 8140 	bne.w	800b2c4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b04a:	3301      	adds	r3, #1
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d903      	bls.n	800b066 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	220d      	movs	r2, #13
 800b062:	701a      	strb	r2, [r3, #0]
      break;
 800b064:	e12e      	b.n	800b2c4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	795b      	ldrb	r3, [r3, #5]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f002 fc6c 	bl	800d94a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	791b      	ldrb	r3, [r3, #4]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f002 fc66 	bl	800d94a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
      break;
 800b08a:	e11b      	b.n	800b2c4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b08c:	2101      	movs	r1, #1
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fa79 	bl	800b586 <USBH_SetAddress>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d130      	bne.n	800b100 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b09e:	2002      	movs	r0, #2
 800b0a0:	f002 ff94 	bl	800dfcc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	7919      	ldrb	r1, [r3, #4]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0c6:	9202      	str	r2, [sp, #8]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	9201      	str	r2, [sp, #4]
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2280      	movs	r2, #128	@ 0x80
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f002 fbe9 	bl	800d8aa <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7959      	ldrb	r1, [r3, #5]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0ec:	9202      	str	r2, [sp, #8]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	9201      	str	r2, [sp, #4]
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f002 fbd6 	bl	800d8aa <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0fe:	e0e3      	b.n	800b2c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	2b03      	cmp	r3, #3
 800b104:	f040 80e0 	bne.w	800b2c8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	220d      	movs	r2, #13
 800b10c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	705a      	strb	r2, [r3, #1]
      break;
 800b114:	e0d8      	b.n	800b2c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b116:	2109      	movs	r1, #9
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9a1 	bl	800b460 <USBH_Get_CfgDesc>
 800b11e:	4603      	mov	r3, r0
 800b120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2204      	movs	r2, #4
 800b12c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b12e:	e0cd      	b.n	800b2cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b130:	7bbb      	ldrb	r3, [r7, #14]
 800b132:	2b03      	cmp	r3, #3
 800b134:	f040 80ca 	bne.w	800b2cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b13e:	3301      	adds	r3, #1
 800b140:	b2da      	uxtb	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d903      	bls.n	800b15a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	220d      	movs	r2, #13
 800b156:	701a      	strb	r2, [r3, #0]
      break;
 800b158:	e0b8      	b.n	800b2cc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	795b      	ldrb	r3, [r3, #5]
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f002 fbf2 	bl	800d94a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	791b      	ldrb	r3, [r3, #4]
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f002 fbec 	bl	800d94a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	701a      	strb	r2, [r3, #0]
      break;
 800b17e:	e0a5      	b.n	800b2cc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f969 	bl	800b460 <USBH_Get_CfgDesc>
 800b18e:	4603      	mov	r3, r0
 800b190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d103      	bne.n	800b1a0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2205      	movs	r2, #5
 800b19c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b19e:	e097      	b.n	800b2d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	f040 8094 	bne.w	800b2d0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d903      	bls.n	800b1ca <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	220d      	movs	r2, #13
 800b1c6:	701a      	strb	r2, [r3, #0]
      break;
 800b1c8:	e082      	b.n	800b2d0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	795b      	ldrb	r3, [r3, #5]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f002 fbba 	bl	800d94a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	791b      	ldrb	r3, [r3, #4]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f002 fbb4 	bl	800d94a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
      break;
 800b1ee:	e06f      	b.n	800b2d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d019      	beq.n	800b22e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b206:	23ff      	movs	r3, #255	@ 0xff
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f953 	bl	800b4b4 <USBH_Get_StringDesc>
 800b20e:	4603      	mov	r3, r0
 800b210:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d103      	bne.n	800b220 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2206      	movs	r2, #6
 800b21c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b21e:	e059      	b.n	800b2d4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b03      	cmp	r3, #3
 800b224:	d156      	bne.n	800b2d4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2206      	movs	r2, #6
 800b22a:	705a      	strb	r2, [r3, #1]
      break;
 800b22c:	e052      	b.n	800b2d4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2206      	movs	r2, #6
 800b232:	705a      	strb	r2, [r3, #1]
      break;
 800b234:	e04e      	b.n	800b2d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d019      	beq.n	800b274 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b24c:	23ff      	movs	r3, #255	@ 0xff
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f930 	bl	800b4b4 <USBH_Get_StringDesc>
 800b254:	4603      	mov	r3, r0
 800b256:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2207      	movs	r2, #7
 800b262:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b264:	e038      	b.n	800b2d8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b266:	7bbb      	ldrb	r3, [r7, #14]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d135      	bne.n	800b2d8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2207      	movs	r2, #7
 800b270:	705a      	strb	r2, [r3, #1]
      break;
 800b272:	e031      	b.n	800b2d8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2207      	movs	r2, #7
 800b278:	705a      	strb	r2, [r3, #1]
      break;
 800b27a:	e02d      	b.n	800b2d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b282:	2b00      	cmp	r3, #0
 800b284:	d017      	beq.n	800b2b6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b292:	23ff      	movs	r3, #255	@ 0xff
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f90d 	bl	800b4b4 <USBH_Get_StringDesc>
 800b29a:	4603      	mov	r3, r0
 800b29c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b29e:	7bbb      	ldrb	r3, [r7, #14]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d102      	bne.n	800b2aa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b2a8:	e018      	b.n	800b2dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d115      	bne.n	800b2dc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b4:	e012      	b.n	800b2dc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ba:	e00f      	b.n	800b2dc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b2bc:	bf00      	nop
 800b2be:	e00e      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2c0:	bf00      	nop
 800b2c2:	e00c      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2c4:	bf00      	nop
 800b2c6:	e00a      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2c8:	bf00      	nop
 800b2ca:	e008      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2cc:	bf00      	nop
 800b2ce:	e006      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2d0:	bf00      	nop
 800b2d2:	e004      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2d4:	bf00      	nop
 800b2d6:	e002      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2d8:	bf00      	nop
 800b2da:	e000      	b.n	800b2de <USBH_HandleEnum+0x3b6>
      break;
 800b2dc:	bf00      	nop
  }
  return Status;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f804 	bl	800b32a <USBH_HandleSof>
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b0b      	cmp	r3, #11
 800b33a:	d10a      	bne.n	800b352 <USBH_HandleSof+0x28>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	4798      	blx	r3
  }
}
 800b352:	bf00      	nop
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b36a:	bf00      	nop
}
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b376:	b480      	push	{r7}
 800b378:	b083      	sub	sp, #12
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b386:	bf00      	nop
}
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b392:	b480      	push	{r7}
 800b394:	b083      	sub	sp, #12
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f002 fc74 	bl	800dcce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	791b      	ldrb	r3, [r3, #4]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 faac 	bl	800d94a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	795b      	ldrb	r3, [r3, #5]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f002 faa6 	bl	800d94a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b414:	887b      	ldrh	r3, [r7, #2]
 800b416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b41a:	d901      	bls.n	800b420 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e01b      	b.n	800b458 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b426:	887b      	ldrh	r3, [r7, #2]
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	4613      	mov	r3, r2
 800b42c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b430:	2100      	movs	r1, #0
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f872 	bl	800b51c <USBH_GetDescriptor>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d109      	bne.n	800b456 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b448:	887a      	ldrh	r2, [r7, #2]
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f929 	bl	800b6a4 <USBH_ParseDevDesc>
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af02      	add	r7, sp, #8
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	331c      	adds	r3, #28
 800b470:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b472:	887b      	ldrh	r3, [r7, #2]
 800b474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b478:	d901      	bls.n	800b47e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e016      	b.n	800b4ac <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b47e:	887b      	ldrh	r3, [r7, #2]
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b488:	2100      	movs	r1, #0
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f846 	bl	800b51c <USBH_GetDescriptor>
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d107      	bne.n	800b4aa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b49a:	887b      	ldrh	r3, [r7, #2]
 800b49c:	461a      	mov	r2, r3
 800b49e:	68b9      	ldr	r1, [r7, #8]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f9af 	bl	800b804 <USBH_ParseCfgDesc>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	607a      	str	r2, [r7, #4]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	72fb      	strb	r3, [r7, #11]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b4c8:	893b      	ldrh	r3, [r7, #8]
 800b4ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4ce:	d802      	bhi.n	800b4d6 <USBH_Get_StringDesc+0x22>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e01c      	b.n	800b514 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b4da:	7afb      	ldrb	r3, [r7, #11]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b4e2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b4ea:	893b      	ldrh	r3, [r7, #8]
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 f812 	bl	800b51c <USBH_GetDescriptor>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d107      	bne.n	800b512 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b508:	893a      	ldrh	r2, [r7, #8]
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 fb8d 	bl	800bc2c <USBH_ParseStringDesc>
  }

  return status;
 800b512:	7dfb      	ldrb	r3, [r7, #23]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	607b      	str	r3, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	72fb      	strb	r3, [r7, #11]
 800b52a:	4613      	mov	r3, r2
 800b52c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	789b      	ldrb	r3, [r3, #2]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d11c      	bne.n	800b570 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2206      	movs	r2, #6
 800b546:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	893a      	ldrh	r2, [r7, #8]
 800b54c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b54e:	893b      	ldrh	r3, [r7, #8]
 800b550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b558:	d104      	bne.n	800b564 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f240 4209 	movw	r2, #1033	@ 0x409
 800b560:	829a      	strh	r2, [r3, #20]
 800b562:	e002      	b.n	800b56a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	8b3a      	ldrh	r2, [r7, #24]
 800b56e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b570:	8b3b      	ldrh	r3, [r7, #24]
 800b572:	461a      	mov	r2, r3
 800b574:	6879      	ldr	r1, [r7, #4]
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 fba5 	bl	800bcc6 <USBH_CtlReq>
 800b57c:	4603      	mov	r3, r0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	460b      	mov	r3, r1
 800b590:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	789b      	ldrb	r3, [r3, #2]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d10f      	bne.n	800b5ba <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2205      	movs	r2, #5
 800b5a4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb81 	bl	800bcc6 <USBH_CtlReq>
 800b5c4:	4603      	mov	r3, r0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	789b      	ldrb	r3, [r3, #2]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d10e      	bne.n	800b600 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2209      	movs	r2, #9
 800b5ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	887a      	ldrh	r2, [r7, #2]
 800b5f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fb5e 	bl	800bcc6 <USBH_CtlReq>
 800b60a:	4603      	mov	r3, r0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	789b      	ldrb	r3, [r3, #2]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10f      	bne.n	800b648 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2203      	movs	r2, #3
 800b632:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b634:	78fb      	ldrb	r3, [r7, #3]
 800b636:	b29a      	uxth	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fb3a 	bl	800bcc6 <USBH_CtlReq>
 800b652:	4603      	mov	r3, r0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	460b      	mov	r3, r1
 800b666:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	789b      	ldrb	r3, [r3, #2]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d10f      	bne.n	800b690 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	b29a      	uxth	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b690:	2200      	movs	r2, #0
 800b692:	2100      	movs	r1, #0
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fb16 	bl	800bcc6 <USBH_CtlReq>
 800b69a:	4603      	mov	r3, r0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b6b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e094      	b.n	800b7f2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	785a      	ldrb	r2, [r3, #1]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	3302      	adds	r3, #2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3303      	adds	r3, #3
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	021b      	lsls	r3, r3, #8
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	791a      	ldrb	r2, [r3, #4]
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	795a      	ldrb	r2, [r3, #5]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	799a      	ldrb	r2, [r3, #6]
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	79da      	ldrb	r2, [r3, #7]
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b722:	2b01      	cmp	r3, #1
 800b724:	d11b      	bne.n	800b75e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	79db      	ldrb	r3, [r3, #7]
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	dc0f      	bgt.n	800b74e <USBH_ParseDevDesc+0xaa>
 800b72e:	2b08      	cmp	r3, #8
 800b730:	db0f      	blt.n	800b752 <USBH_ParseDevDesc+0xae>
 800b732:	3b08      	subs	r3, #8
 800b734:	4a32      	ldr	r2, [pc, #200]	@ (800b800 <USBH_ParseDevDesc+0x15c>)
 800b736:	fa22 f303 	lsr.w	r3, r2, r3
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	bf14      	ite	ne
 800b742:	2301      	movne	r3, #1
 800b744:	2300      	moveq	r3, #0
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <USBH_ParseDevDesc+0xb6>
 800b74c:	e001      	b.n	800b752 <USBH_ParseDevDesc+0xae>
 800b74e:	2b40      	cmp	r3, #64	@ 0x40
 800b750:	d003      	beq.n	800b75a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	2208      	movs	r2, #8
 800b756:	71da      	strb	r2, [r3, #7]
        break;
 800b758:	e000      	b.n	800b75c <USBH_ParseDevDesc+0xb8>
        break;
 800b75a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b75c:	e00e      	b.n	800b77c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b764:	2b02      	cmp	r3, #2
 800b766:	d107      	bne.n	800b778 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	79db      	ldrb	r3, [r3, #7]
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d005      	beq.n	800b77c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2208      	movs	r2, #8
 800b774:	71da      	strb	r2, [r3, #7]
 800b776:	e001      	b.n	800b77c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b778:	2303      	movs	r3, #3
 800b77a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	2b08      	cmp	r3, #8
 800b780:	d936      	bls.n	800b7f0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	3308      	adds	r3, #8
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	461a      	mov	r2, r3
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	3309      	adds	r3, #9
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	b29b      	uxth	r3, r3
 800b794:	4313      	orrs	r3, r2
 800b796:	b29a      	uxth	r2, r3
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	330a      	adds	r3, #10
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	330b      	adds	r3, #11
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	330c      	adds	r3, #12
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	330d      	adds	r3, #13
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	021b      	lsls	r3, r3, #8
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	7b9a      	ldrb	r2, [r3, #14]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	7bda      	ldrb	r2, [r3, #15]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	7c1a      	ldrb	r2, [r3, #16]
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	7c5a      	ldrb	r2, [r3, #17]
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	01000101 	.word	0x01000101

0800b804 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08c      	sub	sp, #48	@ 0x30
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b818:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b832:	2302      	movs	r3, #2
 800b834:	e0da      	b.n	800b9ec <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	785a      	ldrb	r2, [r3, #1]
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	3302      	adds	r3, #2
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	3303      	adds	r3, #3
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	021b      	lsls	r3, r3, #8
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	4313      	orrs	r3, r2
 800b85e:	b29b      	uxth	r3, r3
 800b860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b864:	bf28      	it	cs
 800b866:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	791a      	ldrb	r2, [r3, #4]
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	795a      	ldrb	r2, [r3, #5]
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	799a      	ldrb	r2, [r3, #6]
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	79da      	ldrb	r2, [r3, #7]
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	7a1a      	ldrb	r2, [r3, #8]
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b09      	cmp	r3, #9
 800b89e:	d002      	beq.n	800b8a6 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	2209      	movs	r2, #9
 800b8a4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8a6:	88fb      	ldrh	r3, [r7, #6]
 800b8a8:	2b09      	cmp	r3, #9
 800b8aa:	f240 809d 	bls.w	800b9e8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b8ae:	2309      	movs	r3, #9
 800b8b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8b6:	e081      	b.n	800b9bc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8b8:	f107 0316 	add.w	r3, r7, #22
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8c0:	f000 f9e7 	bl	800bc92 <USBH_GetNextDesc>
 800b8c4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d176      	bne.n	800b9bc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b09      	cmp	r3, #9
 800b8d4:	d002      	beq.n	800b8dc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d8:	2209      	movs	r2, #9
 800b8da:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8e0:	221a      	movs	r2, #26
 800b8e2:	fb02 f303 	mul.w	r3, r2, r3
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	6a3a      	ldr	r2, [r7, #32]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3302      	adds	r3, #2
 800b8ee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b8f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8f2:	69f8      	ldr	r0, [r7, #28]
 800b8f4:	f000 f87e 	bl	800b9f4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b902:	e043      	b.n	800b98c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b904:	f107 0316 	add.w	r3, r7, #22
 800b908:	4619      	mov	r1, r3
 800b90a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b90c:	f000 f9c1 	bl	800bc92 <USBH_GetNextDesc>
 800b910:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	2b05      	cmp	r3, #5
 800b918:	d138      	bne.n	800b98c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	795b      	ldrb	r3, [r3, #5]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d113      	bne.n	800b94a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b926:	2b02      	cmp	r3, #2
 800b928:	d003      	beq.n	800b932 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	799b      	ldrb	r3, [r3, #6]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d10b      	bne.n	800b94a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	79db      	ldrb	r3, [r3, #7]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <USBH_ParseCfgDesc+0x14e>
 800b93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b09      	cmp	r3, #9
 800b940:	d007      	beq.n	800b952 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b944:	2209      	movs	r2, #9
 800b946:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b948:	e003      	b.n	800b952 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	2207      	movs	r2, #7
 800b94e:	701a      	strb	r2, [r3, #0]
 800b950:	e000      	b.n	800b954 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b952:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b958:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b95c:	3201      	adds	r2, #1
 800b95e:	00d2      	lsls	r2, r2, #3
 800b960:	211a      	movs	r1, #26
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	4413      	add	r3, r2
 800b968:	3308      	adds	r3, #8
 800b96a:	6a3a      	ldr	r2, [r7, #32]
 800b96c:	4413      	add	r3, r2
 800b96e:	3304      	adds	r3, #4
 800b970:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b974:	69b9      	ldr	r1, [r7, #24]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 f870 	bl	800ba5c <USBH_ParseEPDesc>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b982:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b986:	3301      	adds	r3, #1
 800b988:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	791b      	ldrb	r3, [r3, #4]
 800b990:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b994:	429a      	cmp	r2, r3
 800b996:	d204      	bcs.n	800b9a2 <USBH_ParseCfgDesc+0x19e>
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	885a      	ldrh	r2, [r3, #2]
 800b99c:	8afb      	ldrh	r3, [r7, #22]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d8b0      	bhi.n	800b904 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	791b      	ldrb	r3, [r3, #4]
 800b9a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d201      	bcs.n	800b9b2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e01c      	b.n	800b9ec <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d805      	bhi.n	800b9d0 <USBH_ParseCfgDesc+0x1cc>
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	885a      	ldrh	r2, [r3, #2]
 800b9c8:	8afb      	ldrh	r3, [r7, #22]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	f63f af74 	bhi.w	800b8b8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b9d0:	6a3b      	ldr	r3, [r7, #32]
 800b9d2:	791b      	ldrb	r3, [r3, #4]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	bf28      	it	cs
 800b9d8:	2302      	movcs	r3, #2
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d201      	bcs.n	800b9e8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e001      	b.n	800b9ec <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b9e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3730      	adds	r7, #48	@ 0x30
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	781a      	ldrb	r2, [r3, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	785a      	ldrb	r2, [r3, #1]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	789a      	ldrb	r2, [r3, #2]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	78da      	ldrb	r2, [r3, #3]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	3304      	adds	r3, #4
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	bf28      	it	cs
 800ba28:	2302      	movcs	r3, #2
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	795a      	ldrb	r2, [r3, #5]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	799a      	ldrb	r2, [r3, #6]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	79da      	ldrb	r2, [r3, #7]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	7a1a      	ldrb	r2, [r3, #8]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	721a      	strb	r2, [r3, #8]
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	781a      	ldrb	r2, [r3, #0]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	785a      	ldrb	r2, [r3, #1]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	789a      	ldrb	r2, [r3, #2]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	78da      	ldrb	r2, [r3, #3]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3305      	adds	r3, #5
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	021b      	lsls	r3, r3, #8
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	799a      	ldrb	r2, [r3, #6]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	889b      	ldrh	r3, [r3, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d009      	beq.n	800baca <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800baba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800babe:	d804      	bhi.n	800baca <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bac8:	d901      	bls.n	800bace <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800baca:	2303      	movs	r3, #3
 800bacc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d136      	bne.n	800bb46 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	78db      	ldrb	r3, [r3, #3]
 800badc:	f003 0303 	and.w	r3, r3, #3
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d108      	bne.n	800baf6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	889b      	ldrh	r3, [r3, #4]
 800bae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baec:	f240 8097 	bls.w	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800baf0:	2303      	movs	r3, #3
 800baf2:	75fb      	strb	r3, [r7, #23]
 800baf4:	e093      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	78db      	ldrb	r3, [r3, #3]
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d107      	bne.n	800bb12 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	889b      	ldrh	r3, [r3, #4]
 800bb06:	2b40      	cmp	r3, #64	@ 0x40
 800bb08:	f240 8089 	bls.w	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	75fb      	strb	r3, [r7, #23]
 800bb10:	e085      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	78db      	ldrb	r3, [r3, #3]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d005      	beq.n	800bb2a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	78db      	ldrb	r3, [r3, #3]
 800bb22:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d10a      	bne.n	800bb40 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	799b      	ldrb	r3, [r3, #6]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <USBH_ParseEPDesc+0xde>
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	799b      	ldrb	r3, [r3, #6]
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d970      	bls.n	800bc1c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb3e:	e06d      	b.n	800bc1c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bb40:	2303      	movs	r3, #3
 800bb42:	75fb      	strb	r3, [r7, #23]
 800bb44:	e06b      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d13c      	bne.n	800bbca <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	78db      	ldrb	r3, [r3, #3]
 800bb54:	f003 0303 	and.w	r3, r3, #3
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d005      	beq.n	800bb68 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	78db      	ldrb	r3, [r3, #3]
 800bb60:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d106      	bne.n	800bb76 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	889b      	ldrh	r3, [r3, #4]
 800bb6c:	2b40      	cmp	r3, #64	@ 0x40
 800bb6e:	d956      	bls.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bb70:	2303      	movs	r3, #3
 800bb72:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bb74:	e053      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	78db      	ldrb	r3, [r3, #3]
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d10e      	bne.n	800bba0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	799b      	ldrb	r3, [r3, #6]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d007      	beq.n	800bb9a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bb8e:	2b10      	cmp	r3, #16
 800bb90:	d803      	bhi.n	800bb9a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bb96:	2b40      	cmp	r3, #64	@ 0x40
 800bb98:	d941      	bls.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	75fb      	strb	r3, [r7, #23]
 800bb9e:	e03e      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	78db      	ldrb	r3, [r3, #3]
 800bba4:	f003 0303 	and.w	r3, r3, #3
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d10b      	bne.n	800bbc4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	799b      	ldrb	r3, [r3, #6]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <USBH_ParseEPDesc+0x162>
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	889b      	ldrh	r3, [r3, #4]
 800bbb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbbc:	d32f      	bcc.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	75fb      	strb	r3, [r7, #23]
 800bbc2:	e02c      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	75fb      	strb	r3, [r7, #23]
 800bbc8:	e029      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d120      	bne.n	800bc16 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	78db      	ldrb	r3, [r3, #3]
 800bbd8:	f003 0303 	and.w	r3, r3, #3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	889b      	ldrh	r3, [r3, #4]
 800bbe4:	2b08      	cmp	r3, #8
 800bbe6:	d01a      	beq.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	75fb      	strb	r3, [r7, #23]
 800bbec:	e017      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	78db      	ldrb	r3, [r3, #3]
 800bbf2:	f003 0303 	and.w	r3, r3, #3
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d10a      	bne.n	800bc10 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	799b      	ldrb	r3, [r3, #6]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <USBH_ParseEPDesc+0x1ae>
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	889b      	ldrh	r3, [r3, #4]
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d909      	bls.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	75fb      	strb	r3, [r7, #23]
 800bc0e:	e006      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bc10:	2303      	movs	r3, #3
 800bc12:	75fb      	strb	r3, [r7, #23]
 800bc14:	e003      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bc16:	2303      	movs	r3, #3
 800bc18:	75fb      	strb	r3, [r7, #23]
 800bc1a:	e000      	b.n	800bc1e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc1c:	bf00      	nop
  }

  return status;
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	371c      	adds	r7, #28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	4613      	mov	r3, r2
 800bc38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d120      	bne.n	800bc86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	1e9a      	subs	r2, r3, #2
 800bc4a:	88fb      	ldrh	r3, [r7, #6]
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	bf28      	it	cs
 800bc50:	4613      	movcs	r3, r2
 800bc52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3302      	adds	r3, #2
 800bc58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	82fb      	strh	r3, [r7, #22]
 800bc5e:	e00b      	b.n	800bc78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bc60:	8afb      	ldrh	r3, [r7, #22]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bc72:	8afb      	ldrh	r3, [r7, #22]
 800bc74:	3302      	adds	r3, #2
 800bc76:	82fb      	strh	r3, [r7, #22]
 800bc78:	8afa      	ldrh	r2, [r7, #22]
 800bc7a:	8abb      	ldrh	r3, [r7, #20]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d3ef      	bcc.n	800bc60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	2200      	movs	r2, #0
 800bc84:	701a      	strb	r2, [r3, #0]
  }
}
 800bc86:	bf00      	nop
 800bc88:	371c      	adds	r7, #28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7812      	ldrb	r2, [r2, #0]
 800bca4:	4413      	add	r3, r2
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	789b      	ldrb	r3, [r3, #2]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d002      	beq.n	800bce6 <USBH_CtlReq+0x20>
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d00f      	beq.n	800bd04 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bce4:	e027      	b.n	800bd36 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	88fa      	ldrh	r2, [r7, #6]
 800bcf0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]
      break;
 800bd02:	e018      	b.n	800bd36 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f81b 	bl	800bd40 <USBH_HandleControl>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <USBH_CtlReq+0x54>
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d106      	bne.n	800bd28 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	761a      	strb	r2, [r3, #24]
      break;
 800bd26:	e005      	b.n	800bd34 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d102      	bne.n	800bd34 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2201      	movs	r2, #1
 800bd32:	709a      	strb	r2, [r3, #2]
      break;
 800bd34:	bf00      	nop
  }
  return status;
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	7e1b      	ldrb	r3, [r3, #24]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	2b0a      	cmp	r3, #10
 800bd58:	f200 8156 	bhi.w	800c008 <USBH_HandleControl+0x2c8>
 800bd5c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <USBH_HandleControl+0x24>)
 800bd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd62:	bf00      	nop
 800bd64:	0800bd91 	.word	0x0800bd91
 800bd68:	0800bdab 	.word	0x0800bdab
 800bd6c:	0800be15 	.word	0x0800be15
 800bd70:	0800be3b 	.word	0x0800be3b
 800bd74:	0800be73 	.word	0x0800be73
 800bd78:	0800be9d 	.word	0x0800be9d
 800bd7c:	0800beef 	.word	0x0800beef
 800bd80:	0800bf11 	.word	0x0800bf11
 800bd84:	0800bf4d 	.word	0x0800bf4d
 800bd88:	0800bf73 	.word	0x0800bf73
 800bd8c:	0800bfb1 	.word	0x0800bfb1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f103 0110 	add.w	r1, r3, #16
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	795b      	ldrb	r3, [r3, #5]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f943 	bl	800c028 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2202      	movs	r2, #2
 800bda6:	761a      	strb	r2, [r3, #24]
      break;
 800bda8:	e139      	b.n	800c01e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	795b      	ldrb	r3, [r3, #5]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f002 f87b 	bl	800deac <USBH_LL_GetURBState>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bdba:	7bbb      	ldrb	r3, [r7, #14]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d11e      	bne.n	800bdfe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7c1b      	ldrb	r3, [r3, #16]
 800bdc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bdc8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8adb      	ldrh	r3, [r3, #22]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bdd2:	7b7b      	ldrb	r3, [r7, #13]
 800bdd4:	2b80      	cmp	r3, #128	@ 0x80
 800bdd6:	d103      	bne.n	800bde0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2203      	movs	r2, #3
 800bddc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdde:	e115      	b.n	800c00c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2205      	movs	r2, #5
 800bde4:	761a      	strb	r2, [r3, #24]
      break;
 800bde6:	e111      	b.n	800c00c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bde8:	7b7b      	ldrb	r3, [r7, #13]
 800bdea:	2b80      	cmp	r3, #128	@ 0x80
 800bdec:	d103      	bne.n	800bdf6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2209      	movs	r2, #9
 800bdf2:	761a      	strb	r2, [r3, #24]
      break;
 800bdf4:	e10a      	b.n	800c00c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2207      	movs	r2, #7
 800bdfa:	761a      	strb	r2, [r3, #24]
      break;
 800bdfc:	e106      	b.n	800c00c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	2b04      	cmp	r3, #4
 800be02:	d003      	beq.n	800be0c <USBH_HandleControl+0xcc>
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b02      	cmp	r3, #2
 800be08:	f040 8100 	bne.w	800c00c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	220b      	movs	r2, #11
 800be10:	761a      	strb	r2, [r3, #24]
      break;
 800be12:	e0fb      	b.n	800c00c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6899      	ldr	r1, [r3, #8]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	899a      	ldrh	r2, [r3, #12]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	791b      	ldrb	r3, [r3, #4]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f93a 	bl	800c0a6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2204      	movs	r2, #4
 800be36:	761a      	strb	r2, [r3, #24]
      break;
 800be38:	e0f1      	b.n	800c01e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	791b      	ldrb	r3, [r3, #4]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f002 f833 	bl	800deac <USBH_LL_GetURBState>
 800be46:	4603      	mov	r3, r0
 800be48:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800be4a:	7bbb      	ldrb	r3, [r7, #14]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d102      	bne.n	800be56 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2209      	movs	r2, #9
 800be54:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	2b05      	cmp	r3, #5
 800be5a:	d102      	bne.n	800be62 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800be5c:	2303      	movs	r3, #3
 800be5e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be60:	e0d6      	b.n	800c010 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800be62:	7bbb      	ldrb	r3, [r7, #14]
 800be64:	2b04      	cmp	r3, #4
 800be66:	f040 80d3 	bne.w	800c010 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	220b      	movs	r2, #11
 800be6e:	761a      	strb	r2, [r3, #24]
      break;
 800be70:	e0ce      	b.n	800c010 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6899      	ldr	r1, [r3, #8]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	899a      	ldrh	r2, [r3, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	795b      	ldrb	r3, [r3, #5]
 800be7e:	2001      	movs	r0, #1
 800be80:	9000      	str	r0, [sp, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f8ea 	bl	800c05c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800be8e:	b29a      	uxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2206      	movs	r2, #6
 800be98:	761a      	strb	r2, [r3, #24]
      break;
 800be9a:	e0c0      	b.n	800c01e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	795b      	ldrb	r3, [r3, #5]
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f002 f802 	bl	800deac <USBH_LL_GetURBState>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800beac:	7bbb      	ldrb	r3, [r7, #14]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d103      	bne.n	800beba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2207      	movs	r2, #7
 800beb6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800beb8:	e0ac      	b.n	800c014 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b05      	cmp	r3, #5
 800bebe:	d105      	bne.n	800becc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	220c      	movs	r2, #12
 800bec4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bec6:	2303      	movs	r3, #3
 800bec8:	73fb      	strb	r3, [r7, #15]
      break;
 800beca:	e0a3      	b.n	800c014 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d103      	bne.n	800beda <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2205      	movs	r2, #5
 800bed6:	761a      	strb	r2, [r3, #24]
      break;
 800bed8:	e09c      	b.n	800c014 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800beda:	7bbb      	ldrb	r3, [r7, #14]
 800bedc:	2b04      	cmp	r3, #4
 800bede:	f040 8099 	bne.w	800c014 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	220b      	movs	r2, #11
 800bee6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bee8:	2302      	movs	r3, #2
 800beea:	73fb      	strb	r3, [r7, #15]
      break;
 800beec:	e092      	b.n	800c014 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	791b      	ldrb	r3, [r3, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	2100      	movs	r1, #0
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f8d5 	bl	800c0a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2208      	movs	r2, #8
 800bf0c:	761a      	strb	r2, [r3, #24]

      break;
 800bf0e:	e086      	b.n	800c01e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	791b      	ldrb	r3, [r3, #4]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 ffc8 	bl	800deac <USBH_LL_GetURBState>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d105      	bne.n	800bf32 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	220d      	movs	r2, #13
 800bf2a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf30:	e072      	b.n	800c018 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d103      	bne.n	800bf40 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	220b      	movs	r2, #11
 800bf3c:	761a      	strb	r2, [r3, #24]
      break;
 800bf3e:	e06b      	b.n	800c018 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
 800bf42:	2b05      	cmp	r3, #5
 800bf44:	d168      	bne.n	800c018 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bf46:	2303      	movs	r3, #3
 800bf48:	73fb      	strb	r3, [r7, #15]
      break;
 800bf4a:	e065      	b.n	800c018 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	795b      	ldrb	r3, [r3, #5]
 800bf50:	2201      	movs	r2, #1
 800bf52:	9200      	str	r2, [sp, #0]
 800bf54:	2200      	movs	r2, #0
 800bf56:	2100      	movs	r1, #0
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f87f 	bl	800c05c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	220a      	movs	r2, #10
 800bf6e:	761a      	strb	r2, [r3, #24]
      break;
 800bf70:	e055      	b.n	800c01e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	795b      	ldrb	r3, [r3, #5]
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f001 ff97 	bl	800deac <USBH_LL_GetURBState>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d105      	bne.n	800bf94 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	220d      	movs	r2, #13
 800bf90:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf92:	e043      	b.n	800c01c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d103      	bne.n	800bfa2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2209      	movs	r2, #9
 800bf9e:	761a      	strb	r2, [r3, #24]
      break;
 800bfa0:	e03c      	b.n	800c01c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bfa2:	7bbb      	ldrb	r3, [r7, #14]
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d139      	bne.n	800c01c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	220b      	movs	r2, #11
 800bfac:	761a      	strb	r2, [r3, #24]
      break;
 800bfae:	e035      	b.n	800c01c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	7e5b      	ldrb	r3, [r3, #25]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	765a      	strb	r2, [r3, #25]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	7e5b      	ldrb	r3, [r3, #25]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d806      	bhi.n	800bfd2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bfd0:	e025      	b.n	800c01e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bfd8:	2106      	movs	r1, #6
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	795b      	ldrb	r3, [r3, #5]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 fcad 	bl	800d94a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	791b      	ldrb	r3, [r3, #4]
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f001 fca7 	bl	800d94a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c002:	2302      	movs	r3, #2
 800c004:	73fb      	strb	r3, [r7, #15]
      break;
 800c006:	e00a      	b.n	800c01e <USBH_HandleControl+0x2de>

    default:
      break;
 800c008:	bf00      	nop
 800c00a:	e008      	b.n	800c01e <USBH_HandleControl+0x2de>
      break;
 800c00c:	bf00      	nop
 800c00e:	e006      	b.n	800c01e <USBH_HandleControl+0x2de>
      break;
 800c010:	bf00      	nop
 800c012:	e004      	b.n	800c01e <USBH_HandleControl+0x2de>
      break;
 800c014:	bf00      	nop
 800c016:	e002      	b.n	800c01e <USBH_HandleControl+0x2de>
      break;
 800c018:	bf00      	nop
 800c01a:	e000      	b.n	800c01e <USBH_HandleControl+0x2de>
      break;
 800c01c:	bf00      	nop
  }

  return status;
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af04      	add	r7, sp, #16
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	4613      	mov	r3, r2
 800c034:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c036:	79f9      	ldrb	r1, [r7, #7]
 800c038:	2300      	movs	r3, #0
 800c03a:	9303      	str	r3, [sp, #12]
 800c03c:	2308      	movs	r3, #8
 800c03e:	9302      	str	r3, [sp, #8]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	2300      	movs	r3, #0
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	2300      	movs	r3, #0
 800c04a:	2200      	movs	r2, #0
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f001 fefc 	bl	800de4a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af04      	add	r7, sp, #16
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	4611      	mov	r1, r2
 800c068:	461a      	mov	r2, r3
 800c06a:	460b      	mov	r3, r1
 800c06c:	80fb      	strh	r3, [r7, #6]
 800c06e:	4613      	mov	r3, r2
 800c070:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c080:	7979      	ldrb	r1, [r7, #5]
 800c082:	7e3b      	ldrb	r3, [r7, #24]
 800c084:	9303      	str	r3, [sp, #12]
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	9302      	str	r3, [sp, #8]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	2301      	movs	r3, #1
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	2300      	movs	r3, #0
 800c094:	2200      	movs	r2, #0
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f001 fed7 	bl	800de4a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b088      	sub	sp, #32
 800c0aa:	af04      	add	r7, sp, #16
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	80fb      	strh	r3, [r7, #6]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0bc:	7979      	ldrb	r1, [r7, #5]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9303      	str	r3, [sp, #12]
 800c0c2:	88fb      	ldrh	r3, [r7, #6]
 800c0c4:	9302      	str	r3, [sp, #8]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f001 feb9 	bl	800de4a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c0d8:	2300      	movs	r3, #0

}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b088      	sub	sp, #32
 800c0e6:	af04      	add	r7, sp, #16
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	60b9      	str	r1, [r7, #8]
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	80fb      	strh	r3, [r7, #6]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c102:	2300      	movs	r3, #0
 800c104:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c106:	7979      	ldrb	r1, [r7, #5]
 800c108:	7e3b      	ldrb	r3, [r7, #24]
 800c10a:	9303      	str	r3, [sp, #12]
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	2301      	movs	r3, #1
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	2302      	movs	r3, #2
 800c11a:	2200      	movs	r2, #0
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f001 fe94 	bl	800de4a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af04      	add	r7, sp, #16
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4611      	mov	r1, r2
 800c138:	461a      	mov	r2, r3
 800c13a:	460b      	mov	r3, r1
 800c13c:	80fb      	strh	r3, [r7, #6]
 800c13e:	4613      	mov	r3, r2
 800c140:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c142:	7979      	ldrb	r1, [r7, #5]
 800c144:	2300      	movs	r3, #0
 800c146:	9303      	str	r3, [sp, #12]
 800c148:	88fb      	ldrh	r3, [r7, #6]
 800c14a:	9302      	str	r3, [sp, #8]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	2301      	movs	r3, #1
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	2302      	movs	r3, #2
 800c156:	2201      	movs	r2, #1
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f001 fe76 	bl	800de4a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b089      	sub	sp, #36	@ 0x24
 800c16c:	af04      	add	r7, sp, #16
 800c16e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c176:	7919      	ldrb	r1, [r3, #4]
 800c178:	2350      	movs	r3, #80	@ 0x50
 800c17a:	2206      	movs	r2, #6
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7fe fc95 	bl	800aaac <USBH_FindInterface>
 800c182:	4603      	mov	r3, r0
 800c184:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	2bff      	cmp	r3, #255	@ 0xff
 800c18a:	d002      	beq.n	800c192 <USBH_MSC_InterfaceInit+0x2a>
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d901      	bls.n	800c196 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c192:	2302      	movs	r3, #2
 800c194:	e106      	b.n	800c3a4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fe fc6a 	bl	800aa74 <USBH_SelectInterface>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e0fa      	b.n	800c3a4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c1b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c1b8:	f001 ff5c 	bl	800e074 <malloc>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e0e7      	b.n	800c3a4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800c1d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1d8:	2100      	movs	r1, #0
 800c1da:	68b8      	ldr	r0, [r7, #8]
 800c1dc:	f002 f828 	bl	800e230 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	211a      	movs	r1, #26
 800c1e6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	b25b      	sxtb	r3, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da16      	bge.n	800c226 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	211a      	movs	r1, #26
 800c1fe:	fb01 f303 	mul.w	r3, r1, r3
 800c202:	4413      	add	r3, r2
 800c204:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	211a      	movs	r1, #26
 800c214:	fb01 f303 	mul.w	r3, r1, r3
 800c218:	4413      	add	r3, r2
 800c21a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c21e:	881a      	ldrh	r2, [r3, #0]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	815a      	strh	r2, [r3, #10]
 800c224:	e015      	b.n	800c252 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c226:	7bfb      	ldrb	r3, [r7, #15]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	211a      	movs	r1, #26
 800c22c:	fb01 f303 	mul.w	r3, r1, r3
 800c230:	4413      	add	r3, r2
 800c232:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	211a      	movs	r1, #26
 800c242:	fb01 f303 	mul.w	r3, r1, r3
 800c246:	4413      	add	r3, r2
 800c248:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c24c:	881a      	ldrh	r2, [r3, #0]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	211a      	movs	r1, #26
 800c258:	fb01 f303 	mul.w	r3, r1, r3
 800c25c:	4413      	add	r3, r2
 800c25e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	b25b      	sxtb	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	da16      	bge.n	800c298 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	211a      	movs	r1, #26
 800c270:	fb01 f303 	mul.w	r3, r1, r3
 800c274:	4413      	add	r3, r2
 800c276:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	211a      	movs	r1, #26
 800c286:	fb01 f303 	mul.w	r3, r1, r3
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c290:	881a      	ldrh	r2, [r3, #0]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	815a      	strh	r2, [r3, #10]
 800c296:	e015      	b.n	800c2c4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	211a      	movs	r1, #26
 800c29e:	fb01 f303 	mul.w	r3, r1, r3
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c2a8:	781a      	ldrb	r2, [r3, #0]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	211a      	movs	r1, #26
 800c2b4:	fb01 f303 	mul.w	r3, r1, r3
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c2be:	881a      	ldrh	r2, [r3, #0]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	799b      	ldrb	r3, [r3, #6]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f001 fb13 	bl	800d908 <USBH_AllocPipe>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	79db      	ldrb	r3, [r3, #7]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 fb09 	bl	800d908 <USBH_AllocPipe>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fdc2 	bl	800ce88 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	799b      	ldrb	r3, [r3, #6]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d01e      	beq.n	800c34a <USBH_MSC_InterfaceInit+0x1e2>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	891b      	ldrh	r3, [r3, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d01a      	beq.n	800c34a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	7959      	ldrb	r1, [r3, #5]
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	7998      	ldrb	r0, [r3, #6]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	8912      	ldrh	r2, [r2, #8]
 800c32c:	9202      	str	r2, [sp, #8]
 800c32e:	2202      	movs	r2, #2
 800c330:	9201      	str	r2, [sp, #4]
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	4623      	mov	r3, r4
 800c336:	4602      	mov	r2, r0
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f001 fab6 	bl	800d8aa <USBH_OpenPipe>
 800c33e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	79db      	ldrb	r3, [r3, #7]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d02c      	beq.n	800c3a2 <USBH_MSC_InterfaceInit+0x23a>
 800c348:	e001      	b.n	800c34e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e02a      	b.n	800c3a4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	895b      	ldrh	r3, [r3, #10]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d025      	beq.n	800c3a2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	7919      	ldrb	r1, [r3, #4]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	79d8      	ldrb	r0, [r3, #7]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	8952      	ldrh	r2, [r2, #10]
 800c36e:	9202      	str	r2, [sp, #8]
 800c370:	2202      	movs	r2, #2
 800c372:	9201      	str	r2, [sp, #4]
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	4623      	mov	r3, r4
 800c378:	4602      	mov	r2, r0
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f001 fa95 	bl	800d8aa <USBH_OpenPipe>
 800c380:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	791b      	ldrb	r3, [r3, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 fdb8 	bl	800df00 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	795b      	ldrb	r3, [r3, #5]
 800c394:	2200      	movs	r2, #0
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f001 fdb1 	bl	800df00 <USBH_LL_SetToggle>

  return USBH_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e000      	b.n	800c3a4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800c3a2:	2303      	movs	r3, #3
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd90      	pop	{r4, r7, pc}

0800c3ac <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3ba:	69db      	ldr	r3, [r3, #28]
 800c3bc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	795b      	ldrb	r3, [r3, #5]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00e      	beq.n	800c3e4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	795b      	ldrb	r3, [r3, #5]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 fa8b 	bl	800d8e8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	795b      	ldrb	r3, [r3, #5]
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f001 fab6 	bl	800d94a <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	791b      	ldrb	r3, [r3, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	791b      	ldrb	r3, [r3, #4]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 fa78 	bl	800d8e8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	791b      	ldrb	r3, [r3, #4]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f001 faa3 	bl	800d94a <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c410:	69db      	ldr	r3, [r3, #28]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	4618      	mov	r0, r3
 800c420:	f001 fe30 	bl	800e084 <free>
    phost->pActiveClass->pData = 0U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c42a:	2200      	movs	r2, #0
 800c42c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c44a:	2301      	movs	r3, #1
 800c44c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	7b9b      	ldrb	r3, [r3, #14]
 800c452:	2b03      	cmp	r3, #3
 800c454:	d041      	beq.n	800c4da <USBH_MSC_ClassRequest+0xa2>
 800c456:	2b03      	cmp	r3, #3
 800c458:	dc4b      	bgt.n	800c4f2 <USBH_MSC_ClassRequest+0xba>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <USBH_MSC_ClassRequest+0x2a>
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d147      	bne.n	800c4f2 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fcef 	bl	800ce4a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	2b03      	cmp	r3, #3
 800c474:	d104      	bne.n	800c480 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2200      	movs	r2, #0
 800c47a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d137      	bne.n	800c4f6 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d804      	bhi.n	800c498 <USBH_MSC_ClassRequest+0x60>
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	3301      	adds	r3, #1
 800c494:	b2da      	uxtb	r2, r3
 800c496:	e000      	b.n	800c49a <USBH_MSC_ClassRequest+0x62>
 800c498:	2202      	movs	r2, #2
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73bb      	strb	r3, [r7, #14]
 800c4a2:	e014      	b.n	800c4ce <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	2134      	movs	r1, #52	@ 0x34
 800c4aa:	fb01 f303 	mul.w	r3, r1, r3
 800c4ae:	4413      	add	r3, r2
 800c4b0:	3392      	adds	r3, #146	@ 0x92
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800c4b6:	7bbb      	ldrb	r3, [r7, #14]
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	2134      	movs	r1, #52	@ 0x34
 800c4bc:	fb01 f303 	mul.w	r3, r1, r3
 800c4c0:	4413      	add	r3, r2
 800c4c2:	33c1      	adds	r3, #193	@ 0xc1
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	73bb      	strb	r3, [r7, #14]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	7bba      	ldrb	r2, [r7, #14]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d3e5      	bcc.n	800c4a4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800c4d8:	e00d      	b.n	800c4f6 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c4da:	2100      	movs	r1, #0
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff f8bd 	bl	800b65c <USBH_ClrFeature>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d108      	bne.n	800c4fa <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	7bda      	ldrb	r2, [r3, #15]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	739a      	strb	r2, [r3, #14]
      }
      break;
 800c4f0:	e003      	b.n	800c4fa <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800c4f2:	bf00      	nop
 800c4f4:	e002      	b.n	800c4fc <USBH_MSC_ClassRequest+0xc4>
      break;
 800c4f6:	bf00      	nop
 800c4f8:	e000      	b.n	800c4fc <USBH_MSC_ClassRequest+0xc4>
      break;
 800c4fa:	bf00      	nop
  }

  return status;
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c51a:	2301      	movs	r3, #1
 800c51c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c51e:	2301      	movs	r3, #1
 800c520:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800c522:	2301      	movs	r3, #1
 800c524:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	7b1b      	ldrb	r3, [r3, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <USBH_MSC_Process+0x2e>
 800c52e:	2b01      	cmp	r3, #1
 800c530:	f000 826f 	beq.w	800ca12 <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800c534:	e270      	b.n	800ca18 <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	7812      	ldrb	r2, [r2, #0]
 800c540:	4293      	cmp	r3, r2
 800c542:	f080 824e 	bcs.w	800c9e2 <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c54c:	4619      	mov	r1, r3
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	2334      	movs	r3, #52	@ 0x34
 800c552:	fb01 f303 	mul.w	r3, r1, r3
 800c556:	4413      	add	r3, r2
 800c558:	3391      	adds	r3, #145	@ 0x91
 800c55a:	2201      	movs	r2, #1
 800c55c:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c564:	4619      	mov	r1, r3
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	2334      	movs	r3, #52	@ 0x34
 800c56a:	fb01 f303 	mul.w	r3, r1, r3
 800c56e:	4413      	add	r3, r2
 800c570:	3390      	adds	r3, #144	@ 0x90
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b08      	cmp	r3, #8
 800c576:	f200 8242 	bhi.w	800c9fe <USBH_MSC_Process+0x4f6>
 800c57a:	a201      	add	r2, pc, #4	@ (adr r2, 800c580 <USBH_MSC_Process+0x78>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c5a5 	.word	0x0800c5a5
 800c584:	0800c9ff 	.word	0x0800c9ff
 800c588:	0800c66d 	.word	0x0800c66d
 800c58c:	0800c7f1 	.word	0x0800c7f1
 800c590:	0800c5cb 	.word	0x0800c5cb
 800c594:	0800c8bd 	.word	0x0800c8bd
 800c598:	0800c9ff 	.word	0x0800c9ff
 800c59c:	0800c9ff 	.word	0x0800c9ff
 800c5a0:	0800c9d1 	.word	0x0800c9d1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	693a      	ldr	r2, [r7, #16]
 800c5ae:	2334      	movs	r3, #52	@ 0x34
 800c5b0:	fb01 f303 	mul.w	r3, r1, r3
 800c5b4:	4413      	add	r3, r2
 800c5b6:	3390      	adds	r3, #144	@ 0x90
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800c5c8:	e222      	b.n	800ca10 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c5d0:	b2d9      	uxtb	r1, r3
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c5d8:	461a      	mov	r2, r3
 800c5da:	2334      	movs	r3, #52	@ 0x34
 800c5dc:	fb02 f303 	mul.w	r3, r2, r3
 800c5e0:	3398      	adds	r3, #152	@ 0x98
 800c5e2:	693a      	ldr	r2, [r7, #16]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	3307      	adds	r3, #7
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 ff69 	bl	800d4c2 <USBH_MSC_SCSI_Inquiry>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10b      	bne.n	800c612 <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c600:	4619      	mov	r1, r3
 800c602:	693a      	ldr	r2, [r7, #16]
 800c604:	2334      	movs	r3, #52	@ 0x34
 800c606:	fb01 f303 	mul.w	r3, r1, r3
 800c60a:	4413      	add	r3, r2
 800c60c:	3390      	adds	r3, #144	@ 0x90
 800c60e:	2202      	movs	r2, #2
 800c610:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d10c      	bne.n	800c632 <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c61e:	4619      	mov	r1, r3
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	2334      	movs	r3, #52	@ 0x34
 800c624:	fb01 f303 	mul.w	r3, r1, r3
 800c628:	4413      	add	r3, r2
 800c62a:	3390      	adds	r3, #144	@ 0x90
 800c62c:	2205      	movs	r2, #5
 800c62e:	701a      	strb	r2, [r3, #0]
            break;
 800c630:	e1e7      	b.n	800ca02 <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c632:	7bfb      	ldrb	r3, [r7, #15]
 800c634:	2b04      	cmp	r3, #4
 800c636:	f040 81e4 	bne.w	800ca02 <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c640:	4619      	mov	r1, r3
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	2334      	movs	r3, #52	@ 0x34
 800c646:	fb01 f303 	mul.w	r3, r1, r3
 800c64a:	4413      	add	r3, r2
 800c64c:	3390      	adds	r3, #144	@ 0x90
 800c64e:	2201      	movs	r2, #1
 800c650:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c658:	4619      	mov	r1, r3
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	2334      	movs	r3, #52	@ 0x34
 800c65e:	fb01 f303 	mul.w	r3, r1, r3
 800c662:	4413      	add	r3, r2
 800c664:	3391      	adds	r3, #145	@ 0x91
 800c666:	2202      	movs	r2, #2
 800c668:	701a      	strb	r2, [r3, #0]
            break;
 800c66a:	e1ca      	b.n	800ca02 <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c672:	b2db      	uxtb	r3, r3
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fe66 	bl	800d348 <USBH_MSC_SCSI_TestUnitReady>
 800c67c:	4603      	mov	r3, r0
 800c67e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d149      	bne.n	800c71a <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c68c:	4619      	mov	r1, r3
 800c68e:	693a      	ldr	r2, [r7, #16]
 800c690:	2334      	movs	r3, #52	@ 0x34
 800c692:	fb01 f303 	mul.w	r3, r1, r3
 800c696:	4413      	add	r3, r2
 800c698:	3392      	adds	r3, #146	@ 0x92
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00c      	beq.n	800c6ba <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	2334      	movs	r3, #52	@ 0x34
 800c6ac:	fb01 f303 	mul.w	r3, r1, r3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	33c1      	adds	r3, #193	@ 0xc1
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	e00b      	b.n	800c6d2 <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	693a      	ldr	r2, [r7, #16]
 800c6c4:	2334      	movs	r3, #52	@ 0x34
 800c6c6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	33c1      	adds	r3, #193	@ 0xc1
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6d8:	4619      	mov	r1, r3
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	2334      	movs	r3, #52	@ 0x34
 800c6de:	fb01 f303 	mul.w	r3, r1, r3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	3390      	adds	r3, #144	@ 0x90
 800c6e6:	2203      	movs	r2, #3
 800c6e8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	2334      	movs	r3, #52	@ 0x34
 800c6f6:	fb01 f303 	mul.w	r3, r1, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	3391      	adds	r3, #145	@ 0x91
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c708:	4619      	mov	r1, r3
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	2334      	movs	r3, #52	@ 0x34
 800c70e:	fb01 f303 	mul.w	r3, r1, r3
 800c712:	4413      	add	r3, r2
 800c714:	3392      	adds	r3, #146	@ 0x92
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800c71a:	7bbb      	ldrb	r3, [r7, #14]
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d14a      	bne.n	800c7b6 <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c726:	4619      	mov	r1, r3
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	2334      	movs	r3, #52	@ 0x34
 800c72c:	fb01 f303 	mul.w	r3, r1, r3
 800c730:	4413      	add	r3, r2
 800c732:	3392      	adds	r3, #146	@ 0x92
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b02      	cmp	r3, #2
 800c738:	d00c      	beq.n	800c754 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c740:	4619      	mov	r1, r3
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	2334      	movs	r3, #52	@ 0x34
 800c746:	fb01 f303 	mul.w	r3, r1, r3
 800c74a:	4413      	add	r3, r2
 800c74c:	33c1      	adds	r3, #193	@ 0xc1
 800c74e:	2201      	movs	r2, #1
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	e00b      	b.n	800c76c <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c75a:	4619      	mov	r1, r3
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	2334      	movs	r3, #52	@ 0x34
 800c760:	fb01 f303 	mul.w	r3, r1, r3
 800c764:	4413      	add	r3, r2
 800c766:	33c1      	adds	r3, #193	@ 0xc1
 800c768:	2200      	movs	r2, #0
 800c76a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c772:	4619      	mov	r1, r3
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	2334      	movs	r3, #52	@ 0x34
 800c778:	fb01 f303 	mul.w	r3, r1, r3
 800c77c:	4413      	add	r3, r2
 800c77e:	3390      	adds	r3, #144	@ 0x90
 800c780:	2205      	movs	r2, #5
 800c782:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c78a:	4619      	mov	r1, r3
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	2334      	movs	r3, #52	@ 0x34
 800c790:	fb01 f303 	mul.w	r3, r1, r3
 800c794:	4413      	add	r3, r2
 800c796:	3391      	adds	r3, #145	@ 0x91
 800c798:	2201      	movs	r2, #1
 800c79a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	2334      	movs	r3, #52	@ 0x34
 800c7a8:	fb01 f303 	mul.w	r3, r1, r3
 800c7ac:	4413      	add	r3, r2
 800c7ae:	3392      	adds	r3, #146	@ 0x92
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	701a      	strb	r2, [r3, #0]
            break;
 800c7b4:	e127      	b.n	800ca06 <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	2b04      	cmp	r3, #4
 800c7ba:	f040 8124 	bne.w	800ca06 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	2334      	movs	r3, #52	@ 0x34
 800c7ca:	fb01 f303 	mul.w	r3, r1, r3
 800c7ce:	4413      	add	r3, r2
 800c7d0:	3390      	adds	r3, #144	@ 0x90
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7dc:	4619      	mov	r1, r3
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	2334      	movs	r3, #52	@ 0x34
 800c7e2:	fb01 f303 	mul.w	r3, r1, r3
 800c7e6:	4413      	add	r3, r2
 800c7e8:	3391      	adds	r3, #145	@ 0x91
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	701a      	strb	r2, [r3, #0]
            break;
 800c7ee:	e10a      	b.n	800ca06 <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7f6:	b2d9      	uxtb	r1, r3
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7fe:	461a      	mov	r2, r3
 800c800:	2334      	movs	r3, #52	@ 0x34
 800c802:	fb02 f303 	mul.w	r3, r2, r3
 800c806:	3390      	adds	r3, #144	@ 0x90
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	4413      	add	r3, r2
 800c80c:	3304      	adds	r3, #4
 800c80e:	461a      	mov	r2, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fddc 	bl	800d3ce <USBH_MSC_SCSI_ReadCapacity>
 800c816:	4603      	mov	r3, r0
 800c818:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d120      	bne.n	800c862 <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c826:	4619      	mov	r1, r3
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	2334      	movs	r3, #52	@ 0x34
 800c82c:	fb01 f303 	mul.w	r3, r1, r3
 800c830:	4413      	add	r3, r2
 800c832:	3390      	adds	r3, #144	@ 0x90
 800c834:	2201      	movs	r2, #1
 800c836:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c83e:	4619      	mov	r1, r3
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	2334      	movs	r3, #52	@ 0x34
 800c844:	fb01 f303 	mul.w	r3, r1, r3
 800c848:	4413      	add	r3, r2
 800c84a:	3391      	adds	r3, #145	@ 0x91
 800c84c:	2200      	movs	r2, #0
 800c84e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c856:	3301      	adds	r3, #1
 800c858:	b29a      	uxth	r2, r3
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800c860:	e0d3      	b.n	800ca0a <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	2b02      	cmp	r3, #2
 800c866:	d10c      	bne.n	800c882 <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c86e:	4619      	mov	r1, r3
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	2334      	movs	r3, #52	@ 0x34
 800c874:	fb01 f303 	mul.w	r3, r1, r3
 800c878:	4413      	add	r3, r2
 800c87a:	3390      	adds	r3, #144	@ 0x90
 800c87c:	2205      	movs	r2, #5
 800c87e:	701a      	strb	r2, [r3, #0]
            break;
 800c880:	e0c3      	b.n	800ca0a <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	2b04      	cmp	r3, #4
 800c886:	f040 80c0 	bne.w	800ca0a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c890:	4619      	mov	r1, r3
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	2334      	movs	r3, #52	@ 0x34
 800c896:	fb01 f303 	mul.w	r3, r1, r3
 800c89a:	4413      	add	r3, r2
 800c89c:	3390      	adds	r3, #144	@ 0x90
 800c89e:	2201      	movs	r2, #1
 800c8a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	2334      	movs	r3, #52	@ 0x34
 800c8ae:	fb01 f303 	mul.w	r3, r1, r3
 800c8b2:	4413      	add	r3, r2
 800c8b4:	3391      	adds	r3, #145	@ 0x91
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	701a      	strb	r2, [r3, #0]
            break;
 800c8ba:	e0a6      	b.n	800ca0a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8c2:	b2d9      	uxtb	r1, r3
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	2334      	movs	r3, #52	@ 0x34
 800c8ce:	fb02 f303 	mul.w	r3, r2, r3
 800c8d2:	3398      	adds	r3, #152	@ 0x98
 800c8d4:	693a      	ldr	r2, [r7, #16]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	3304      	adds	r3, #4
 800c8da:	461a      	mov	r2, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fe95 	bl	800d60c <USBH_MSC_SCSI_RequestSense>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c8e6:	7bfb      	ldrb	r3, [r7, #15]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d145      	bne.n	800c978 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	2334      	movs	r3, #52	@ 0x34
 800c8f8:	fb01 f303 	mul.w	r3, r1, r3
 800c8fc:	4413      	add	r3, r2
 800c8fe:	339c      	adds	r3, #156	@ 0x9c
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b06      	cmp	r3, #6
 800c904:	d00c      	beq.n	800c920 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c90c:	4619      	mov	r1, r3
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	2334      	movs	r3, #52	@ 0x34
 800c912:	fb01 f303 	mul.w	r3, r1, r3
 800c916:	4413      	add	r3, r2
 800c918:	339c      	adds	r3, #156	@ 0x9c
 800c91a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d117      	bne.n	800c950 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	f242 720f 	movw	r2, #9999	@ 0x270f
 800c932:	4293      	cmp	r3, r2
 800c934:	d80c      	bhi.n	800c950 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c93c:	4619      	mov	r1, r3
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	2334      	movs	r3, #52	@ 0x34
 800c942:	fb01 f303 	mul.w	r3, r1, r3
 800c946:	4413      	add	r3, r2
 800c948:	3390      	adds	r3, #144	@ 0x90
 800c94a:	2202      	movs	r2, #2
 800c94c:	701a      	strb	r2, [r3, #0]
                  break;
 800c94e:	e05f      	b.n	800ca10 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c956:	4619      	mov	r1, r3
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	2334      	movs	r3, #52	@ 0x34
 800c95c:	fb01 f303 	mul.w	r3, r1, r3
 800c960:	4413      	add	r3, r2
 800c962:	3390      	adds	r3, #144	@ 0x90
 800c964:	2201      	movs	r2, #1
 800c966:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c96e:	3301      	adds	r3, #1
 800c970:	b29a      	uxth	r2, r3
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d10c      	bne.n	800c998 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c984:	4619      	mov	r1, r3
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	2334      	movs	r3, #52	@ 0x34
 800c98a:	fb01 f303 	mul.w	r3, r1, r3
 800c98e:	4413      	add	r3, r2
 800c990:	3390      	adds	r3, #144	@ 0x90
 800c992:	2208      	movs	r2, #8
 800c994:	701a      	strb	r2, [r3, #0]
            break;
 800c996:	e03a      	b.n	800ca0e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b04      	cmp	r3, #4
 800c99c:	d137      	bne.n	800ca0e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	2334      	movs	r3, #52	@ 0x34
 800c9aa:	fb01 f303 	mul.w	r3, r1, r3
 800c9ae:	4413      	add	r3, r2
 800c9b0:	3390      	adds	r3, #144	@ 0x90
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c9bc:	4619      	mov	r1, r3
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	2334      	movs	r3, #52	@ 0x34
 800c9c2:	fb01 f303 	mul.w	r3, r1, r3
 800c9c6:	4413      	add	r3, r2
 800c9c8:	3391      	adds	r3, #145	@ 0x91
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	701a      	strb	r2, [r3, #0]
            break;
 800c9ce:	e01e      	b.n	800ca0e <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800c9e0:	e016      	b.n	800ca10 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c9f6:	2102      	movs	r1, #2
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	4798      	blx	r3
      break;
 800c9fc:	e00c      	b.n	800ca18 <USBH_MSC_Process+0x510>
            break;
 800c9fe:	bf00      	nop
 800ca00:	e00a      	b.n	800ca18 <USBH_MSC_Process+0x510>
            break;
 800ca02:	bf00      	nop
 800ca04:	e008      	b.n	800ca18 <USBH_MSC_Process+0x510>
            break;
 800ca06:	bf00      	nop
 800ca08:	e006      	b.n	800ca18 <USBH_MSC_Process+0x510>
            break;
 800ca0a:	bf00      	nop
 800ca0c:	e004      	b.n	800ca18 <USBH_MSC_Process+0x510>
            break;
 800ca0e:	bf00      	nop
      break;
 800ca10:	e002      	b.n	800ca18 <USBH_MSC_Process+0x510>
      error = USBH_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	75fb      	strb	r3, [r7, #23]
      break;
 800ca16:	bf00      	nop
  }
  return error;
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop

0800ca24 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b088      	sub	sp, #32
 800ca3e:	af02      	add	r7, sp, #8
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	460b      	mov	r3, r1
 800ca44:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca4c:	69db      	ldr	r3, [r3, #28]
 800ca4e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ca50:	2301      	movs	r3, #1
 800ca52:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ca54:	2301      	movs	r3, #1
 800ca56:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ca58:	78fb      	ldrb	r3, [r7, #3]
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	2134      	movs	r1, #52	@ 0x34
 800ca5e:	fb01 f303 	mul.w	r3, r1, r3
 800ca62:	4413      	add	r3, r2
 800ca64:	3390      	adds	r3, #144	@ 0x90
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b07      	cmp	r3, #7
 800ca6a:	d03c      	beq.n	800cae6 <USBH_MSC_RdWrProcess+0xac>
 800ca6c:	2b07      	cmp	r3, #7
 800ca6e:	f300 80a7 	bgt.w	800cbc0 <USBH_MSC_RdWrProcess+0x186>
 800ca72:	2b05      	cmp	r3, #5
 800ca74:	d06c      	beq.n	800cb50 <USBH_MSC_RdWrProcess+0x116>
 800ca76:	2b06      	cmp	r3, #6
 800ca78:	f040 80a2 	bne.w	800cbc0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ca7c:	78f9      	ldrb	r1, [r7, #3]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	2300      	movs	r3, #0
 800ca84:	2200      	movs	r2, #0
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fea4 	bl	800d7d4 <USBH_MSC_SCSI_Read>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10b      	bne.n	800caae <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	2134      	movs	r1, #52	@ 0x34
 800ca9c:	fb01 f303 	mul.w	r3, r1, r3
 800caa0:	4413      	add	r3, r2
 800caa2:	3390      	adds	r3, #144	@ 0x90
 800caa4:	2201      	movs	r2, #1
 800caa6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800caac:	e08a      	b.n	800cbc4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d109      	bne.n	800cac8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	2134      	movs	r1, #52	@ 0x34
 800caba:	fb01 f303 	mul.w	r3, r1, r3
 800cabe:	4413      	add	r3, r2
 800cac0:	3390      	adds	r3, #144	@ 0x90
 800cac2:	2205      	movs	r2, #5
 800cac4:	701a      	strb	r2, [r3, #0]
      break;
 800cac6:	e07d      	b.n	800cbc4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b04      	cmp	r3, #4
 800cacc:	d17a      	bne.n	800cbc4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cace:	78fb      	ldrb	r3, [r7, #3]
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	2134      	movs	r1, #52	@ 0x34
 800cad4:	fb01 f303 	mul.w	r3, r1, r3
 800cad8:	4413      	add	r3, r2
 800cada:	3390      	adds	r3, #144	@ 0x90
 800cadc:	2208      	movs	r2, #8
 800cade:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cae0:	2302      	movs	r3, #2
 800cae2:	75fb      	strb	r3, [r7, #23]
      break;
 800cae4:	e06e      	b.n	800cbc4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800cae6:	78f9      	ldrb	r1, [r7, #3]
 800cae8:	2300      	movs	r3, #0
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	2300      	movs	r3, #0
 800caee:	2200      	movs	r2, #0
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fe04 	bl	800d6fe <USBH_MSC_SCSI_Write>
 800caf6:	4603      	mov	r3, r0
 800caf8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10b      	bne.n	800cb18 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	2134      	movs	r1, #52	@ 0x34
 800cb06:	fb01 f303 	mul.w	r3, r1, r3
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3390      	adds	r3, #144	@ 0x90
 800cb0e:	2201      	movs	r2, #1
 800cb10:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb16:	e057      	b.n	800cbc8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d109      	bne.n	800cb32 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cb1e:	78fb      	ldrb	r3, [r7, #3]
 800cb20:	693a      	ldr	r2, [r7, #16]
 800cb22:	2134      	movs	r1, #52	@ 0x34
 800cb24:	fb01 f303 	mul.w	r3, r1, r3
 800cb28:	4413      	add	r3, r2
 800cb2a:	3390      	adds	r3, #144	@ 0x90
 800cb2c:	2205      	movs	r2, #5
 800cb2e:	701a      	strb	r2, [r3, #0]
      break;
 800cb30:	e04a      	b.n	800cbc8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	d147      	bne.n	800cbc8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	2134      	movs	r1, #52	@ 0x34
 800cb3e:	fb01 f303 	mul.w	r3, r1, r3
 800cb42:	4413      	add	r3, r2
 800cb44:	3390      	adds	r3, #144	@ 0x90
 800cb46:	2208      	movs	r2, #8
 800cb48:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	75fb      	strb	r3, [r7, #23]
      break;
 800cb4e:	e03b      	b.n	800cbc8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	2234      	movs	r2, #52	@ 0x34
 800cb54:	fb02 f303 	mul.w	r3, r2, r3
 800cb58:	3398      	adds	r3, #152	@ 0x98
 800cb5a:	693a      	ldr	r2, [r7, #16]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	78fb      	ldrb	r3, [r7, #3]
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fd51 	bl	800d60c <USBH_MSC_SCSI_RequestSense>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d113      	bne.n	800cb9c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cb74:	78fb      	ldrb	r3, [r7, #3]
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	2134      	movs	r1, #52	@ 0x34
 800cb7a:	fb01 f303 	mul.w	r3, r1, r3
 800cb7e:	4413      	add	r3, r2
 800cb80:	3390      	adds	r3, #144	@ 0x90
 800cb82:	2201      	movs	r2, #1
 800cb84:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800cb86:	78fb      	ldrb	r3, [r7, #3]
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	2134      	movs	r1, #52	@ 0x34
 800cb8c:	fb01 f303 	mul.w	r3, r1, r3
 800cb90:	4413      	add	r3, r2
 800cb92:	3391      	adds	r3, #145	@ 0x91
 800cb94:	2202      	movs	r2, #2
 800cb96:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800cb98:	2302      	movs	r3, #2
 800cb9a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800cb9c:	7bfb      	ldrb	r3, [r7, #15]
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d014      	beq.n	800cbcc <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cba2:	7bfb      	ldrb	r3, [r7, #15]
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	d111      	bne.n	800cbcc <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cba8:	78fb      	ldrb	r3, [r7, #3]
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	2134      	movs	r1, #52	@ 0x34
 800cbae:	fb01 f303 	mul.w	r3, r1, r3
 800cbb2:	4413      	add	r3, r2
 800cbb4:	3390      	adds	r3, #144	@ 0x90
 800cbb6:	2208      	movs	r2, #8
 800cbb8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cbba:	2302      	movs	r3, #2
 800cbbc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbbe:	e005      	b.n	800cbcc <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800cbc0:	bf00      	nop
 800cbc2:	e004      	b.n	800cbce <USBH_MSC_RdWrProcess+0x194>
      break;
 800cbc4:	bf00      	nop
 800cbc6:	e002      	b.n	800cbce <USBH_MSC_RdWrProcess+0x194>
      break;
 800cbc8:	bf00      	nop
 800cbca:	e000      	b.n	800cbce <USBH_MSC_RdWrProcess+0x194>
      break;
 800cbcc:	bf00      	nop

  }
  return error;
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3718      	adds	r7, #24
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbea:	69db      	ldr	r3, [r3, #28]
 800cbec:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b0b      	cmp	r3, #11
 800cbf6:	d10c      	bne.n	800cc12 <USBH_MSC_UnitIsReady+0x3a>
 800cbf8:	78fb      	ldrb	r3, [r7, #3]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	2134      	movs	r1, #52	@ 0x34
 800cbfe:	fb01 f303 	mul.w	r3, r1, r3
 800cc02:	4413      	add	r3, r2
 800cc04:	3391      	adds	r3, #145	@ 0x91
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]
 800cc10:	e001      	b.n	800cc16 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800cc12:	2300      	movs	r3, #0
 800cc14:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	607a      	str	r2, [r7, #4]
 800cc30:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b0b      	cmp	r3, #11
 800cc44:	d10d      	bne.n	800cc62 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800cc46:	7afb      	ldrb	r3, [r7, #11]
 800cc48:	2234      	movs	r2, #52	@ 0x34
 800cc4a:	fb02 f303 	mul.w	r3, r2, r3
 800cc4e:	3390      	adds	r3, #144	@ 0x90
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	4413      	add	r3, r2
 800cc54:	2234      	movs	r2, #52	@ 0x34
 800cc56:	4619      	mov	r1, r3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f001 fb2d 	bl	800e2b8 <memcpy>
    return USBH_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e000      	b.n	800cc64 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800cc62:	2302      	movs	r3, #2
  }
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af02      	add	r7, sp, #8
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc82:	69db      	ldr	r3, [r3, #28]
 800cc84:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00e      	beq.n	800ccb0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800cc98:	2b0b      	cmp	r3, #11
 800cc9a:	d109      	bne.n	800ccb0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800cc9c:	7afb      	ldrb	r3, [r7, #11]
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	2134      	movs	r1, #52	@ 0x34
 800cca2:	fb01 f303 	mul.w	r3, r1, r3
 800cca6:	4413      	add	r3, r2
 800cca8:	3390      	adds	r3, #144	@ 0x90
 800ccaa:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d001      	beq.n	800ccb4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	e040      	b.n	800cd36 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2206      	movs	r2, #6
 800ccb8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	2134      	movs	r1, #52	@ 0x34
 800ccc0:	fb01 f303 	mul.w	r3, r1, r3
 800ccc4:	4413      	add	r3, r2
 800ccc6:	3390      	adds	r3, #144	@ 0x90
 800ccc8:	2206      	movs	r2, #6
 800ccca:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800cccc:	7afb      	ldrb	r3, [r7, #11]
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ccd6:	7af9      	ldrb	r1, [r7, #11]
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f000 fd77 	bl	800d7d4 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ccec:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ccee:	e016      	b.n	800cd1e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	1ad2      	subs	r2, r2, r3
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	f242 7110 	movw	r1, #10000	@ 0x2710
 800cd00:	fb01 f303 	mul.w	r3, r1, r3
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d805      	bhi.n	800cd14 <USBH_MSC_Read+0xa8>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d104      	bne.n	800cd1e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2201      	movs	r2, #1
 800cd18:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	e00b      	b.n	800cd36 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cd1e:	7afb      	ldrb	r3, [r7, #11]
 800cd20:	4619      	mov	r1, r3
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7ff fe89 	bl	800ca3a <USBH_MSC_RdWrProcess>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d0e0      	beq.n	800ccf0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	2201      	movs	r2, #1
 800cd32:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b088      	sub	sp, #32
 800cd42:	af02      	add	r7, sp, #8
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00e      	beq.n	800cd82 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800cd6a:	2b0b      	cmp	r3, #11
 800cd6c:	d109      	bne.n	800cd82 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800cd6e:	7afb      	ldrb	r3, [r7, #11]
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	2134      	movs	r1, #52	@ 0x34
 800cd74:	fb01 f303 	mul.w	r3, r1, r3
 800cd78:	4413      	add	r3, r2
 800cd7a:	3390      	adds	r3, #144	@ 0x90
 800cd7c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d001      	beq.n	800cd86 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800cd82:	2302      	movs	r3, #2
 800cd84:	e040      	b.n	800ce08 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2207      	movs	r2, #7
 800cd8a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800cd8c:	7afb      	ldrb	r3, [r7, #11]
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	2134      	movs	r1, #52	@ 0x34
 800cd92:	fb01 f303 	mul.w	r3, r1, r3
 800cd96:	4413      	add	r3, r2
 800cd98:	3390      	adds	r3, #144	@ 0x90
 800cd9a:	2207      	movs	r2, #7
 800cd9c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800cd9e:	7afb      	ldrb	r3, [r7, #11]
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800cda8:	7af9      	ldrb	r1, [r7, #11]
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 fca3 	bl	800d6fe <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cdbe:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cdc0:	e016      	b.n	800cdf0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	1ad2      	subs	r2, r2, r3
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	f242 7110 	movw	r1, #10000	@ 0x2710
 800cdd2:	fb01 f303 	mul.w	r3, r1, r3
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d805      	bhi.n	800cde6 <USBH_MSC_Write+0xa8>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d104      	bne.n	800cdf0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2201      	movs	r2, #1
 800cdea:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800cdec:	2302      	movs	r3, #2
 800cdee:	e00b      	b.n	800ce08 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cdf0:	7afb      	ldrb	r3, [r7, #11]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7ff fe20 	bl	800ca3a <USBH_MSC_RdWrProcess>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d0e0      	beq.n	800cdc2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2201      	movs	r2, #1
 800ce04:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2221      	movs	r2, #33	@ 0x21
 800ce1c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	22ff      	movs	r2, #255	@ 0xff
 800ce22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800ce36:	2200      	movs	r2, #0
 800ce38:	2100      	movs	r1, #0
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7fe ff43 	bl	800bcc6 <USBH_CtlReq>
 800ce40:	4603      	mov	r3, r0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	22a1      	movs	r2, #161	@ 0xa1
 800ce58:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	22fe      	movs	r2, #254	@ 0xfe
 800ce5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800ce72:	2201      	movs	r2, #1
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7fe ff25 	bl	800bcc6 <USBH_CtlReq>
 800ce7c:	4603      	mov	r3, r0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
	...

0800ce88 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	4a09      	ldr	r2, [pc, #36]	@ (800cec4 <USBH_MSC_BOT_Init+0x3c>)
 800ce9e:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4a09      	ldr	r2, [pc, #36]	@ (800cec8 <USBH_MSC_BOT_Init+0x40>)
 800cea4:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr
 800cec4:	43425355 	.word	0x43425355
 800cec8:	20304050 	.word	0x20304050

0800cecc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af02      	add	r7, sp, #8
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ced8:	2301      	movs	r3, #1
 800ceda:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800cedc:	2301      	movs	r3, #1
 800cede:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800cee0:	2301      	movs	r3, #1
 800cee2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cee4:	2300      	movs	r3, #0
 800cee6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ceee:	69db      	ldr	r3, [r3, #28]
 800cef0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cefc:	3b01      	subs	r3, #1
 800cefe:	2b0a      	cmp	r3, #10
 800cf00:	f200 819e 	bhi.w	800d240 <USBH_MSC_BOT_Process+0x374>
 800cf04:	a201      	add	r2, pc, #4	@ (adr r2, 800cf0c <USBH_MSC_BOT_Process+0x40>)
 800cf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0a:	bf00      	nop
 800cf0c:	0800cf39 	.word	0x0800cf39
 800cf10:	0800cf61 	.word	0x0800cf61
 800cf14:	0800cfcb 	.word	0x0800cfcb
 800cf18:	0800cfe9 	.word	0x0800cfe9
 800cf1c:	0800d06d 	.word	0x0800d06d
 800cf20:	0800d08f 	.word	0x0800d08f
 800cf24:	0800d127 	.word	0x0800d127
 800cf28:	0800d143 	.word	0x0800d143
 800cf2c:	0800d195 	.word	0x0800d195
 800cf30:	0800d1c5 	.word	0x0800d1c5
 800cf34:	0800d227 	.word	0x0800d227
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	78fa      	ldrb	r2, [r7, #3]
 800cf3c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	2202      	movs	r2, #2
 800cf44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	795b      	ldrb	r3, [r3, #5]
 800cf52:	2201      	movs	r2, #1
 800cf54:	9200      	str	r2, [sp, #0]
 800cf56:	221f      	movs	r2, #31
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff f8c2 	bl	800c0e2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800cf5e:	e17e      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	795b      	ldrb	r3, [r3, #5]
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 ffa0 	bl	800deac <USBH_LL_GetURBState>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800cf70:	7d3b      	ldrb	r3, [r7, #20]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d118      	bne.n	800cfa8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00f      	beq.n	800cf9e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da04      	bge.n	800cf94 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf92:	e157      	b.n	800d244 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	2205      	movs	r2, #5
 800cf98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cf9c:	e152      	b.n	800d244 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2207      	movs	r2, #7
 800cfa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cfa6:	e14d      	b.n	800d244 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cfa8:	7d3b      	ldrb	r3, [r7, #20]
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d104      	bne.n	800cfb8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cfb6:	e145      	b.n	800d244 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800cfb8:	7d3b      	ldrb	r3, [r7, #20]
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	f040 8142 	bne.w	800d244 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	220a      	movs	r2, #10
 800cfc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cfc8:	e13c      	b.n	800d244 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	895a      	ldrh	r2, [r3, #10]
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	791b      	ldrb	r3, [r3, #4]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff f8a7 	bl	800c12c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	2204      	movs	r2, #4
 800cfe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800cfe6:	e13a      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	791b      	ldrb	r3, [r3, #4]
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 ff5c 	bl	800deac <USBH_LL_GetURBState>
 800cff4:	4603      	mov	r3, r0
 800cff6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800cff8:	7d3b      	ldrb	r3, [r7, #20]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d12d      	bne.n	800d05a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	8952      	ldrh	r2, [r2, #10]
 800d006:	4293      	cmp	r3, r2
 800d008:	d910      	bls.n	800d02c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	8952      	ldrh	r2, [r2, #10]
 800d014:	441a      	add	r2, r3
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	8952      	ldrh	r2, [r2, #10]
 800d024:	1a9a      	subs	r2, r3, r2
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d02a:	e002      	b.n	800d032 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	2200      	movs	r2, #0
 800d030:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	895a      	ldrh	r2, [r3, #10]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	791b      	ldrb	r3, [r3, #4]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff f86f 	bl	800c12c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800d04e:	e0fb      	b.n	800d248 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2207      	movs	r2, #7
 800d054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d058:	e0f6      	b.n	800d248 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800d05a:	7d3b      	ldrb	r3, [r7, #20]
 800d05c:	2b05      	cmp	r3, #5
 800d05e:	f040 80f3 	bne.w	800d248 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	2209      	movs	r2, #9
 800d066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d06a:	e0ed      	b.n	800d248 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	891a      	ldrh	r2, [r3, #8]
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	795b      	ldrb	r3, [r3, #5]
 800d07a:	2001      	movs	r0, #1
 800d07c:	9000      	str	r0, [sp, #0]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff f82f 	bl	800c0e2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	2206      	movs	r2, #6
 800d088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d08c:	e0e7      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	795b      	ldrb	r3, [r3, #5]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 ff09 	bl	800deac <USBH_LL_GetURBState>
 800d09a:	4603      	mov	r3, r0
 800d09c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d09e:	7d3b      	ldrb	r3, [r7, #20]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d12f      	bne.n	800d104 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	8912      	ldrh	r2, [r2, #8]
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d910      	bls.n	800d0d2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0b6:	693a      	ldr	r2, [r7, #16]
 800d0b8:	8912      	ldrh	r2, [r2, #8]
 800d0ba:	441a      	add	r2, r3
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	8912      	ldrh	r2, [r2, #8]
 800d0ca:	1a9a      	subs	r2, r3, r2
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d0d0:	e002      	b.n	800d0d8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00c      	beq.n	800d0fa <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	891a      	ldrh	r2, [r3, #8]
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	795b      	ldrb	r3, [r3, #5]
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	9000      	str	r0, [sp, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7fe fff5 	bl	800c0e2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800d0f8:	e0a8      	b.n	800d24c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	2207      	movs	r2, #7
 800d0fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d102:	e0a3      	b.n	800d24c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d104:	7d3b      	ldrb	r3, [r7, #20]
 800d106:	2b02      	cmp	r3, #2
 800d108:	d104      	bne.n	800d114 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	2205      	movs	r2, #5
 800d10e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d112:	e09b      	b.n	800d24c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800d114:	7d3b      	ldrb	r3, [r7, #20]
 800d116:	2b05      	cmp	r3, #5
 800d118:	f040 8098 	bne.w	800d24c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	220a      	movs	r2, #10
 800d120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d124:	e092      	b.n	800d24c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	791b      	ldrb	r3, [r3, #4]
 800d130:	220d      	movs	r2, #13
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7fe fffa 	bl	800c12c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	2208      	movs	r2, #8
 800d13c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d140:	e08d      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	791b      	ldrb	r3, [r3, #4]
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 feaf 	bl	800deac <USBH_LL_GetURBState>
 800d14e:	4603      	mov	r3, r0
 800d150:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800d152:	7d3b      	ldrb	r3, [r7, #20]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d115      	bne.n	800d184 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f8a9 	bl	800d2c0 <USBH_MSC_DecodeCSW>
 800d16e:	4603      	mov	r3, r0
 800d170:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800d172:	7d7b      	ldrb	r3, [r7, #21]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800d17c:	e068      	b.n	800d250 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800d17e:	2302      	movs	r3, #2
 800d180:	75fb      	strb	r3, [r7, #23]
      break;
 800d182:	e065      	b.n	800d250 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800d184:	7d3b      	ldrb	r3, [r7, #20]
 800d186:	2b05      	cmp	r3, #5
 800d188:	d162      	bne.n	800d250 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2209      	movs	r2, #9
 800d18e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d192:	e05d      	b.n	800d250 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800d194:	78fb      	ldrb	r3, [r7, #3]
 800d196:	2200      	movs	r2, #0
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f864 	bl	800d268 <USBH_MSC_BOT_Abort>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d1a4:	7dbb      	ldrb	r3, [r7, #22]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d104      	bne.n	800d1b4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	2207      	movs	r2, #7
 800d1ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800d1b2:	e04f      	b.n	800d254 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800d1b4:	7dbb      	ldrb	r3, [r7, #22]
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d14c      	bne.n	800d254 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	220b      	movs	r2, #11
 800d1be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d1c2:	e047      	b.n	800d254 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f84c 	bl	800d268 <USBH_MSC_BOT_Abort>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d1d4:	7dbb      	ldrb	r3, [r7, #22]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d11d      	bne.n	800d216 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	795b      	ldrb	r3, [r3, #5]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fec0 	bl	800df66 <USBH_LL_GetToggle>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	7959      	ldrb	r1, [r3, #5]
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
 800d1f0:	f1c3 0301 	rsb	r3, r3, #1
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fe81 	bl	800df00 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	791b      	ldrb	r3, [r3, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fe7a 	bl	800df00 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	2209      	movs	r2, #9
 800d210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800d214:	e020      	b.n	800d258 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800d216:	7dbb      	ldrb	r3, [r7, #22]
 800d218:	2b04      	cmp	r3, #4
 800d21a:	d11d      	bne.n	800d258 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	220b      	movs	r2, #11
 800d220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d224:	e018      	b.n	800d258 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff fdf2 	bl	800ce10 <USBH_MSC_BOT_REQ_Reset>
 800d22c:	4603      	mov	r3, r0
 800d22e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d230:	7dfb      	ldrb	r3, [r7, #23]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d112      	bne.n	800d25c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800d23e:	e00d      	b.n	800d25c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800d240:	bf00      	nop
 800d242:	e00c      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d244:	bf00      	nop
 800d246:	e00a      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d248:	bf00      	nop
 800d24a:	e008      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d24c:	bf00      	nop
 800d24e:	e006      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d250:	bf00      	nop
 800d252:	e004      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d254:	bf00      	nop
 800d256:	e002      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d258:	bf00      	nop
 800d25a:	e000      	b.n	800d25e <USBH_MSC_BOT_Process+0x392>
      break;
 800d25c:	bf00      	nop
  }
  return status;
 800d25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
 800d274:	4613      	mov	r3, r2
 800d276:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800d278:	2302      	movs	r3, #2
 800d27a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800d286:	78bb      	ldrb	r3, [r7, #2]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <USBH_MSC_BOT_Abort+0x2a>
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d009      	beq.n	800d2a4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800d290:	e011      	b.n	800d2b6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	79db      	ldrb	r3, [r3, #7]
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7fe f9df 	bl	800b65c <USBH_ClrFeature>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2a2:	e008      	b.n	800d2b6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	799b      	ldrb	r3, [r3, #6]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7fe f9d6 	bl	800b65c <USBH_ClrFeature>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2b4:	bf00      	nop
  }
  return status;
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d2ce:	69db      	ldr	r3, [r3, #28]
 800d2d0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	791b      	ldrb	r3, [r3, #4]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fd53 	bl	800dd88 <USBH_LL_GetLastXferSize>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b0d      	cmp	r3, #13
 800d2e6:	d002      	beq.n	800d2ee <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	73fb      	strb	r3, [r7, #15]
 800d2ec:	e024      	b.n	800d338 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2f2:	4a14      	ldr	r2, [pc, #80]	@ (800d344 <USBH_MSC_DecodeCSW+0x84>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d11d      	bne.n	800d334 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d300:	429a      	cmp	r2, r3
 800d302:	d119      	bne.n	800d338 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d102      	bne.n	800d314 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
 800d312:	e011      	b.n	800d338 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d102      	bne.n	800d324 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800d31e:	2301      	movs	r3, #1
 800d320:	73fb      	strb	r3, [r7, #15]
 800d322:	e009      	b.n	800d338 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d104      	bne.n	800d338 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800d32e:	2302      	movs	r3, #2
 800d330:	73fb      	strb	r3, [r7, #15]
 800d332:	e001      	b.n	800d338 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800d334:	2302      	movs	r3, #2
 800d336:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800d338:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	53425355 	.word	0x53425355

0800d348 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800d354:	2302      	movs	r3, #2
 800d356:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d35e:	69db      	ldr	r3, [r3, #28]
 800d360:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d002      	beq.n	800d372 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d021      	beq.n	800d3b4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d370:	e028      	b.n	800d3c4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	2200      	movs	r2, #0
 800d376:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	220a      	movs	r2, #10
 800d384:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	3363      	adds	r3, #99	@ 0x63
 800d38c:	2210      	movs	r2, #16
 800d38e:	2100      	movs	r1, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f000 ff4d 	bl	800e230 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d3b2:	e007      	b.n	800d3c4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7ff fd87 	bl	800cecc <USBH_MSC_BOT_Process>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	73fb      	strb	r3, [r7, #15]
      break;
 800d3c2:	bf00      	nop
  }

  return error;
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b086      	sub	sp, #24
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	607a      	str	r2, [r7, #4]
 800d3da:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d002      	beq.n	800d3fa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d027      	beq.n	800d448 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800d3f8:	e05e      	b.n	800d4b8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2208      	movs	r2, #8
 800d3fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2280      	movs	r2, #128	@ 0x80
 800d404:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	220a      	movs	r2, #10
 800d40c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	3363      	adds	r3, #99	@ 0x63
 800d414:	2210      	movs	r2, #16
 800d416:	2100      	movs	r1, #0
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 ff09 	bl	800e230 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2225      	movs	r2, #37	@ 0x25
 800d422:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2202      	movs	r2, #2
 800d432:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f103 0210 	add.w	r2, r3, #16
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d442:	2301      	movs	r3, #1
 800d444:	75fb      	strb	r3, [r7, #23]
      break;
 800d446:	e037      	b.n	800d4b8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d448:	7afb      	ldrb	r3, [r7, #11]
 800d44a:	4619      	mov	r1, r3
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f7ff fd3d 	bl	800cecc <USBH_MSC_BOT_Process>
 800d452:	4603      	mov	r3, r0
 800d454:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d456:	7dfb      	ldrb	r3, [r7, #23]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d12c      	bne.n	800d4b6 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d462:	3303      	adds	r3, #3
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d46e:	3302      	adds	r3, #2
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d47c:	3301      	adds	r3, #1
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d482:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	061b      	lsls	r3, r3, #24
 800d48e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d49a:	3307      	adds	r3, #7
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4a6:	3306      	adds	r3, #6
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	021b      	lsls	r3, r3, #8
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	809a      	strh	r2, [r3, #4]
      break;
 800d4b6:	bf00      	nop
  }

  return error;
 800d4b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b086      	sub	sp, #24
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	607a      	str	r2, [r7, #4]
 800d4ce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d002      	beq.n	800d4ee <USBH_MSC_SCSI_Inquiry+0x2c>
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d03d      	beq.n	800d568 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800d4ec:	e089      	b.n	800d602 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	2224      	movs	r2, #36	@ 0x24
 800d4f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	2280      	movs	r2, #128	@ 0x80
 800d4f8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	220a      	movs	r2, #10
 800d500:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	3363      	adds	r3, #99	@ 0x63
 800d508:	220a      	movs	r2, #10
 800d50a:	2100      	movs	r1, #0
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fe8f 	bl	800e230 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	2212      	movs	r2, #18
 800d516:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d51a:	7afb      	ldrb	r3, [r7, #11]
 800d51c:	015b      	lsls	r3, r3, #5
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2200      	movs	r2, #0
 800d532:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	2224      	movs	r2, #36	@ 0x24
 800d53a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	2202      	movs	r2, #2
 800d552:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	f103 0210 	add.w	r2, r3, #16
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d562:	2301      	movs	r3, #1
 800d564:	75fb      	strb	r3, [r7, #23]
      break;
 800d566:	e04c      	b.n	800d602 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d568:	7afb      	ldrb	r3, [r7, #11]
 800d56a:	4619      	mov	r1, r3
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7ff fcad 	bl	800cecc <USBH_MSC_BOT_Process>
 800d572:	4603      	mov	r3, r0
 800d574:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d141      	bne.n	800d600 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800d57c:	2222      	movs	r2, #34	@ 0x22
 800d57e:	2100      	movs	r1, #0
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fe55 	bl	800e230 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	f003 031f 	and.w	r3, r3, #31
 800d592:	b2da      	uxtb	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	095b      	lsrs	r3, r3, #5
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	b25b      	sxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	da03      	bge.n	800d5c0 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	709a      	strb	r2, [r3, #2]
 800d5be:	e002      	b.n	800d5c6 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	1cd8      	adds	r0, r3, #3
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	2208      	movs	r2, #8
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	f000 fe6f 	bl	800e2b8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f103 000c 	add.w	r0, r3, #12
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5e6:	3310      	adds	r3, #16
 800d5e8:	2210      	movs	r2, #16
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	f000 fe64 	bl	800e2b8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	331d      	adds	r3, #29
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800d5fa:	3220      	adds	r2, #32
 800d5fc:	6812      	ldr	r2, [r2, #0]
 800d5fe:	601a      	str	r2, [r3, #0]
      break;
 800d600:	bf00      	nop
  }

  return error;
 800d602:	7dfb      	ldrb	r3, [r7, #23]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	460b      	mov	r3, r1
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800d61a:	2302      	movs	r3, #2
 800d61c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d002      	beq.n	800d638 <USBH_MSC_SCSI_RequestSense+0x2c>
 800d632:	2b02      	cmp	r3, #2
 800d634:	d03d      	beq.n	800d6b2 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800d636:	e05d      	b.n	800d6f4 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	220e      	movs	r2, #14
 800d63c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2280      	movs	r2, #128	@ 0x80
 800d642:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	220a      	movs	r2, #10
 800d64a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	3363      	adds	r3, #99	@ 0x63
 800d652:	2210      	movs	r2, #16
 800d654:	2100      	movs	r1, #0
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fdea 	bl	800e230 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	2203      	movs	r2, #3
 800d660:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d664:	7afb      	ldrb	r3, [r7, #11]
 800d666:	015b      	lsls	r3, r3, #5
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	220e      	movs	r2, #14
 800d684:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2202      	movs	r2, #2
 800d69c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f103 0210 	add.w	r2, r3, #16
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	75fb      	strb	r3, [r7, #23]
      break;
 800d6b0:	e020      	b.n	800d6f4 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d6b2:	7afb      	ldrb	r3, [r7, #11]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f7ff fc08 	bl	800cecc <USBH_MSC_BOT_Process>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d115      	bne.n	800d6f2 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6cc:	3302      	adds	r3, #2
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	f003 030f 	and.w	r3, r3, #15
 800d6d4:	b2da      	uxtb	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6e0:	7b1a      	ldrb	r2, [r3, #12]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6ec:	7b5a      	ldrb	r2, [r3, #13]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	709a      	strb	r2, [r3, #2]
      break;
 800d6f2:	bf00      	nop
  }

  return error;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	60f8      	str	r0, [r7, #12]
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	603b      	str	r3, [r7, #0]
 800d70a:	460b      	mov	r3, r1
 800d70c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800d70e:	2302      	movs	r3, #2
 800d710:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d718:	69db      	ldr	r3, [r3, #28]
 800d71a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d722:	2b01      	cmp	r3, #1
 800d724:	d002      	beq.n	800d72c <USBH_MSC_SCSI_Write+0x2e>
 800d726:	2b02      	cmp	r3, #2
 800d728:	d047      	beq.n	800d7ba <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d72a:	e04e      	b.n	800d7ca <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800d732:	461a      	mov	r2, r3
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	fb03 f202 	mul.w	r2, r3, r2
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	220a      	movs	r2, #10
 800d74a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	3363      	adds	r3, #99	@ 0x63
 800d752:	2210      	movs	r2, #16
 800d754:	2100      	movs	r1, #0
 800d756:	4618      	mov	r0, r3
 800d758:	f000 fd6a 	bl	800e230 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	222a      	movs	r2, #42	@ 0x2a
 800d760:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800d764:	79fa      	ldrb	r2, [r7, #7]
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800d76c:	79ba      	ldrb	r2, [r7, #6]
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800d774:	797a      	ldrb	r2, [r7, #5]
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800d77c:	1d3b      	adds	r3, r7, #4
 800d77e:	781a      	ldrb	r2, [r3, #0]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800d786:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800d790:	f107 0320 	add.w	r3, r7, #32
 800d794:	781a      	ldrb	r2, [r3, #0]
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800d7b8:	e007      	b.n	800d7ca <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d7ba:	7afb      	ldrb	r3, [r7, #11]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f7ff fb84 	bl	800cecc <USBH_MSC_BOT_Process>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c8:	bf00      	nop
  }

  return error;
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	607a      	str	r2, [r7, #4]
 800d7de:	603b      	str	r3, [r7, #0]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d7ee:	69db      	ldr	r3, [r3, #28]
 800d7f0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d002      	beq.n	800d802 <USBH_MSC_SCSI_Read+0x2e>
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d047      	beq.n	800d890 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d800:	e04e      	b.n	800d8a0 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800d808:	461a      	mov	r2, r3
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	fb03 f202 	mul.w	r2, r3, r2
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	2280      	movs	r2, #128	@ 0x80
 800d818:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	220a      	movs	r2, #10
 800d820:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	3363      	adds	r3, #99	@ 0x63
 800d828:	2210      	movs	r2, #16
 800d82a:	2100      	movs	r1, #0
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 fcff 	bl	800e230 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	2228      	movs	r2, #40	@ 0x28
 800d836:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800d83a:	79fa      	ldrb	r2, [r7, #7]
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800d842:	79ba      	ldrb	r2, [r7, #6]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800d84a:	797a      	ldrb	r2, [r7, #5]
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800d852:	1d3b      	adds	r3, r7, #4
 800d854:	781a      	ldrb	r2, [r3, #0]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800d85c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800d866:	f107 0320 	add.w	r3, r7, #32
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2201      	movs	r2, #1
 800d876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	2202      	movs	r2, #2
 800d87e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d88a:	2301      	movs	r3, #1
 800d88c:	75fb      	strb	r3, [r7, #23]
      break;
 800d88e:	e007      	b.n	800d8a0 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	4619      	mov	r1, r3
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff fb19 	bl	800cecc <USBH_MSC_BOT_Process>
 800d89a:	4603      	mov	r3, r0
 800d89c:	75fb      	strb	r3, [r7, #23]
      break;
 800d89e:	bf00      	nop
  }

  return error;
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b086      	sub	sp, #24
 800d8ae:	af04      	add	r7, sp, #16
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	4608      	mov	r0, r1
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	70fb      	strb	r3, [r7, #3]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70bb      	strb	r3, [r7, #2]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d8c4:	7878      	ldrb	r0, [r7, #1]
 800d8c6:	78ba      	ldrb	r2, [r7, #2]
 800d8c8:	78f9      	ldrb	r1, [r7, #3]
 800d8ca:	8b3b      	ldrh	r3, [r7, #24]
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	7d3b      	ldrb	r3, [r7, #20]
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	7c3b      	ldrb	r3, [r7, #16]
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 fa68 	bl	800ddae <USBH_LL_OpenPipe>

  return USBH_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fa87 	bl	800de0c <USBH_LL_ClosePipe>

  return USBH_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f836 	bl	800d986 <USBH_GetFreePipe>
 800d91a:	4603      	mov	r3, r0
 800d91c:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d91e:	89fb      	ldrh	r3, [r7, #14]
 800d920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d924:	4293      	cmp	r3, r2
 800d926:	d00a      	beq.n	800d93e <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d928:	78fa      	ldrb	r2, [r7, #3]
 800d92a:	89fb      	ldrh	r3, [r7, #14]
 800d92c:	f003 030f 	and.w	r3, r3, #15
 800d930:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d934:	6879      	ldr	r1, [r7, #4]
 800d936:	33e0      	adds	r3, #224	@ 0xe0
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	440b      	add	r3, r1
 800d93c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d93e:	89fb      	ldrh	r3, [r7, #14]
 800d940:	b2db      	uxtb	r3, r3
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	460b      	mov	r3, r1
 800d954:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d956:	78fb      	ldrb	r3, [r7, #3]
 800d958:	2b0f      	cmp	r3, #15
 800d95a:	d80d      	bhi.n	800d978 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	33e0      	adds	r3, #224	@ 0xe0
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	78fb      	ldrb	r3, [r7, #3]
 800d96a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d96e:	6879      	ldr	r1, [r7, #4]
 800d970:	33e0      	adds	r3, #224	@ 0xe0
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	440b      	add	r3, r1
 800d976:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d986:	b480      	push	{r7}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]
 800d996:	e00f      	b.n	800d9b8 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	33e0      	adds	r3, #224	@ 0xe0
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	e007      	b.n	800d9c2 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	73fb      	strb	r3, [r7, #15]
 800d9b8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ba:	2b0f      	cmp	r3, #15
 800d9bc:	d9ec      	bls.n	800d998 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d9be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
	...

0800d9d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	490e      	ldr	r1, [pc, #56]	@ (800da10 <MX_USB_HOST_Init+0x40>)
 800d9d8:	480e      	ldr	r0, [pc, #56]	@ (800da14 <MX_USB_HOST_Init+0x44>)
 800d9da:	f7fc ff74 	bl	800a8c6 <USBH_Init>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d9e4:	f7f3 fc38 	bl	8001258 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d9e8:	490b      	ldr	r1, [pc, #44]	@ (800da18 <MX_USB_HOST_Init+0x48>)
 800d9ea:	480a      	ldr	r0, [pc, #40]	@ (800da14 <MX_USB_HOST_Init+0x44>)
 800d9ec:	f7fd f818 	bl	800aa20 <USBH_RegisterClass>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d9f6:	f7f3 fc2f 	bl	8001258 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d9fa:	4806      	ldr	r0, [pc, #24]	@ (800da14 <MX_USB_HOST_Init+0x44>)
 800d9fc:	f7fd f89c 	bl	800ab38 <USBH_Start>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800da06:	f7f3 fc27 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800da0a:	bf00      	nop
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	0800da31 	.word	0x0800da31
 800da14:	20002714 	.word	0x20002714
 800da18:	2000000c 	.word	0x2000000c

0800da1c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800da20:	4802      	ldr	r0, [pc, #8]	@ (800da2c <MX_USB_HOST_Process+0x10>)
 800da22:	f7fd f899 	bl	800ab58 <USBH_Process>
}
 800da26:	bf00      	nop
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20002714 	.word	0x20002714

0800da30 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800da3c:	78fb      	ldrb	r3, [r7, #3]
 800da3e:	3b01      	subs	r3, #1
 800da40:	2b04      	cmp	r3, #4
 800da42:	d829      	bhi.n	800da98 <USBH_UserProcess+0x68>
 800da44:	a201      	add	r2, pc, #4	@ (adr r2, 800da4c <USBH_UserProcess+0x1c>)
 800da46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4a:	bf00      	nop
 800da4c:	0800da99 	.word	0x0800da99
 800da50:	0800da6d 	.word	0x0800da6d
 800da54:	0800da99 	.word	0x0800da99
 800da58:	0800da91 	.word	0x0800da91
 800da5c:	0800da61 	.word	0x0800da61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800da60:	4b10      	ldr	r3, [pc, #64]	@ (800daa4 <USBH_UserProcess+0x74>)
 800da62:	2203      	movs	r2, #3
 800da64:	701a      	strb	r2, [r3, #0]

  Unmount_USB();
 800da66:	f7f3 f8ad 	bl	8000bc4 <Unmount_USB>
  break;
 800da6a:	e016      	b.n	800da9a <USBH_UserProcess+0x6a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800da6c:	4b0d      	ldr	r3, [pc, #52]	@ (800daa4 <USBH_UserProcess+0x74>)
 800da6e:	2202      	movs	r2, #2
 800da70:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800da72:	f7f3 f893 	bl	8000b9c <Mount_USB>

  Check_USB_Details();
 800da76:	f7f3 fa95 	bl	8000fa4 <Check_USB_Details>

  Scan_USB("/");
 800da7a:	480b      	ldr	r0, [pc, #44]	@ (800daa8 <USBH_UserProcess+0x78>)
 800da7c:	f7f3 f8b4 	bl	8000be8 <Scan_USB>

  Create_File("/hello.txt");
 800da80:	480a      	ldr	r0, [pc, #40]	@ (800daac <USBH_UserProcess+0x7c>)
 800da82:	f7f3 fa03 	bl	8000e8c <Create_File>
  Write_File("/hello.txt", "hello!");
 800da86:	490a      	ldr	r1, [pc, #40]	@ (800dab0 <USBH_UserProcess+0x80>)
 800da88:	4808      	ldr	r0, [pc, #32]	@ (800daac <USBH_UserProcess+0x7c>)
 800da8a:	f7f3 f94d 	bl	8000d28 <Write_File>




  break;
 800da8e:	e004      	b.n	800da9a <USBH_UserProcess+0x6a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800da90:	4b04      	ldr	r3, [pc, #16]	@ (800daa4 <USBH_UserProcess+0x74>)
 800da92:	2201      	movs	r2, #1
 800da94:	701a      	strb	r2, [r3, #0]
  break;
 800da96:	e000      	b.n	800da9a <USBH_UserProcess+0x6a>

  default:
  break;
 800da98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800da9a:	bf00      	nop
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20002aec 	.word	0x20002aec
 800daa8:	0800ee94 	.word	0x0800ee94
 800daac:	0800ee98 	.word	0x0800ee98
 800dab0:	0800eea4 	.word	0x0800eea4

0800dab4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b08a      	sub	sp, #40	@ 0x28
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dabc:	f107 0314 	add.w	r3, r7, #20
 800dac0:	2200      	movs	r2, #0
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	605a      	str	r2, [r3, #4]
 800dac6:	609a      	str	r2, [r3, #8]
 800dac8:	60da      	str	r2, [r3, #12]
 800daca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dad4:	d147      	bne.n	800db66 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
 800dada:	4b25      	ldr	r3, [pc, #148]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800dadc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dade:	4a24      	ldr	r2, [pc, #144]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800dae0:	f043 0301 	orr.w	r3, r3, #1
 800dae4:	6313      	str	r3, [r2, #48]	@ 0x30
 800dae6:	4b22      	ldr	r3, [pc, #136]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800dae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daea:	f003 0301 	and.w	r3, r3, #1
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800daf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800daf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800daf8:	2300      	movs	r3, #0
 800dafa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dafc:	2300      	movs	r3, #0
 800dafe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db00:	f107 0314 	add.w	r3, r7, #20
 800db04:	4619      	mov	r1, r3
 800db06:	481b      	ldr	r0, [pc, #108]	@ (800db74 <HAL_HCD_MspInit+0xc0>)
 800db08:	f7f3 fe28 	bl	800175c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800db0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800db10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db12:	2302      	movs	r3, #2
 800db14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db16:	2300      	movs	r3, #0
 800db18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db1a:	2303      	movs	r3, #3
 800db1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db1e:	230a      	movs	r3, #10
 800db20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db22:	f107 0314 	add.w	r3, r7, #20
 800db26:	4619      	mov	r1, r3
 800db28:	4812      	ldr	r0, [pc, #72]	@ (800db74 <HAL_HCD_MspInit+0xc0>)
 800db2a:	f7f3 fe17 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db2e:	4b10      	ldr	r3, [pc, #64]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800db30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db32:	4a0f      	ldr	r2, [pc, #60]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800db34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db38:	6353      	str	r3, [r2, #52]	@ 0x34
 800db3a:	2300      	movs	r3, #0
 800db3c:	60fb      	str	r3, [r7, #12]
 800db3e:	4b0c      	ldr	r3, [pc, #48]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800db40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db42:	4a0b      	ldr	r2, [pc, #44]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800db44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800db48:	6453      	str	r3, [r2, #68]	@ 0x44
 800db4a:	4b09      	ldr	r3, [pc, #36]	@ (800db70 <HAL_HCD_MspInit+0xbc>)
 800db4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db56:	2200      	movs	r2, #0
 800db58:	2100      	movs	r1, #0
 800db5a:	2043      	movs	r0, #67	@ 0x43
 800db5c:	f7f3 fdc7 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db60:	2043      	movs	r0, #67	@ 0x43
 800db62:	f7f3 fde0 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db66:	bf00      	nop
 800db68:	3728      	adds	r7, #40	@ 0x28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	40023800 	.word	0x40023800
 800db74:	40020000 	.word	0x40020000

0800db78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800db86:	4618      	mov	r0, r3
 800db88:	f7fd fbbd 	bl	800b306 <USBH_LL_IncTimer>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fd fbf5 	bl	800b392 <USBH_LL_Connect>
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fd fbfe 	bl	800b3c0 <USBH_LL_Disconnect>
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	70fb      	strb	r3, [r7, #3]
 800dbd8:	4613      	mov	r3, r2
 800dbda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd fbaf 	bl	800b35a <USBH_LL_PortEnabled>
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fd fbaf 	bl	800b376 <USBH_LL_PortDisabled>
}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d12a      	bne.n	800dc88 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dc32:	4a18      	ldr	r2, [pc, #96]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a15      	ldr	r2, [pc, #84]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc3e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc42:	4b14      	ldr	r3, [pc, #80]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc48:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dc4a:	4b12      	ldr	r3, [pc, #72]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc4c:	2208      	movs	r2, #8
 800dc4e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dc50:	4b10      	ldr	r3, [pc, #64]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc52:	2201      	movs	r2, #1
 800dc54:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc56:	4b0f      	ldr	r3, [pc, #60]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dc5c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc5e:	2202      	movs	r2, #2
 800dc60:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc62:	4b0c      	ldr	r3, [pc, #48]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dc68:	480a      	ldr	r0, [pc, #40]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc6a:	f7f3 ff2c 	bl	8001ac6 <HAL_HCD_Init>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dc74:	f7f3 faf0 	bl	8001258 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dc78:	4806      	ldr	r0, [pc, #24]	@ (800dc94 <USBH_LL_Init+0x74>)
 800dc7a:	f7f4 fb8d 	bl	8002398 <HAL_HCD_GetCurrentFrame>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7fd fb30 	bl	800b2e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	20002af0 	.word	0x20002af0

0800dc98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f4 fafa 	bl	80022a8 <HAL_HCD_Start>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 f992 	bl	800dfe4 <USBH_Get_USB_Status>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f4 fb02 	bl	80022ee <HAL_HCD_Stop>
 800dcea:	4603      	mov	r3, r0
 800dcec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 f977 	bl	800dfe4 <USBH_Get_USB_Status>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f4 fb4c 	bl	80023b4 <HAL_HCD_GetCurrentSpeed>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d00c      	beq.n	800dd3c <USBH_LL_GetSpeed+0x38>
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d80d      	bhi.n	800dd42 <USBH_LL_GetSpeed+0x3e>
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <USBH_LL_GetSpeed+0x2c>
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d003      	beq.n	800dd36 <USBH_LL_GetSpeed+0x32>
 800dd2e:	e008      	b.n	800dd42 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73fb      	strb	r3, [r7, #15]
    break;
 800dd34:	e008      	b.n	800dd48 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dd36:	2301      	movs	r3, #1
 800dd38:	73fb      	strb	r3, [r7, #15]
    break;
 800dd3a:	e005      	b.n	800dd48 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd40:	e002      	b.n	800dd48 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dd42:	2301      	movs	r3, #1
 800dd44:	73fb      	strb	r3, [r7, #15]
    break;
 800dd46:	bf00      	nop
  }
  return  speed;
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7f4 fadd 	bl	8002328 <HAL_HCD_ResetPort>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 f935 	bl	800dfe4 <USBH_Get_USB_Status>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd9a:	78fa      	ldrb	r2, [r7, #3]
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f4 fae5 	bl	800236e <HAL_HCD_HC_GetXferCount>
 800dda4:	4603      	mov	r3, r0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ddae:	b590      	push	{r4, r7, lr}
 800ddb0:	b089      	sub	sp, #36	@ 0x24
 800ddb2:	af04      	add	r7, sp, #16
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	4608      	mov	r0, r1
 800ddb8:	4611      	mov	r1, r2
 800ddba:	461a      	mov	r2, r3
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	70fb      	strb	r3, [r7, #3]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70bb      	strb	r3, [r7, #2]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ddd6:	787c      	ldrb	r4, [r7, #1]
 800ddd8:	78ba      	ldrb	r2, [r7, #2]
 800ddda:	78f9      	ldrb	r1, [r7, #3]
 800dddc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ddde:	9302      	str	r3, [sp, #8]
 800dde0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	4623      	mov	r3, r4
 800ddee:	f7f3 fed1 	bl	8001b94 <HAL_HCD_HC_Init>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 f8f3 	bl	800dfe4 <USBH_Get_USB_Status>
 800ddfe:	4603      	mov	r3, r0
 800de00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de02:	7bbb      	ldrb	r3, [r7, #14]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd90      	pop	{r4, r7, pc}

0800de0c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de26:	78fa      	ldrb	r2, [r7, #3]
 800de28:	4611      	mov	r1, r2
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7f3 ff6a 	bl	8001d04 <HAL_HCD_HC_Halt>
 800de30:	4603      	mov	r3, r0
 800de32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de34:	7bfb      	ldrb	r3, [r7, #15]
 800de36:	4618      	mov	r0, r3
 800de38:	f000 f8d4 	bl	800dfe4 <USBH_Get_USB_Status>
 800de3c:	4603      	mov	r3, r0
 800de3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de40:	7bbb      	ldrb	r3, [r7, #14]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800de4a:	b590      	push	{r4, r7, lr}
 800de4c:	b089      	sub	sp, #36	@ 0x24
 800de4e:	af04      	add	r7, sp, #16
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	4608      	mov	r0, r1
 800de54:	4611      	mov	r1, r2
 800de56:	461a      	mov	r2, r3
 800de58:	4603      	mov	r3, r0
 800de5a:	70fb      	strb	r3, [r7, #3]
 800de5c:	460b      	mov	r3, r1
 800de5e:	70bb      	strb	r3, [r7, #2]
 800de60:	4613      	mov	r3, r2
 800de62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800de72:	787c      	ldrb	r4, [r7, #1]
 800de74:	78ba      	ldrb	r2, [r7, #2]
 800de76:	78f9      	ldrb	r1, [r7, #3]
 800de78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de7c:	9303      	str	r3, [sp, #12]
 800de7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800de80:	9302      	str	r3, [sp, #8]
 800de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de84:	9301      	str	r3, [sp, #4]
 800de86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	4623      	mov	r3, r4
 800de8e:	f7f3 ff5d 	bl	8001d4c <HAL_HCD_HC_SubmitRequest>
 800de92:	4603      	mov	r3, r0
 800de94:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800de96:	7bfb      	ldrb	r3, [r7, #15]
 800de98:	4618      	mov	r0, r3
 800de9a:	f000 f8a3 	bl	800dfe4 <USBH_Get_USB_Status>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd90      	pop	{r4, r7, pc}

0800deac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	460b      	mov	r3, r1
 800deb6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800debe:	78fa      	ldrb	r2, [r7, #3]
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f4 fa3e 	bl	8002344 <HAL_HCD_HC_GetURBState>
 800dec8:	4603      	mov	r3, r0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b082      	sub	sp, #8
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
 800deda:	460b      	mov	r3, r1
 800dedc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d103      	bne.n	800def0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800dee8:	78fb      	ldrb	r3, [r7, #3]
 800deea:	4618      	mov	r0, r3
 800deec:	f000 f8a6 	bl	800e03c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800def0:	20c8      	movs	r0, #200	@ 0xc8
 800def2:	f7f3 fafd 	bl	80014f0 <HAL_Delay>
  return USBH_OK;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3708      	adds	r7, #8
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800df00:	b480      	push	{r7}
 800df02:	b085      	sub	sp, #20
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	70fb      	strb	r3, [r7, #3]
 800df0c:	4613      	mov	r3, r2
 800df0e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800df16:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800df18:	78fa      	ldrb	r2, [r7, #3]
 800df1a:	68f9      	ldr	r1, [r7, #12]
 800df1c:	4613      	mov	r3, r2
 800df1e:	011b      	lsls	r3, r3, #4
 800df20:	1a9b      	subs	r3, r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	3317      	adds	r3, #23
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800df2e:	78fa      	ldrb	r2, [r7, #3]
 800df30:	68f9      	ldr	r1, [r7, #12]
 800df32:	4613      	mov	r3, r2
 800df34:	011b      	lsls	r3, r3, #4
 800df36:	1a9b      	subs	r3, r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	440b      	add	r3, r1
 800df3c:	333c      	adds	r3, #60	@ 0x3c
 800df3e:	78ba      	ldrb	r2, [r7, #2]
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	e009      	b.n	800df58 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800df44:	78fa      	ldrb	r2, [r7, #3]
 800df46:	68f9      	ldr	r1, [r7, #12]
 800df48:	4613      	mov	r3, r2
 800df4a:	011b      	lsls	r3, r3, #4
 800df4c:	1a9b      	subs	r3, r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	440b      	add	r3, r1
 800df52:	333d      	adds	r3, #61	@ 0x3d
 800df54:	78ba      	ldrb	r2, [r7, #2]
 800df56:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df66:	b480      	push	{r7}
 800df68:	b085      	sub	sp, #20
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	460b      	mov	r3, r1
 800df70:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800df7c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800df7e:	78fa      	ldrb	r2, [r7, #3]
 800df80:	68b9      	ldr	r1, [r7, #8]
 800df82:	4613      	mov	r3, r2
 800df84:	011b      	lsls	r3, r3, #4
 800df86:	1a9b      	subs	r3, r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	440b      	add	r3, r1
 800df8c:	3317      	adds	r3, #23
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00a      	beq.n	800dfaa <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800df94:	78fa      	ldrb	r2, [r7, #3]
 800df96:	68b9      	ldr	r1, [r7, #8]
 800df98:	4613      	mov	r3, r2
 800df9a:	011b      	lsls	r3, r3, #4
 800df9c:	1a9b      	subs	r3, r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	440b      	add	r3, r1
 800dfa2:	333c      	adds	r3, #60	@ 0x3c
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	73fb      	strb	r3, [r7, #15]
 800dfa8:	e009      	b.n	800dfbe <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800dfaa:	78fa      	ldrb	r2, [r7, #3]
 800dfac:	68b9      	ldr	r1, [r7, #8]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	011b      	lsls	r3, r3, #4
 800dfb2:	1a9b      	subs	r3, r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	440b      	add	r3, r1
 800dfb8:	333d      	adds	r3, #61	@ 0x3d
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800dfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3714      	adds	r7, #20
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7f3 fa8b 	bl	80014f0 <HAL_Delay>
}
 800dfda:	bf00      	nop
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfee:	2300      	movs	r3, #0
 800dff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d817      	bhi.n	800e028 <USBH_Get_USB_Status+0x44>
 800dff8:	a201      	add	r2, pc, #4	@ (adr r2, 800e000 <USBH_Get_USB_Status+0x1c>)
 800dffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffe:	bf00      	nop
 800e000:	0800e011 	.word	0x0800e011
 800e004:	0800e017 	.word	0x0800e017
 800e008:	0800e01d 	.word	0x0800e01d
 800e00c:	0800e023 	.word	0x0800e023
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]
    break;
 800e014:	e00b      	b.n	800e02e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e016:	2302      	movs	r3, #2
 800e018:	73fb      	strb	r3, [r7, #15]
    break;
 800e01a:	e008      	b.n	800e02e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e01c:	2301      	movs	r3, #1
 800e01e:	73fb      	strb	r3, [r7, #15]
    break;
 800e020:	e005      	b.n	800e02e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e022:	2302      	movs	r3, #2
 800e024:	73fb      	strb	r3, [r7, #15]
    break;
 800e026:	e002      	b.n	800e02e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e028:	2302      	movs	r3, #2
 800e02a:	73fb      	strb	r3, [r7, #15]
    break;
 800e02c:	bf00      	nop
  }
  return usb_status;
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d102      	bne.n	800e056 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e050:	2300      	movs	r3, #0
 800e052:	73fb      	strb	r3, [r7, #15]
 800e054:	e001      	b.n	800e05a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e056:	2301      	movs	r3, #1
 800e058:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e05a:	7bfb      	ldrb	r3, [r7, #15]
 800e05c:	461a      	mov	r2, r3
 800e05e:	2101      	movs	r1, #1
 800e060:	4803      	ldr	r0, [pc, #12]	@ (800e070 <MX_DriverVbusFS+0x34>)
 800e062:	f7f3 fd17 	bl	8001a94 <HAL_GPIO_WritePin>
}
 800e066:	bf00      	nop
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	40020800 	.word	0x40020800

0800e074 <malloc>:
 800e074:	4b02      	ldr	r3, [pc, #8]	@ (800e080 <malloc+0xc>)
 800e076:	4601      	mov	r1, r0
 800e078:	6818      	ldr	r0, [r3, #0]
 800e07a:	f000 b82d 	b.w	800e0d8 <_malloc_r>
 800e07e:	bf00      	nop
 800e080:	2000002c 	.word	0x2000002c

0800e084 <free>:
 800e084:	4b02      	ldr	r3, [pc, #8]	@ (800e090 <free+0xc>)
 800e086:	4601      	mov	r1, r0
 800e088:	6818      	ldr	r0, [r3, #0]
 800e08a:	f000 b923 	b.w	800e2d4 <_free_r>
 800e08e:	bf00      	nop
 800e090:	2000002c 	.word	0x2000002c

0800e094 <sbrk_aligned>:
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	4e0f      	ldr	r6, [pc, #60]	@ (800e0d4 <sbrk_aligned+0x40>)
 800e098:	460c      	mov	r4, r1
 800e09a:	6831      	ldr	r1, [r6, #0]
 800e09c:	4605      	mov	r5, r0
 800e09e:	b911      	cbnz	r1, 800e0a6 <sbrk_aligned+0x12>
 800e0a0:	f000 f8ce 	bl	800e240 <_sbrk_r>
 800e0a4:	6030      	str	r0, [r6, #0]
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f000 f8c9 	bl	800e240 <_sbrk_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	d103      	bne.n	800e0ba <sbrk_aligned+0x26>
 800e0b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ba:	1cc4      	adds	r4, r0, #3
 800e0bc:	f024 0403 	bic.w	r4, r4, #3
 800e0c0:	42a0      	cmp	r0, r4
 800e0c2:	d0f8      	beq.n	800e0b6 <sbrk_aligned+0x22>
 800e0c4:	1a21      	subs	r1, r4, r0
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f000 f8ba 	bl	800e240 <_sbrk_r>
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d1f2      	bne.n	800e0b6 <sbrk_aligned+0x22>
 800e0d0:	e7ef      	b.n	800e0b2 <sbrk_aligned+0x1e>
 800e0d2:	bf00      	nop
 800e0d4:	20002ed0 	.word	0x20002ed0

0800e0d8 <_malloc_r>:
 800e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	1ccd      	adds	r5, r1, #3
 800e0de:	f025 0503 	bic.w	r5, r5, #3
 800e0e2:	3508      	adds	r5, #8
 800e0e4:	2d0c      	cmp	r5, #12
 800e0e6:	bf38      	it	cc
 800e0e8:	250c      	movcc	r5, #12
 800e0ea:	2d00      	cmp	r5, #0
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	db01      	blt.n	800e0f4 <_malloc_r+0x1c>
 800e0f0:	42a9      	cmp	r1, r5
 800e0f2:	d904      	bls.n	800e0fe <_malloc_r+0x26>
 800e0f4:	230c      	movs	r3, #12
 800e0f6:	6033      	str	r3, [r6, #0]
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1d4 <_malloc_r+0xfc>
 800e102:	f000 f869 	bl	800e1d8 <__malloc_lock>
 800e106:	f8d8 3000 	ldr.w	r3, [r8]
 800e10a:	461c      	mov	r4, r3
 800e10c:	bb44      	cbnz	r4, 800e160 <_malloc_r+0x88>
 800e10e:	4629      	mov	r1, r5
 800e110:	4630      	mov	r0, r6
 800e112:	f7ff ffbf 	bl	800e094 <sbrk_aligned>
 800e116:	1c43      	adds	r3, r0, #1
 800e118:	4604      	mov	r4, r0
 800e11a:	d158      	bne.n	800e1ce <_malloc_r+0xf6>
 800e11c:	f8d8 4000 	ldr.w	r4, [r8]
 800e120:	4627      	mov	r7, r4
 800e122:	2f00      	cmp	r7, #0
 800e124:	d143      	bne.n	800e1ae <_malloc_r+0xd6>
 800e126:	2c00      	cmp	r4, #0
 800e128:	d04b      	beq.n	800e1c2 <_malloc_r+0xea>
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	4639      	mov	r1, r7
 800e12e:	4630      	mov	r0, r6
 800e130:	eb04 0903 	add.w	r9, r4, r3
 800e134:	f000 f884 	bl	800e240 <_sbrk_r>
 800e138:	4581      	cmp	r9, r0
 800e13a:	d142      	bne.n	800e1c2 <_malloc_r+0xea>
 800e13c:	6821      	ldr	r1, [r4, #0]
 800e13e:	1a6d      	subs	r5, r5, r1
 800e140:	4629      	mov	r1, r5
 800e142:	4630      	mov	r0, r6
 800e144:	f7ff ffa6 	bl	800e094 <sbrk_aligned>
 800e148:	3001      	adds	r0, #1
 800e14a:	d03a      	beq.n	800e1c2 <_malloc_r+0xea>
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	442b      	add	r3, r5
 800e150:	6023      	str	r3, [r4, #0]
 800e152:	f8d8 3000 	ldr.w	r3, [r8]
 800e156:	685a      	ldr	r2, [r3, #4]
 800e158:	bb62      	cbnz	r2, 800e1b4 <_malloc_r+0xdc>
 800e15a:	f8c8 7000 	str.w	r7, [r8]
 800e15e:	e00f      	b.n	800e180 <_malloc_r+0xa8>
 800e160:	6822      	ldr	r2, [r4, #0]
 800e162:	1b52      	subs	r2, r2, r5
 800e164:	d420      	bmi.n	800e1a8 <_malloc_r+0xd0>
 800e166:	2a0b      	cmp	r2, #11
 800e168:	d917      	bls.n	800e19a <_malloc_r+0xc2>
 800e16a:	1961      	adds	r1, r4, r5
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	6025      	str	r5, [r4, #0]
 800e170:	bf18      	it	ne
 800e172:	6059      	strne	r1, [r3, #4]
 800e174:	6863      	ldr	r3, [r4, #4]
 800e176:	bf08      	it	eq
 800e178:	f8c8 1000 	streq.w	r1, [r8]
 800e17c:	5162      	str	r2, [r4, r5]
 800e17e:	604b      	str	r3, [r1, #4]
 800e180:	4630      	mov	r0, r6
 800e182:	f000 f82f 	bl	800e1e4 <__malloc_unlock>
 800e186:	f104 000b 	add.w	r0, r4, #11
 800e18a:	1d23      	adds	r3, r4, #4
 800e18c:	f020 0007 	bic.w	r0, r0, #7
 800e190:	1ac2      	subs	r2, r0, r3
 800e192:	bf1c      	itt	ne
 800e194:	1a1b      	subne	r3, r3, r0
 800e196:	50a3      	strne	r3, [r4, r2]
 800e198:	e7af      	b.n	800e0fa <_malloc_r+0x22>
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	42a3      	cmp	r3, r4
 800e19e:	bf0c      	ite	eq
 800e1a0:	f8c8 2000 	streq.w	r2, [r8]
 800e1a4:	605a      	strne	r2, [r3, #4]
 800e1a6:	e7eb      	b.n	800e180 <_malloc_r+0xa8>
 800e1a8:	4623      	mov	r3, r4
 800e1aa:	6864      	ldr	r4, [r4, #4]
 800e1ac:	e7ae      	b.n	800e10c <_malloc_r+0x34>
 800e1ae:	463c      	mov	r4, r7
 800e1b0:	687f      	ldr	r7, [r7, #4]
 800e1b2:	e7b6      	b.n	800e122 <_malloc_r+0x4a>
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	d1fb      	bne.n	800e1b4 <_malloc_r+0xdc>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	6053      	str	r3, [r2, #4]
 800e1c0:	e7de      	b.n	800e180 <_malloc_r+0xa8>
 800e1c2:	230c      	movs	r3, #12
 800e1c4:	6033      	str	r3, [r6, #0]
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f000 f80c 	bl	800e1e4 <__malloc_unlock>
 800e1cc:	e794      	b.n	800e0f8 <_malloc_r+0x20>
 800e1ce:	6005      	str	r5, [r0, #0]
 800e1d0:	e7d6      	b.n	800e180 <_malloc_r+0xa8>
 800e1d2:	bf00      	nop
 800e1d4:	20002ed4 	.word	0x20002ed4

0800e1d8 <__malloc_lock>:
 800e1d8:	4801      	ldr	r0, [pc, #4]	@ (800e1e0 <__malloc_lock+0x8>)
 800e1da:	f000 b86b 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800e1de:	bf00      	nop
 800e1e0:	20003014 	.word	0x20003014

0800e1e4 <__malloc_unlock>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	@ (800e1ec <__malloc_unlock+0x8>)
 800e1e6:	f000 b866 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	20003014 	.word	0x20003014

0800e1f0 <siprintf>:
 800e1f0:	b40e      	push	{r1, r2, r3}
 800e1f2:	b500      	push	{lr}
 800e1f4:	b09c      	sub	sp, #112	@ 0x70
 800e1f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e1f8:	9002      	str	r0, [sp, #8]
 800e1fa:	9006      	str	r0, [sp, #24]
 800e1fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e200:	4809      	ldr	r0, [pc, #36]	@ (800e228 <siprintf+0x38>)
 800e202:	9107      	str	r1, [sp, #28]
 800e204:	9104      	str	r1, [sp, #16]
 800e206:	4909      	ldr	r1, [pc, #36]	@ (800e22c <siprintf+0x3c>)
 800e208:	f853 2b04 	ldr.w	r2, [r3], #4
 800e20c:	9105      	str	r1, [sp, #20]
 800e20e:	6800      	ldr	r0, [r0, #0]
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	a902      	add	r1, sp, #8
 800e214:	f000 f904 	bl	800e420 <_svfiprintf_r>
 800e218:	9b02      	ldr	r3, [sp, #8]
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	b01c      	add	sp, #112	@ 0x70
 800e220:	f85d eb04 	ldr.w	lr, [sp], #4
 800e224:	b003      	add	sp, #12
 800e226:	4770      	bx	lr
 800e228:	2000002c 	.word	0x2000002c
 800e22c:	ffff0208 	.word	0xffff0208

0800e230 <memset>:
 800e230:	4402      	add	r2, r0
 800e232:	4603      	mov	r3, r0
 800e234:	4293      	cmp	r3, r2
 800e236:	d100      	bne.n	800e23a <memset+0xa>
 800e238:	4770      	bx	lr
 800e23a:	f803 1b01 	strb.w	r1, [r3], #1
 800e23e:	e7f9      	b.n	800e234 <memset+0x4>

0800e240 <_sbrk_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d06      	ldr	r5, [pc, #24]	@ (800e25c <_sbrk_r+0x1c>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	f7f3 f86c 	bl	8001328 <_sbrk>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_sbrk_r+0x1a>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_sbrk_r+0x1a>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	20003010 	.word	0x20003010

0800e260 <__errno>:
 800e260:	4b01      	ldr	r3, [pc, #4]	@ (800e268 <__errno+0x8>)
 800e262:	6818      	ldr	r0, [r3, #0]
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	2000002c 	.word	0x2000002c

0800e26c <__libc_init_array>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	4d0d      	ldr	r5, [pc, #52]	@ (800e2a4 <__libc_init_array+0x38>)
 800e270:	4c0d      	ldr	r4, [pc, #52]	@ (800e2a8 <__libc_init_array+0x3c>)
 800e272:	1b64      	subs	r4, r4, r5
 800e274:	10a4      	asrs	r4, r4, #2
 800e276:	2600      	movs	r6, #0
 800e278:	42a6      	cmp	r6, r4
 800e27a:	d109      	bne.n	800e290 <__libc_init_array+0x24>
 800e27c:	4d0b      	ldr	r5, [pc, #44]	@ (800e2ac <__libc_init_array+0x40>)
 800e27e:	4c0c      	ldr	r4, [pc, #48]	@ (800e2b0 <__libc_init_array+0x44>)
 800e280:	f000 fba8 	bl	800e9d4 <_init>
 800e284:	1b64      	subs	r4, r4, r5
 800e286:	10a4      	asrs	r4, r4, #2
 800e288:	2600      	movs	r6, #0
 800e28a:	42a6      	cmp	r6, r4
 800e28c:	d105      	bne.n	800e29a <__libc_init_array+0x2e>
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	f855 3b04 	ldr.w	r3, [r5], #4
 800e294:	4798      	blx	r3
 800e296:	3601      	adds	r6, #1
 800e298:	e7ee      	b.n	800e278 <__libc_init_array+0xc>
 800e29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29e:	4798      	blx	r3
 800e2a0:	3601      	adds	r6, #1
 800e2a2:	e7f2      	b.n	800e28a <__libc_init_array+0x1e>
 800e2a4:	0800f348 	.word	0x0800f348
 800e2a8:	0800f348 	.word	0x0800f348
 800e2ac:	0800f348 	.word	0x0800f348
 800e2b0:	0800f34c 	.word	0x0800f34c

0800e2b4 <__retarget_lock_acquire_recursive>:
 800e2b4:	4770      	bx	lr

0800e2b6 <__retarget_lock_release_recursive>:
 800e2b6:	4770      	bx	lr

0800e2b8 <memcpy>:
 800e2b8:	440a      	add	r2, r1
 800e2ba:	4291      	cmp	r1, r2
 800e2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2c0:	d100      	bne.n	800e2c4 <memcpy+0xc>
 800e2c2:	4770      	bx	lr
 800e2c4:	b510      	push	{r4, lr}
 800e2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2ce:	4291      	cmp	r1, r2
 800e2d0:	d1f9      	bne.n	800e2c6 <memcpy+0xe>
 800e2d2:	bd10      	pop	{r4, pc}

0800e2d4 <_free_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	2900      	cmp	r1, #0
 800e2da:	d041      	beq.n	800e360 <_free_r+0x8c>
 800e2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e0:	1f0c      	subs	r4, r1, #4
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	bfb8      	it	lt
 800e2e6:	18e4      	addlt	r4, r4, r3
 800e2e8:	f7ff ff76 	bl	800e1d8 <__malloc_lock>
 800e2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800e364 <_free_r+0x90>)
 800e2ee:	6813      	ldr	r3, [r2, #0]
 800e2f0:	b933      	cbnz	r3, 800e300 <_free_r+0x2c>
 800e2f2:	6063      	str	r3, [r4, #4]
 800e2f4:	6014      	str	r4, [r2, #0]
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fc:	f7ff bf72 	b.w	800e1e4 <__malloc_unlock>
 800e300:	42a3      	cmp	r3, r4
 800e302:	d908      	bls.n	800e316 <_free_r+0x42>
 800e304:	6820      	ldr	r0, [r4, #0]
 800e306:	1821      	adds	r1, r4, r0
 800e308:	428b      	cmp	r3, r1
 800e30a:	bf01      	itttt	eq
 800e30c:	6819      	ldreq	r1, [r3, #0]
 800e30e:	685b      	ldreq	r3, [r3, #4]
 800e310:	1809      	addeq	r1, r1, r0
 800e312:	6021      	streq	r1, [r4, #0]
 800e314:	e7ed      	b.n	800e2f2 <_free_r+0x1e>
 800e316:	461a      	mov	r2, r3
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	b10b      	cbz	r3, 800e320 <_free_r+0x4c>
 800e31c:	42a3      	cmp	r3, r4
 800e31e:	d9fa      	bls.n	800e316 <_free_r+0x42>
 800e320:	6811      	ldr	r1, [r2, #0]
 800e322:	1850      	adds	r0, r2, r1
 800e324:	42a0      	cmp	r0, r4
 800e326:	d10b      	bne.n	800e340 <_free_r+0x6c>
 800e328:	6820      	ldr	r0, [r4, #0]
 800e32a:	4401      	add	r1, r0
 800e32c:	1850      	adds	r0, r2, r1
 800e32e:	4283      	cmp	r3, r0
 800e330:	6011      	str	r1, [r2, #0]
 800e332:	d1e0      	bne.n	800e2f6 <_free_r+0x22>
 800e334:	6818      	ldr	r0, [r3, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	6053      	str	r3, [r2, #4]
 800e33a:	4408      	add	r0, r1
 800e33c:	6010      	str	r0, [r2, #0]
 800e33e:	e7da      	b.n	800e2f6 <_free_r+0x22>
 800e340:	d902      	bls.n	800e348 <_free_r+0x74>
 800e342:	230c      	movs	r3, #12
 800e344:	602b      	str	r3, [r5, #0]
 800e346:	e7d6      	b.n	800e2f6 <_free_r+0x22>
 800e348:	6820      	ldr	r0, [r4, #0]
 800e34a:	1821      	adds	r1, r4, r0
 800e34c:	428b      	cmp	r3, r1
 800e34e:	bf04      	itt	eq
 800e350:	6819      	ldreq	r1, [r3, #0]
 800e352:	685b      	ldreq	r3, [r3, #4]
 800e354:	6063      	str	r3, [r4, #4]
 800e356:	bf04      	itt	eq
 800e358:	1809      	addeq	r1, r1, r0
 800e35a:	6021      	streq	r1, [r4, #0]
 800e35c:	6054      	str	r4, [r2, #4]
 800e35e:	e7ca      	b.n	800e2f6 <_free_r+0x22>
 800e360:	bd38      	pop	{r3, r4, r5, pc}
 800e362:	bf00      	nop
 800e364:	20002ed4 	.word	0x20002ed4

0800e368 <__ssputs_r>:
 800e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e36c:	688e      	ldr	r6, [r1, #8]
 800e36e:	461f      	mov	r7, r3
 800e370:	42be      	cmp	r6, r7
 800e372:	680b      	ldr	r3, [r1, #0]
 800e374:	4682      	mov	sl, r0
 800e376:	460c      	mov	r4, r1
 800e378:	4690      	mov	r8, r2
 800e37a:	d82d      	bhi.n	800e3d8 <__ssputs_r+0x70>
 800e37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e384:	d026      	beq.n	800e3d4 <__ssputs_r+0x6c>
 800e386:	6965      	ldr	r5, [r4, #20]
 800e388:	6909      	ldr	r1, [r1, #16]
 800e38a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e38e:	eba3 0901 	sub.w	r9, r3, r1
 800e392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e396:	1c7b      	adds	r3, r7, #1
 800e398:	444b      	add	r3, r9
 800e39a:	106d      	asrs	r5, r5, #1
 800e39c:	429d      	cmp	r5, r3
 800e39e:	bf38      	it	cc
 800e3a0:	461d      	movcc	r5, r3
 800e3a2:	0553      	lsls	r3, r2, #21
 800e3a4:	d527      	bpl.n	800e3f6 <__ssputs_r+0x8e>
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7ff fe96 	bl	800e0d8 <_malloc_r>
 800e3ac:	4606      	mov	r6, r0
 800e3ae:	b360      	cbz	r0, 800e40a <__ssputs_r+0xa2>
 800e3b0:	6921      	ldr	r1, [r4, #16]
 800e3b2:	464a      	mov	r2, r9
 800e3b4:	f7ff ff80 	bl	800e2b8 <memcpy>
 800e3b8:	89a3      	ldrh	r3, [r4, #12]
 800e3ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3c2:	81a3      	strh	r3, [r4, #12]
 800e3c4:	6126      	str	r6, [r4, #16]
 800e3c6:	6165      	str	r5, [r4, #20]
 800e3c8:	444e      	add	r6, r9
 800e3ca:	eba5 0509 	sub.w	r5, r5, r9
 800e3ce:	6026      	str	r6, [r4, #0]
 800e3d0:	60a5      	str	r5, [r4, #8]
 800e3d2:	463e      	mov	r6, r7
 800e3d4:	42be      	cmp	r6, r7
 800e3d6:	d900      	bls.n	800e3da <__ssputs_r+0x72>
 800e3d8:	463e      	mov	r6, r7
 800e3da:	6820      	ldr	r0, [r4, #0]
 800e3dc:	4632      	mov	r2, r6
 800e3de:	4641      	mov	r1, r8
 800e3e0:	f000 faa8 	bl	800e934 <memmove>
 800e3e4:	68a3      	ldr	r3, [r4, #8]
 800e3e6:	1b9b      	subs	r3, r3, r6
 800e3e8:	60a3      	str	r3, [r4, #8]
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	4433      	add	r3, r6
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f6:	462a      	mov	r2, r5
 800e3f8:	f000 fab6 	bl	800e968 <_realloc_r>
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d1e0      	bne.n	800e3c4 <__ssputs_r+0x5c>
 800e402:	6921      	ldr	r1, [r4, #16]
 800e404:	4650      	mov	r0, sl
 800e406:	f7ff ff65 	bl	800e2d4 <_free_r>
 800e40a:	230c      	movs	r3, #12
 800e40c:	f8ca 3000 	str.w	r3, [sl]
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e416:	81a3      	strh	r3, [r4, #12]
 800e418:	f04f 30ff 	mov.w	r0, #4294967295
 800e41c:	e7e9      	b.n	800e3f2 <__ssputs_r+0x8a>
	...

0800e420 <_svfiprintf_r>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	4698      	mov	r8, r3
 800e426:	898b      	ldrh	r3, [r1, #12]
 800e428:	061b      	lsls	r3, r3, #24
 800e42a:	b09d      	sub	sp, #116	@ 0x74
 800e42c:	4607      	mov	r7, r0
 800e42e:	460d      	mov	r5, r1
 800e430:	4614      	mov	r4, r2
 800e432:	d510      	bpl.n	800e456 <_svfiprintf_r+0x36>
 800e434:	690b      	ldr	r3, [r1, #16]
 800e436:	b973      	cbnz	r3, 800e456 <_svfiprintf_r+0x36>
 800e438:	2140      	movs	r1, #64	@ 0x40
 800e43a:	f7ff fe4d 	bl	800e0d8 <_malloc_r>
 800e43e:	6028      	str	r0, [r5, #0]
 800e440:	6128      	str	r0, [r5, #16]
 800e442:	b930      	cbnz	r0, 800e452 <_svfiprintf_r+0x32>
 800e444:	230c      	movs	r3, #12
 800e446:	603b      	str	r3, [r7, #0]
 800e448:	f04f 30ff 	mov.w	r0, #4294967295
 800e44c:	b01d      	add	sp, #116	@ 0x74
 800e44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e452:	2340      	movs	r3, #64	@ 0x40
 800e454:	616b      	str	r3, [r5, #20]
 800e456:	2300      	movs	r3, #0
 800e458:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45a:	2320      	movs	r3, #32
 800e45c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e460:	f8cd 800c 	str.w	r8, [sp, #12]
 800e464:	2330      	movs	r3, #48	@ 0x30
 800e466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e604 <_svfiprintf_r+0x1e4>
 800e46a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e46e:	f04f 0901 	mov.w	r9, #1
 800e472:	4623      	mov	r3, r4
 800e474:	469a      	mov	sl, r3
 800e476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e47a:	b10a      	cbz	r2, 800e480 <_svfiprintf_r+0x60>
 800e47c:	2a25      	cmp	r2, #37	@ 0x25
 800e47e:	d1f9      	bne.n	800e474 <_svfiprintf_r+0x54>
 800e480:	ebba 0b04 	subs.w	fp, sl, r4
 800e484:	d00b      	beq.n	800e49e <_svfiprintf_r+0x7e>
 800e486:	465b      	mov	r3, fp
 800e488:	4622      	mov	r2, r4
 800e48a:	4629      	mov	r1, r5
 800e48c:	4638      	mov	r0, r7
 800e48e:	f7ff ff6b 	bl	800e368 <__ssputs_r>
 800e492:	3001      	adds	r0, #1
 800e494:	f000 80a7 	beq.w	800e5e6 <_svfiprintf_r+0x1c6>
 800e498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e49a:	445a      	add	r2, fp
 800e49c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e49e:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 809f 	beq.w	800e5e6 <_svfiprintf_r+0x1c6>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4b2:	f10a 0a01 	add.w	sl, sl, #1
 800e4b6:	9304      	str	r3, [sp, #16]
 800e4b8:	9307      	str	r3, [sp, #28]
 800e4ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4be:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4c0:	4654      	mov	r4, sl
 800e4c2:	2205      	movs	r2, #5
 800e4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c8:	484e      	ldr	r0, [pc, #312]	@ (800e604 <_svfiprintf_r+0x1e4>)
 800e4ca:	f7f1 fe99 	bl	8000200 <memchr>
 800e4ce:	9a04      	ldr	r2, [sp, #16]
 800e4d0:	b9d8      	cbnz	r0, 800e50a <_svfiprintf_r+0xea>
 800e4d2:	06d0      	lsls	r0, r2, #27
 800e4d4:	bf44      	itt	mi
 800e4d6:	2320      	movmi	r3, #32
 800e4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4dc:	0711      	lsls	r1, r2, #28
 800e4de:	bf44      	itt	mi
 800e4e0:	232b      	movmi	r3, #43	@ 0x2b
 800e4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ec:	d015      	beq.n	800e51a <_svfiprintf_r+0xfa>
 800e4ee:	9a07      	ldr	r2, [sp, #28]
 800e4f0:	4654      	mov	r4, sl
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	f04f 0c0a 	mov.w	ip, #10
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4fe:	3b30      	subs	r3, #48	@ 0x30
 800e500:	2b09      	cmp	r3, #9
 800e502:	d94b      	bls.n	800e59c <_svfiprintf_r+0x17c>
 800e504:	b1b0      	cbz	r0, 800e534 <_svfiprintf_r+0x114>
 800e506:	9207      	str	r2, [sp, #28]
 800e508:	e014      	b.n	800e534 <_svfiprintf_r+0x114>
 800e50a:	eba0 0308 	sub.w	r3, r0, r8
 800e50e:	fa09 f303 	lsl.w	r3, r9, r3
 800e512:	4313      	orrs	r3, r2
 800e514:	9304      	str	r3, [sp, #16]
 800e516:	46a2      	mov	sl, r4
 800e518:	e7d2      	b.n	800e4c0 <_svfiprintf_r+0xa0>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	1d19      	adds	r1, r3, #4
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	9103      	str	r1, [sp, #12]
 800e522:	2b00      	cmp	r3, #0
 800e524:	bfbb      	ittet	lt
 800e526:	425b      	neglt	r3, r3
 800e528:	f042 0202 	orrlt.w	r2, r2, #2
 800e52c:	9307      	strge	r3, [sp, #28]
 800e52e:	9307      	strlt	r3, [sp, #28]
 800e530:	bfb8      	it	lt
 800e532:	9204      	strlt	r2, [sp, #16]
 800e534:	7823      	ldrb	r3, [r4, #0]
 800e536:	2b2e      	cmp	r3, #46	@ 0x2e
 800e538:	d10a      	bne.n	800e550 <_svfiprintf_r+0x130>
 800e53a:	7863      	ldrb	r3, [r4, #1]
 800e53c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e53e:	d132      	bne.n	800e5a6 <_svfiprintf_r+0x186>
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	1d1a      	adds	r2, r3, #4
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	9203      	str	r2, [sp, #12]
 800e548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e54c:	3402      	adds	r4, #2
 800e54e:	9305      	str	r3, [sp, #20]
 800e550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e614 <_svfiprintf_r+0x1f4>
 800e554:	7821      	ldrb	r1, [r4, #0]
 800e556:	2203      	movs	r2, #3
 800e558:	4650      	mov	r0, sl
 800e55a:	f7f1 fe51 	bl	8000200 <memchr>
 800e55e:	b138      	cbz	r0, 800e570 <_svfiprintf_r+0x150>
 800e560:	9b04      	ldr	r3, [sp, #16]
 800e562:	eba0 000a 	sub.w	r0, r0, sl
 800e566:	2240      	movs	r2, #64	@ 0x40
 800e568:	4082      	lsls	r2, r0
 800e56a:	4313      	orrs	r3, r2
 800e56c:	3401      	adds	r4, #1
 800e56e:	9304      	str	r3, [sp, #16]
 800e570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e574:	4824      	ldr	r0, [pc, #144]	@ (800e608 <_svfiprintf_r+0x1e8>)
 800e576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e57a:	2206      	movs	r2, #6
 800e57c:	f7f1 fe40 	bl	8000200 <memchr>
 800e580:	2800      	cmp	r0, #0
 800e582:	d036      	beq.n	800e5f2 <_svfiprintf_r+0x1d2>
 800e584:	4b21      	ldr	r3, [pc, #132]	@ (800e60c <_svfiprintf_r+0x1ec>)
 800e586:	bb1b      	cbnz	r3, 800e5d0 <_svfiprintf_r+0x1b0>
 800e588:	9b03      	ldr	r3, [sp, #12]
 800e58a:	3307      	adds	r3, #7
 800e58c:	f023 0307 	bic.w	r3, r3, #7
 800e590:	3308      	adds	r3, #8
 800e592:	9303      	str	r3, [sp, #12]
 800e594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e596:	4433      	add	r3, r6
 800e598:	9309      	str	r3, [sp, #36]	@ 0x24
 800e59a:	e76a      	b.n	800e472 <_svfiprintf_r+0x52>
 800e59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	2001      	movs	r0, #1
 800e5a4:	e7a8      	b.n	800e4f8 <_svfiprintf_r+0xd8>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	3401      	adds	r4, #1
 800e5aa:	9305      	str	r3, [sp, #20]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	f04f 0c0a 	mov.w	ip, #10
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5b8:	3a30      	subs	r2, #48	@ 0x30
 800e5ba:	2a09      	cmp	r2, #9
 800e5bc:	d903      	bls.n	800e5c6 <_svfiprintf_r+0x1a6>
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d0c6      	beq.n	800e550 <_svfiprintf_r+0x130>
 800e5c2:	9105      	str	r1, [sp, #20]
 800e5c4:	e7c4      	b.n	800e550 <_svfiprintf_r+0x130>
 800e5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e7f0      	b.n	800e5b2 <_svfiprintf_r+0x192>
 800e5d0:	ab03      	add	r3, sp, #12
 800e5d2:	9300      	str	r3, [sp, #0]
 800e5d4:	462a      	mov	r2, r5
 800e5d6:	4b0e      	ldr	r3, [pc, #56]	@ (800e610 <_svfiprintf_r+0x1f0>)
 800e5d8:	a904      	add	r1, sp, #16
 800e5da:	4638      	mov	r0, r7
 800e5dc:	f3af 8000 	nop.w
 800e5e0:	1c42      	adds	r2, r0, #1
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	d1d6      	bne.n	800e594 <_svfiprintf_r+0x174>
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	065b      	lsls	r3, r3, #25
 800e5ea:	f53f af2d 	bmi.w	800e448 <_svfiprintf_r+0x28>
 800e5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5f0:	e72c      	b.n	800e44c <_svfiprintf_r+0x2c>
 800e5f2:	ab03      	add	r3, sp, #12
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	462a      	mov	r2, r5
 800e5f8:	4b05      	ldr	r3, [pc, #20]	@ (800e610 <_svfiprintf_r+0x1f0>)
 800e5fa:	a904      	add	r1, sp, #16
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	f000 f879 	bl	800e6f4 <_printf_i>
 800e602:	e7ed      	b.n	800e5e0 <_svfiprintf_r+0x1c0>
 800e604:	0800f30d 	.word	0x0800f30d
 800e608:	0800f317 	.word	0x0800f317
 800e60c:	00000000 	.word	0x00000000
 800e610:	0800e369 	.word	0x0800e369
 800e614:	0800f313 	.word	0x0800f313

0800e618 <_printf_common>:
 800e618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e61c:	4616      	mov	r6, r2
 800e61e:	4698      	mov	r8, r3
 800e620:	688a      	ldr	r2, [r1, #8]
 800e622:	690b      	ldr	r3, [r1, #16]
 800e624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e628:	4293      	cmp	r3, r2
 800e62a:	bfb8      	it	lt
 800e62c:	4613      	movlt	r3, r2
 800e62e:	6033      	str	r3, [r6, #0]
 800e630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e634:	4607      	mov	r7, r0
 800e636:	460c      	mov	r4, r1
 800e638:	b10a      	cbz	r2, 800e63e <_printf_common+0x26>
 800e63a:	3301      	adds	r3, #1
 800e63c:	6033      	str	r3, [r6, #0]
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	0699      	lsls	r1, r3, #26
 800e642:	bf42      	ittt	mi
 800e644:	6833      	ldrmi	r3, [r6, #0]
 800e646:	3302      	addmi	r3, #2
 800e648:	6033      	strmi	r3, [r6, #0]
 800e64a:	6825      	ldr	r5, [r4, #0]
 800e64c:	f015 0506 	ands.w	r5, r5, #6
 800e650:	d106      	bne.n	800e660 <_printf_common+0x48>
 800e652:	f104 0a19 	add.w	sl, r4, #25
 800e656:	68e3      	ldr	r3, [r4, #12]
 800e658:	6832      	ldr	r2, [r6, #0]
 800e65a:	1a9b      	subs	r3, r3, r2
 800e65c:	42ab      	cmp	r3, r5
 800e65e:	dc26      	bgt.n	800e6ae <_printf_common+0x96>
 800e660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e664:	6822      	ldr	r2, [r4, #0]
 800e666:	3b00      	subs	r3, #0
 800e668:	bf18      	it	ne
 800e66a:	2301      	movne	r3, #1
 800e66c:	0692      	lsls	r2, r2, #26
 800e66e:	d42b      	bmi.n	800e6c8 <_printf_common+0xb0>
 800e670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e674:	4641      	mov	r1, r8
 800e676:	4638      	mov	r0, r7
 800e678:	47c8      	blx	r9
 800e67a:	3001      	adds	r0, #1
 800e67c:	d01e      	beq.n	800e6bc <_printf_common+0xa4>
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	6922      	ldr	r2, [r4, #16]
 800e682:	f003 0306 	and.w	r3, r3, #6
 800e686:	2b04      	cmp	r3, #4
 800e688:	bf02      	ittt	eq
 800e68a:	68e5      	ldreq	r5, [r4, #12]
 800e68c:	6833      	ldreq	r3, [r6, #0]
 800e68e:	1aed      	subeq	r5, r5, r3
 800e690:	68a3      	ldr	r3, [r4, #8]
 800e692:	bf0c      	ite	eq
 800e694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e698:	2500      	movne	r5, #0
 800e69a:	4293      	cmp	r3, r2
 800e69c:	bfc4      	itt	gt
 800e69e:	1a9b      	subgt	r3, r3, r2
 800e6a0:	18ed      	addgt	r5, r5, r3
 800e6a2:	2600      	movs	r6, #0
 800e6a4:	341a      	adds	r4, #26
 800e6a6:	42b5      	cmp	r5, r6
 800e6a8:	d11a      	bne.n	800e6e0 <_printf_common+0xc8>
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	e008      	b.n	800e6c0 <_printf_common+0xa8>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	4652      	mov	r2, sl
 800e6b2:	4641      	mov	r1, r8
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	47c8      	blx	r9
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	d103      	bne.n	800e6c4 <_printf_common+0xac>
 800e6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c4:	3501      	adds	r5, #1
 800e6c6:	e7c6      	b.n	800e656 <_printf_common+0x3e>
 800e6c8:	18e1      	adds	r1, r4, r3
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	2030      	movs	r0, #48	@ 0x30
 800e6ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6d2:	4422      	add	r2, r4
 800e6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6dc:	3302      	adds	r3, #2
 800e6de:	e7c7      	b.n	800e670 <_printf_common+0x58>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	4641      	mov	r1, r8
 800e6e6:	4638      	mov	r0, r7
 800e6e8:	47c8      	blx	r9
 800e6ea:	3001      	adds	r0, #1
 800e6ec:	d0e6      	beq.n	800e6bc <_printf_common+0xa4>
 800e6ee:	3601      	adds	r6, #1
 800e6f0:	e7d9      	b.n	800e6a6 <_printf_common+0x8e>
	...

0800e6f4 <_printf_i>:
 800e6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f8:	7e0f      	ldrb	r7, [r1, #24]
 800e6fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6fc:	2f78      	cmp	r7, #120	@ 0x78
 800e6fe:	4691      	mov	r9, r2
 800e700:	4680      	mov	r8, r0
 800e702:	460c      	mov	r4, r1
 800e704:	469a      	mov	sl, r3
 800e706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e70a:	d807      	bhi.n	800e71c <_printf_i+0x28>
 800e70c:	2f62      	cmp	r7, #98	@ 0x62
 800e70e:	d80a      	bhi.n	800e726 <_printf_i+0x32>
 800e710:	2f00      	cmp	r7, #0
 800e712:	f000 80d2 	beq.w	800e8ba <_printf_i+0x1c6>
 800e716:	2f58      	cmp	r7, #88	@ 0x58
 800e718:	f000 80b9 	beq.w	800e88e <_printf_i+0x19a>
 800e71c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e724:	e03a      	b.n	800e79c <_printf_i+0xa8>
 800e726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e72a:	2b15      	cmp	r3, #21
 800e72c:	d8f6      	bhi.n	800e71c <_printf_i+0x28>
 800e72e:	a101      	add	r1, pc, #4	@ (adr r1, 800e734 <_printf_i+0x40>)
 800e730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e734:	0800e78d 	.word	0x0800e78d
 800e738:	0800e7a1 	.word	0x0800e7a1
 800e73c:	0800e71d 	.word	0x0800e71d
 800e740:	0800e71d 	.word	0x0800e71d
 800e744:	0800e71d 	.word	0x0800e71d
 800e748:	0800e71d 	.word	0x0800e71d
 800e74c:	0800e7a1 	.word	0x0800e7a1
 800e750:	0800e71d 	.word	0x0800e71d
 800e754:	0800e71d 	.word	0x0800e71d
 800e758:	0800e71d 	.word	0x0800e71d
 800e75c:	0800e71d 	.word	0x0800e71d
 800e760:	0800e8a1 	.word	0x0800e8a1
 800e764:	0800e7cb 	.word	0x0800e7cb
 800e768:	0800e85b 	.word	0x0800e85b
 800e76c:	0800e71d 	.word	0x0800e71d
 800e770:	0800e71d 	.word	0x0800e71d
 800e774:	0800e8c3 	.word	0x0800e8c3
 800e778:	0800e71d 	.word	0x0800e71d
 800e77c:	0800e7cb 	.word	0x0800e7cb
 800e780:	0800e71d 	.word	0x0800e71d
 800e784:	0800e71d 	.word	0x0800e71d
 800e788:	0800e863 	.word	0x0800e863
 800e78c:	6833      	ldr	r3, [r6, #0]
 800e78e:	1d1a      	adds	r2, r3, #4
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	6032      	str	r2, [r6, #0]
 800e794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e79c:	2301      	movs	r3, #1
 800e79e:	e09d      	b.n	800e8dc <_printf_i+0x1e8>
 800e7a0:	6833      	ldr	r3, [r6, #0]
 800e7a2:	6820      	ldr	r0, [r4, #0]
 800e7a4:	1d19      	adds	r1, r3, #4
 800e7a6:	6031      	str	r1, [r6, #0]
 800e7a8:	0606      	lsls	r6, r0, #24
 800e7aa:	d501      	bpl.n	800e7b0 <_printf_i+0xbc>
 800e7ac:	681d      	ldr	r5, [r3, #0]
 800e7ae:	e003      	b.n	800e7b8 <_printf_i+0xc4>
 800e7b0:	0645      	lsls	r5, r0, #25
 800e7b2:	d5fb      	bpl.n	800e7ac <_printf_i+0xb8>
 800e7b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7b8:	2d00      	cmp	r5, #0
 800e7ba:	da03      	bge.n	800e7c4 <_printf_i+0xd0>
 800e7bc:	232d      	movs	r3, #45	@ 0x2d
 800e7be:	426d      	negs	r5, r5
 800e7c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7c4:	4859      	ldr	r0, [pc, #356]	@ (800e92c <_printf_i+0x238>)
 800e7c6:	230a      	movs	r3, #10
 800e7c8:	e011      	b.n	800e7ee <_printf_i+0xfa>
 800e7ca:	6821      	ldr	r1, [r4, #0]
 800e7cc:	6833      	ldr	r3, [r6, #0]
 800e7ce:	0608      	lsls	r0, r1, #24
 800e7d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7d4:	d402      	bmi.n	800e7dc <_printf_i+0xe8>
 800e7d6:	0649      	lsls	r1, r1, #25
 800e7d8:	bf48      	it	mi
 800e7da:	b2ad      	uxthmi	r5, r5
 800e7dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7de:	4853      	ldr	r0, [pc, #332]	@ (800e92c <_printf_i+0x238>)
 800e7e0:	6033      	str	r3, [r6, #0]
 800e7e2:	bf14      	ite	ne
 800e7e4:	230a      	movne	r3, #10
 800e7e6:	2308      	moveq	r3, #8
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7ee:	6866      	ldr	r6, [r4, #4]
 800e7f0:	60a6      	str	r6, [r4, #8]
 800e7f2:	2e00      	cmp	r6, #0
 800e7f4:	bfa2      	ittt	ge
 800e7f6:	6821      	ldrge	r1, [r4, #0]
 800e7f8:	f021 0104 	bicge.w	r1, r1, #4
 800e7fc:	6021      	strge	r1, [r4, #0]
 800e7fe:	b90d      	cbnz	r5, 800e804 <_printf_i+0x110>
 800e800:	2e00      	cmp	r6, #0
 800e802:	d04b      	beq.n	800e89c <_printf_i+0x1a8>
 800e804:	4616      	mov	r6, r2
 800e806:	fbb5 f1f3 	udiv	r1, r5, r3
 800e80a:	fb03 5711 	mls	r7, r3, r1, r5
 800e80e:	5dc7      	ldrb	r7, [r0, r7]
 800e810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e814:	462f      	mov	r7, r5
 800e816:	42bb      	cmp	r3, r7
 800e818:	460d      	mov	r5, r1
 800e81a:	d9f4      	bls.n	800e806 <_printf_i+0x112>
 800e81c:	2b08      	cmp	r3, #8
 800e81e:	d10b      	bne.n	800e838 <_printf_i+0x144>
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	07df      	lsls	r7, r3, #31
 800e824:	d508      	bpl.n	800e838 <_printf_i+0x144>
 800e826:	6923      	ldr	r3, [r4, #16]
 800e828:	6861      	ldr	r1, [r4, #4]
 800e82a:	4299      	cmp	r1, r3
 800e82c:	bfde      	ittt	le
 800e82e:	2330      	movle	r3, #48	@ 0x30
 800e830:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e834:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e838:	1b92      	subs	r2, r2, r6
 800e83a:	6122      	str	r2, [r4, #16]
 800e83c:	f8cd a000 	str.w	sl, [sp]
 800e840:	464b      	mov	r3, r9
 800e842:	aa03      	add	r2, sp, #12
 800e844:	4621      	mov	r1, r4
 800e846:	4640      	mov	r0, r8
 800e848:	f7ff fee6 	bl	800e618 <_printf_common>
 800e84c:	3001      	adds	r0, #1
 800e84e:	d14a      	bne.n	800e8e6 <_printf_i+0x1f2>
 800e850:	f04f 30ff 	mov.w	r0, #4294967295
 800e854:	b004      	add	sp, #16
 800e856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	f043 0320 	orr.w	r3, r3, #32
 800e860:	6023      	str	r3, [r4, #0]
 800e862:	4833      	ldr	r0, [pc, #204]	@ (800e930 <_printf_i+0x23c>)
 800e864:	2778      	movs	r7, #120	@ 0x78
 800e866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e86a:	6823      	ldr	r3, [r4, #0]
 800e86c:	6831      	ldr	r1, [r6, #0]
 800e86e:	061f      	lsls	r7, r3, #24
 800e870:	f851 5b04 	ldr.w	r5, [r1], #4
 800e874:	d402      	bmi.n	800e87c <_printf_i+0x188>
 800e876:	065f      	lsls	r7, r3, #25
 800e878:	bf48      	it	mi
 800e87a:	b2ad      	uxthmi	r5, r5
 800e87c:	6031      	str	r1, [r6, #0]
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	bf44      	itt	mi
 800e882:	f043 0320 	orrmi.w	r3, r3, #32
 800e886:	6023      	strmi	r3, [r4, #0]
 800e888:	b11d      	cbz	r5, 800e892 <_printf_i+0x19e>
 800e88a:	2310      	movs	r3, #16
 800e88c:	e7ac      	b.n	800e7e8 <_printf_i+0xf4>
 800e88e:	4827      	ldr	r0, [pc, #156]	@ (800e92c <_printf_i+0x238>)
 800e890:	e7e9      	b.n	800e866 <_printf_i+0x172>
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	f023 0320 	bic.w	r3, r3, #32
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	e7f6      	b.n	800e88a <_printf_i+0x196>
 800e89c:	4616      	mov	r6, r2
 800e89e:	e7bd      	b.n	800e81c <_printf_i+0x128>
 800e8a0:	6833      	ldr	r3, [r6, #0]
 800e8a2:	6825      	ldr	r5, [r4, #0]
 800e8a4:	6961      	ldr	r1, [r4, #20]
 800e8a6:	1d18      	adds	r0, r3, #4
 800e8a8:	6030      	str	r0, [r6, #0]
 800e8aa:	062e      	lsls	r6, r5, #24
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	d501      	bpl.n	800e8b4 <_printf_i+0x1c0>
 800e8b0:	6019      	str	r1, [r3, #0]
 800e8b2:	e002      	b.n	800e8ba <_printf_i+0x1c6>
 800e8b4:	0668      	lsls	r0, r5, #25
 800e8b6:	d5fb      	bpl.n	800e8b0 <_printf_i+0x1bc>
 800e8b8:	8019      	strh	r1, [r3, #0]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	6123      	str	r3, [r4, #16]
 800e8be:	4616      	mov	r6, r2
 800e8c0:	e7bc      	b.n	800e83c <_printf_i+0x148>
 800e8c2:	6833      	ldr	r3, [r6, #0]
 800e8c4:	1d1a      	adds	r2, r3, #4
 800e8c6:	6032      	str	r2, [r6, #0]
 800e8c8:	681e      	ldr	r6, [r3, #0]
 800e8ca:	6862      	ldr	r2, [r4, #4]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f7f1 fc96 	bl	8000200 <memchr>
 800e8d4:	b108      	cbz	r0, 800e8da <_printf_i+0x1e6>
 800e8d6:	1b80      	subs	r0, r0, r6
 800e8d8:	6060      	str	r0, [r4, #4]
 800e8da:	6863      	ldr	r3, [r4, #4]
 800e8dc:	6123      	str	r3, [r4, #16]
 800e8de:	2300      	movs	r3, #0
 800e8e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8e4:	e7aa      	b.n	800e83c <_printf_i+0x148>
 800e8e6:	6923      	ldr	r3, [r4, #16]
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	47d0      	blx	sl
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d0ad      	beq.n	800e850 <_printf_i+0x15c>
 800e8f4:	6823      	ldr	r3, [r4, #0]
 800e8f6:	079b      	lsls	r3, r3, #30
 800e8f8:	d413      	bmi.n	800e922 <_printf_i+0x22e>
 800e8fa:	68e0      	ldr	r0, [r4, #12]
 800e8fc:	9b03      	ldr	r3, [sp, #12]
 800e8fe:	4298      	cmp	r0, r3
 800e900:	bfb8      	it	lt
 800e902:	4618      	movlt	r0, r3
 800e904:	e7a6      	b.n	800e854 <_printf_i+0x160>
 800e906:	2301      	movs	r3, #1
 800e908:	4632      	mov	r2, r6
 800e90a:	4649      	mov	r1, r9
 800e90c:	4640      	mov	r0, r8
 800e90e:	47d0      	blx	sl
 800e910:	3001      	adds	r0, #1
 800e912:	d09d      	beq.n	800e850 <_printf_i+0x15c>
 800e914:	3501      	adds	r5, #1
 800e916:	68e3      	ldr	r3, [r4, #12]
 800e918:	9903      	ldr	r1, [sp, #12]
 800e91a:	1a5b      	subs	r3, r3, r1
 800e91c:	42ab      	cmp	r3, r5
 800e91e:	dcf2      	bgt.n	800e906 <_printf_i+0x212>
 800e920:	e7eb      	b.n	800e8fa <_printf_i+0x206>
 800e922:	2500      	movs	r5, #0
 800e924:	f104 0619 	add.w	r6, r4, #25
 800e928:	e7f5      	b.n	800e916 <_printf_i+0x222>
 800e92a:	bf00      	nop
 800e92c:	0800f31e 	.word	0x0800f31e
 800e930:	0800f32f 	.word	0x0800f32f

0800e934 <memmove>:
 800e934:	4288      	cmp	r0, r1
 800e936:	b510      	push	{r4, lr}
 800e938:	eb01 0402 	add.w	r4, r1, r2
 800e93c:	d902      	bls.n	800e944 <memmove+0x10>
 800e93e:	4284      	cmp	r4, r0
 800e940:	4623      	mov	r3, r4
 800e942:	d807      	bhi.n	800e954 <memmove+0x20>
 800e944:	1e43      	subs	r3, r0, #1
 800e946:	42a1      	cmp	r1, r4
 800e948:	d008      	beq.n	800e95c <memmove+0x28>
 800e94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e952:	e7f8      	b.n	800e946 <memmove+0x12>
 800e954:	4402      	add	r2, r0
 800e956:	4601      	mov	r1, r0
 800e958:	428a      	cmp	r2, r1
 800e95a:	d100      	bne.n	800e95e <memmove+0x2a>
 800e95c:	bd10      	pop	{r4, pc}
 800e95e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e966:	e7f7      	b.n	800e958 <memmove+0x24>

0800e968 <_realloc_r>:
 800e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96c:	4680      	mov	r8, r0
 800e96e:	4615      	mov	r5, r2
 800e970:	460c      	mov	r4, r1
 800e972:	b921      	cbnz	r1, 800e97e <_realloc_r+0x16>
 800e974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	4611      	mov	r1, r2
 800e97a:	f7ff bbad 	b.w	800e0d8 <_malloc_r>
 800e97e:	b92a      	cbnz	r2, 800e98c <_realloc_r+0x24>
 800e980:	f7ff fca8 	bl	800e2d4 <_free_r>
 800e984:	2400      	movs	r4, #0
 800e986:	4620      	mov	r0, r4
 800e988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98c:	f000 f81a 	bl	800e9c4 <_malloc_usable_size_r>
 800e990:	4285      	cmp	r5, r0
 800e992:	4606      	mov	r6, r0
 800e994:	d802      	bhi.n	800e99c <_realloc_r+0x34>
 800e996:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e99a:	d8f4      	bhi.n	800e986 <_realloc_r+0x1e>
 800e99c:	4629      	mov	r1, r5
 800e99e:	4640      	mov	r0, r8
 800e9a0:	f7ff fb9a 	bl	800e0d8 <_malloc_r>
 800e9a4:	4607      	mov	r7, r0
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d0ec      	beq.n	800e984 <_realloc_r+0x1c>
 800e9aa:	42b5      	cmp	r5, r6
 800e9ac:	462a      	mov	r2, r5
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	bf28      	it	cs
 800e9b2:	4632      	movcs	r2, r6
 800e9b4:	f7ff fc80 	bl	800e2b8 <memcpy>
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	f7ff fc8a 	bl	800e2d4 <_free_r>
 800e9c0:	463c      	mov	r4, r7
 800e9c2:	e7e0      	b.n	800e986 <_realloc_r+0x1e>

0800e9c4 <_malloc_usable_size_r>:
 800e9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9c8:	1f18      	subs	r0, r3, #4
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	bfbc      	itt	lt
 800e9ce:	580b      	ldrlt	r3, [r1, r0]
 800e9d0:	18c0      	addlt	r0, r0, r3
 800e9d2:	4770      	bx	lr

0800e9d4 <_init>:
 800e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d6:	bf00      	nop
 800e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9da:	bc08      	pop	{r3}
 800e9dc:	469e      	mov	lr, r3
 800e9de:	4770      	bx	lr

0800e9e0 <_fini>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	bf00      	nop
 800e9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e6:	bc08      	pop	{r3}
 800e9e8:	469e      	mov	lr, r3
 800e9ea:	4770      	bx	lr
